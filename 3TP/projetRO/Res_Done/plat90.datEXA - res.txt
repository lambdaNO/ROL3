Résolution exacte pour plat/plat90.dat points à visiter :
Résolution d'initiale :  
> temps total = 110.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 58) (6 -> 76) (7 -> 68) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 44) (44 -> 43) (45 -> 69) (46 -> 59) (47 -> 87) (48 -> 3) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 39) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 47) (88 -> 13) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89], [2, 79], [3, 48], [4, 29], [5, 58], [6, 76], [7, 68], [8, 32], [9, 11], [10, 33], [12, 50], [13, 88], [14, 80], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [22, 42], [23, 49], [24, 38], [25, 78], [26, 51], [27, 72], [28, 74], [30, 37], [31, 35], [34, 61], [39, 65], [40, 82], [41, 66], [43, 44], [45, 69], [46, 59], [47, 87], [52, 84], [53, 90], [54, 85], [55, 67], [56, 86], [57, 71], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 45
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,89] + x[89,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 115.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 48) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 68) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 44) (44 -> 43) (45 -> 69) (46 -> 59) (47 -> 87) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 42, 29, 4, 12, 50, 39, 65, 47, 87, 9, 11], [2, 79], [3, 48], [7, 68], [8, 32], [10, 33], [14, 80], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [23, 49], [24, 38], [25, 78], [26, 51], [27, 72], [30, 37], [31, 35], [34, 61], [40, 82], [41, 66], [43, 44], [45, 69], [46, 59], [52, 84], [53, 90], [54, 85], [56, 86], [57, 71], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 79]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,79] + x[79,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 116.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 48) (4 -> 12) (5 -> 58) (6 -> 76) (7 -> 43) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 44) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 87) (48 -> 3) (49 -> 23) (50 -> 84) (51 -> 26) (52 -> 2) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 39) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 29) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 4, 12, 50, 84, 52, 2, 79, 68, 7, 43, 44, 8, 32, 38, 24, 47, 87, 9, 11], [3, 48], [5, 58], [6, 76], [10, 33], [13, 88], [14, 80], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [22, 42], [23, 49], [25, 78], [26, 51], [27, 72], [28, 74], [30, 37], [31, 35], [34, 61], [39, 65], [40, 82], [41, 66], [45, 69], [46, 59], [53, 90], [54, 85], [55, 67], [56, 86], [57, 71], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 35

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [3, 48]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,48] + x[48,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 89) (2 -> 52) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 43) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 7) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 80) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 55) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 48) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 29) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 4, 12, 50, 39, 65, 71, 57, 80, 14, 43, 7, 68, 79, 2, 52, 84, 48, 3, 87, 9, 11], [5, 58], [6, 76], [8, 44], [10, 33], [13, 88], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [22, 42], [23, 49], [24, 47], [25, 78], [26, 51], [27, 72], [28, 74], [30, 37], [31, 35], [32, 38], [34, 61], [40, 82], [41, 66], [45, 69], [46, 59], [53, 90], [54, 85], [55, 67], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [5, 58]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,58] + x[58,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 89) (2 -> 52) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 7) (44 -> 43) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 55) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 48) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 42, 29, 4, 12, 50, 39, 65, 47, 24, 38, 32, 8, 44, 43, 7, 68, 79, 2, 52, 84, 48, 3, 87, 9, 11], [10, 33], [14, 80], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [23, 49], [25, 78], [26, 51], [27, 72], [30, 37], [31, 35], [34, 61], [40, 82], [41, 66], [45, 69], [46, 59], [53, 90], [54, 85], [56, 86], [57, 71], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [10, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,33] + x[33,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 125.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 44) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 14) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 84) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 2) (53 -> 90) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 39) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 45) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 57) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 84, 52, 2, 79, 68, 7, 43, 14, 80, 57, 71, 65, 39, 50, 12, 4, 29, 42, 22, 13, 88, 6, 76, 55, 64, 70, 45, 69, 10, 33, 5, 89], [8, 44], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [23, 49], [24, 47], [25, 78], [26, 51], [27, 72], [28, 67], [30, 37], [31, 35], [32, 38], [34, 61], [40, 82], [41, 66], [46, 59], [53, 90], [54, 85], [56, 86], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [8, 44]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,44] + x[44,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 125.0
   Permutations :
(1 -> 89) (2 -> 52) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 88) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 65) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 7) (44 -> 43) (45 -> 70) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 55) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 48) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 33, 10, 69, 45, 70, 64, 55, 76, 6, 88, 13, 22, 42, 29, 4, 12, 50, 39, 65, 47, 24, 38, 32, 8, 44, 43, 7, 68, 79, 2, 52, 84, 48, 3, 87, 9, 11], [14, 80], [15, 81], [16, 63], [17, 36], [18, 62], [19, 21], [20, 73], [23, 49], [25, 78], [26, 51], [27, 72], [28, 67], [30, 37], [31, 35], [34, 61], [40, 82], [41, 66], [46, 59], [53, 90], [54, 85], [56, 86], [57, 71], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [14, 80]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,80] + x[80,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 89) (2 -> 52) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 16) (11 -> 1) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 7) (44 -> 43) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 57) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 48) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 6) (89 -> 29) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 42, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 33, 10, 16, 63, 8, 44, 43, 7, 68, 79, 2, 52, 84, 48, 3, 87, 9, 11], [4, 12], [14, 80, 57, 71, 65, 47, 24], [15, 81], [17, 36], [18, 62], [19, 21], [20, 73], [23, 49], [25, 78], [26, 51], [27, 72], [30, 37], [31, 35], [32, 38], [34, 61], [39, 50], [40, 82], [41, 66], [45, 69], [46, 59], [53, 90], [54, 85], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [4, 12]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,12] + x[12,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 33) (6 -> 76) (7 -> 43) (8 -> 32) (9 -> 87) (10 -> 69) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 89) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 44) (44 -> 8) (45 -> 70) (46 -> 59) (47 -> 65) (48 -> 84) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 2) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 55) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 13) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 84, 52, 2, 79, 68, 7, 43, 44, 8, 32, 38, 24, 14, 80, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 89], [5, 33, 10, 69, 45, 70, 64, 55, 67, 28, 74, 58], [6, 76], [13, 88], [15, 81], [17, 36], [19, 21], [20, 73], [22, 42], [23, 49], [25, 78], [27, 72], [30, 37], [31, 35], [34, 61], [40, 82], [41, 66], [46, 59], [47, 65], [53, 90], [54, 85], [56, 86], [57, 71], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [6, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,76] + x[76,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 32) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 44) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 65) (48 -> 84) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 2) (53 -> 90) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 45) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 84, 52, 2, 79, 68, 7, 43, 44, 8, 32, 38, 24, 14, 80, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 42, 22, 13, 88, 6, 76, 55, 64, 70, 45, 69, 10, 33, 5, 89], [15, 81], [17, 36], [19, 21], [20, 73], [23, 49], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [34, 61], [40, 82], [41, 66], [46, 59], [47, 65], [53, 90], [54, 85], [56, 86], [57, 71], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [15, 81]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,81] + x[81,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 127.0
   Permutations :
(1 -> 89) (2 -> 52) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 88) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 24) (15 -> 43) (16 -> 80) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 7) (44 -> 21) (45 -> 70) (46 -> 59) (47 -> 65) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 55) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 48) (85 -> 81) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 33, 10, 69, 45, 70, 64, 55, 76, 6, 88, 13, 22, 42, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 16, 80, 14, 24, 38, 32, 8, 44, 21, 19, 40, 82, 54, 85, 81, 15, 43, 7, 68, 79, 2, 52, 84, 48, 3, 87, 9, 11], [17, 36], [20, 73], [23, 49], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [34, 61], [41, 66], [46, 59], [47, 65], [53, 90], [56, 86], [57, 71], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [17, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,36] + x[36,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 11) (2 -> 85) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 68) (8 -> 63) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 43) (16 -> 10) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 22) (43 -> 14) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 28) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 39) (66 -> 41) (67 -> 81) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 57) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 79, 2, 85, 54, 82, 40, 19, 21, 44, 8, 63, 16, 10, 33, 5, 89], [4, 29, 42, 22, 13, 88, 6, 76, 55, 67, 81, 15, 43, 14, 80, 57, 71, 65, 39, 50, 12], [7, 68], [18, 62], [20, 73], [23, 49], [24, 47], [25, 78], [26, 51], [27, 72], [28, 74, 58], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [7, 68]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,68] + x[68,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 32) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 2) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 22) (43 -> 15) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 65) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 64) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 45) (71 -> 57) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 2, 79, 68, 7, 43, 15, 81, 85, 54, 82, 40, 19, 21, 44, 8, 32, 38, 24, 14, 80, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 42, 22, 13, 88, 6, 76, 55, 64, 70, 45, 69, 10, 33, 5, 89], [20, 73], [23, 49], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [34, 61], [41, 66], [46, 59], [47, 65], [52, 84], [53, 90], [56, 86], [57, 71], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [20, 73]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,73] + x[73,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 89) (2 -> 17) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 88) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 43) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 42) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 48) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 7) (44 -> 21) (45 -> 70) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 73) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 55) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 16) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 33, 10, 69, 45, 70, 64, 55, 76, 6, 88, 13, 22, 42, 29, 4, 12, 50, 39, 26, 51, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 63, 8, 44, 21, 19, 40, 82, 54, 85, 81, 15, 43, 7, 68, 79, 2, 17, 36, 48, 3, 87, 9, 11], [18, 62], [23, 49], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [46, 59], [52, 84], [53, 90], [56, 86], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [18, 62]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,62] + x[62,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 88) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 10) (17 -> 2) (18 -> 62) (19 -> 21) (20 -> 57) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 42) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 73) (43 -> 15) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 2, 79, 68, 7, 43, 15, 81, 85, 54, 82, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 42, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 10, 33, 5, 89], [6, 88], [13, 22], [23, 49], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [55, 76], [56, 86], [58, 74], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [6, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,88] + x[88,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 10) (17 -> 2) (18 -> 62) (19 -> 21) (20 -> 57) (21 -> 44) (22 -> 42) (23 -> 49) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 89) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 73) (43 -> 15) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 13) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 2, 79, 68, 7, 43, 15, 81, 85, 54, 82, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 89], [5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 42, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 10, 33], [23, 49], [25, 78], [27, 72], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [23, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,49] + x[49,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 89) (2 -> 17) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 24) (15 -> 43) (16 -> 80) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 48) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 23) (44 -> 21) (45 -> 29) (46 -> 59) (47 -> 65) (48 -> 3) (49 -> 16) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 7) (71 -> 57) (72 -> 27) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 9) (88 -> 6) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 33, 10, 69, 45, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 8, 44, 21, 19, 40, 82, 54, 85, 81, 15, 43, 23, 49, 16, 80, 14, 24, 47, 65, 71, 57, 20, 73, 42, 22, 13, 88, 6, 76, 55, 64, 70, 7, 68, 79, 2, 17, 36, 48, 3, 87, 9, 11], [25, 78], [27, 72], [28, 67], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [46, 59], [52, 84], [53, 90], [56, 86], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [25, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,78] + x[78,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 11) (2 -> 85) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 43) (16 -> 10) (17 -> 79) (18 -> 63) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 56) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 78) (41 -> 66) (42 -> 22) (43 -> 23) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 16) (50 -> 12) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 39) (69 -> 45) (70 -> 7) (71 -> 65) (72 -> 27) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 57) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 14) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 79, 2, 85, 81, 15, 43, 23, 49, 16, 10, 33, 5, 89], [4, 29], [6, 76, 55, 64, 70, 7, 68, 39, 26, 51, 62, 18, 63, 8, 44, 21, 19, 40, 78, 25, 56, 86, 14, 80, 57, 20, 73, 42, 22, 13, 88], [12, 50], [24, 47], [27, 72], [28, 67], [30, 37], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [54, 82], [58, 74], [60, 75], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [4, 29]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,29] + x[29,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 11) (2 -> 73) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 16) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 86) (15 -> 81) (16 -> 49) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 57) (21 -> 44) (22 -> 13) (23 -> 37) (24 -> 47) (25 -> 78) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 42) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 22) (43 -> 15) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 67) (56 -> 25) (57 -> 80) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 40) (79 -> 68) (80 -> 14) (81 -> 85) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 2) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 79, 68, 7, 43, 15, 81, 85, 2, 73, 20, 57, 80, 14, 86, 56, 25, 78, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 42, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [10, 16, 49, 23, 37, 30, 33], [24, 47], [27, 72], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [54, 82], [60, 75], [64, 70], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [24, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,47] + x[47,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 142.0
   Permutations :
(1 -> 89) (2 -> 85) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 78) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 81) (16 -> 49) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 43) (24 -> 38) (25 -> 56) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 48) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 15) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 1) (53 -> 90) (54 -> 84) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 7) (71 -> 65) (72 -> 27) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 17) (80 -> 57) (81 -> 67) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 2) (86 -> 14) (87 -> 47) (88 -> 6) (89 -> 29) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 16, 49, 23, 43, 15, 81, 67, 28, 74, 58, 5, 33, 10, 78, 25, 56, 86, 14, 80, 57, 20, 73, 42, 22, 13, 88, 6, 76, 55, 64, 70, 7, 68, 79, 17, 36, 48, 3, 87, 47, 24, 38, 32, 8, 44, 21, 19, 40, 82, 54, 84, 52], [2, 85], [9, 11], [27, 72], [30, 37], [31, 35], [34, 61], [41, 66], [45, 69], [46, 59], [53, 90], [60, 75], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [2, 85]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,85] + x[85,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 142.0
   Permutations :
(1 -> 89) (2 -> 17) (3 -> 87) (4 -> 29) (5 -> 58) (6 -> 88) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 78) (11 -> 1) (12 -> 4) (13 -> 22) (14 -> 80) (15 -> 43) (16 -> 49) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 42) (23 -> 37) (24 -> 14) (25 -> 12) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 52) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 48) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 73) (43 -> 7) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 55) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 16) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 50) (85 -> 81) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 42, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 49, 23, 37, 30, 33, 10, 78, 25, 12, 4, 29, 52, 84, 50, 39, 26, 51, 62, 18, 63, 8, 44, 21, 19, 40, 82, 54, 85, 81, 15, 43, 7, 68, 79, 2, 17, 36, 48, 3, 87, 9, 11], [27, 72], [31, 35], [32, 38], [34, 61], [41, 66], [45, 69], [46, 59], [53, 90], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [27, 72]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,72] + x[72,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 142.0
   Permutations :
(1 -> 89) (2 -> 17) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 24) (15 -> 43) (16 -> 80) (17 -> 36) (18 -> 63) (19 -> 21) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 51) (27 -> 25) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 48) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 23) (44 -> 72) (45 -> 69) (46 -> 59) (47 -> 65) (48 -> 3) (49 -> 16) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 81) (68 -> 79) (69 -> 45) (70 -> 7) (71 -> 57) (72 -> 27) (73 -> 42) (74 -> 28) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 10) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 6) (89 -> 29) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 8, 44, 72, 27, 25, 78, 10, 33, 5, 58, 74, 28, 67, 81, 15, 43, 23, 49, 16, 80, 14, 24, 47, 65, 71, 57, 20, 73, 42, 22, 13, 88, 6, 76, 55, 64, 70, 7, 68, 79, 2, 17, 36, 48, 3, 87, 9, 11], [19, 21], [30, 37], [31, 35], [32, 38], [34, 61], [40, 82], [41, 66], [45, 69], [46, 59], [52, 84], [53, 90], [54, 85], [56, 86], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [19, 21]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,21] + x[21,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 143.0
   Permutations :
(1 -> 89) (2 -> 73) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 43) (16 -> 49) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 13) (23 -> 37) (24 -> 14) (25 -> 78) (26 -> 51) (27 -> 25) (28 -> 67) (29 -> 4) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 90) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 22) (43 -> 7) (44 -> 21) (45 -> 29) (46 -> 59) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 42) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 81) (68 -> 79) (69 -> 72) (70 -> 45) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 48) (79 -> 17) (80 -> 16) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 2) (86 -> 56) (87 -> 9) (88 -> 6) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 81, 15, 43, 7, 68, 79, 17, 36, 90, 53, 42, 22, 13, 88, 6, 76, 55, 64, 70, 45, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 8, 44, 21, 19, 40, 82, 54, 85, 2, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 49, 23, 37, 30, 33, 10, 69, 72, 27, 25, 78, 48, 3, 87, 9, 11], [31, 35], [32, 38], [34, 61], [41, 66], [46, 59], [52, 84], [56, 86], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [31, 35]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[31,35] + x[35,31] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 144.0
   Permutations :
(1 -> 11) (2 -> 85) (3 -> 48) (4 -> 12) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 24) (15 -> 35) (16 -> 80) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 46) (32 -> 38) (33 -> 5) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 68) (40 -> 19) (41 -> 66) (42 -> 29) (43 -> 23) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 65) (48 -> 36) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 72) (53 -> 90) (54 -> 82) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 22) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 45) (71 -> 57) (72 -> 27) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 40) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 79, 2, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 64, 70, 45, 69, 10, 33, 5, 89], [4, 12, 50, 84, 52, 72, 27, 25, 78, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 68, 7, 43, 23, 49, 16, 80, 14, 24, 47, 65, 71, 57, 20, 73, 42, 29], [28, 67], [30, 37], [32, 38], [34, 61], [41, 66], [53, 90], [54, 82], [56, 86], [58, 74], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [28, 67]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,67] + x[67,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 144.0
   Permutations :
(1 -> 89) (2 -> 85) (3 -> 87) (4 -> 12) (5 -> 33) (6 -> 88) (7 -> 43) (8 -> 63) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 24) (15 -> 81) (16 -> 80) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 59) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 15) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 68) (40 -> 19) (41 -> 66) (42 -> 53) (43 -> 23) (44 -> 8) (45 -> 70) (46 -> 31) (47 -> 65) (48 -> 3) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 72) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 55) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 2) (80 -> 14) (81 -> 67) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 29) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 29, 4, 12, 50, 84, 52, 72, 27, 25, 78, 48, 3, 87, 9, 11], [2, 85, 54, 82, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 68, 7, 43, 23, 49, 16, 80, 14, 24, 47, 65, 71, 57, 20, 73, 42, 53, 90, 36, 17, 79], [5, 33, 10, 69, 45, 70, 64, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 67, 28, 74, 58], [30, 37], [32, 38], [34, 61], [41, 66], [56, 86], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [30, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,37] + x[37,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 145.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 78) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 35) (16 -> 49) (17 -> 2) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 13) (23 -> 37) (24 -> 38) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 42) (30 -> 33) (31 -> 46) (32 -> 8) (33 -> 10) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 73) (43 -> 14) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 44) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 16) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 2, 79, 68, 7, 43, 14, 80, 16, 49, 23, 37, 30, 33, 10, 78, 25, 27, 72, 44, 21, 19, 40, 82, 54, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [4, 29, 42, 73, 20, 57, 71, 65, 47, 24, 38, 32, 8, 63, 18, 62, 51, 26, 39, 50, 12], [34, 61], [41, 66], [45, 69], [52, 84], [53, 90], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [34, 61]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,61] + x[61,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 32) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 49) (17 -> 2) (18 -> 63) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 59) (23 -> 37) (24 -> 47) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 67) (29 -> 4) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 72) (35 -> 15) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 26) (40 -> 19) (41 -> 66) (42 -> 53) (43 -> 14) (44 -> 8) (45 -> 61) (46 -> 31) (47 -> 65) (48 -> 3) (49 -> 23) (50 -> 84) (51 -> 62) (52 -> 29) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 42) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 68) (80 -> 16) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 54, 82, 40, 19, 21, 44, 8, 32, 38, 24, 47, 65, 71, 57, 20, 73, 42, 53, 90, 36, 17, 2, 79, 68, 7, 43, 14, 80, 16, 49, 23, 37, 30, 33, 10, 69, 45, 61, 34, 72, 27, 25, 78, 48, 3, 87, 9, 11], [4, 12, 50, 84, 52, 29], [18, 63], [26, 39], [41, 66], [51, 62], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [18, 63]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,63] + x[63,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 11) (2 -> 85) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 69) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 35) (16 -> 49) (17 -> 2) (18 -> 62) (19 -> 21) (20 -> 57) (21 -> 44) (22 -> 13) (23 -> 37) (24 -> 14) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 74) (29 -> 42) (30 -> 33) (31 -> 46) (32 -> 38) (33 -> 10) (34 -> 72) (35 -> 31) (36 -> 17) (37 -> 30) (38 -> 32) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 73) (43 -> 7) (44 -> 8) (45 -> 61) (46 -> 59) (47 -> 24) (48 -> 36) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 40) (79 -> 68) (80 -> 16) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 36, 17, 2, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [4, 29, 42, 73, 20, 57, 71, 65, 47, 24, 14, 80, 16, 49, 23, 37, 30, 33, 10, 69, 45, 61, 34, 72, 27, 25, 78, 40, 19, 21, 44, 8, 63, 18, 62, 51, 26, 39, 50, 12], [7, 43], [32, 38], [41, 66], [52, 84], [53, 90], [54, 82], [56, 86], [60, 75], [64, 70], [68, 79], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [7, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,43] + x[43,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 11) (2 -> 17) (3 -> 48) (4 -> 12) (5 -> 89) (6 -> 88) (7 -> 68) (8 -> 32) (9 -> 87) (10 -> 69) (11 -> 9) (12 -> 50) (13 -> 22) (14 -> 43) (15 -> 81) (16 -> 49) (17 -> 36) (18 -> 63) (19 -> 21) (20 -> 57) (21 -> 44) (22 -> 59) (23 -> 37) (24 -> 47) (25 -> 27) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 61) (35 -> 15) (36 -> 90) (37 -> 30) (38 -> 24) (39 -> 26) (40 -> 19) (41 -> 66) (42 -> 73) (43 -> 7) (44 -> 8) (45 -> 29) (46 -> 31) (47 -> 65) (48 -> 78) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 42) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 80) (58 -> 5) (59 -> 46) (60 -> 75) (61 -> 74) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 55) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 28) (72 -> 34) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 13) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 78, 25, 27, 72, 34, 61, 74, 58, 5, 89], [2, 17, 36, 90, 53, 42, 73, 20, 57, 80, 14, 43, 7, 68, 79], [4, 12, 50, 39, 26, 51, 62, 18, 63, 16, 49, 23, 37, 30, 33, 10, 69, 45, 29], [6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 54, 82, 40, 19, 21, 44, 8, 32, 38, 24, 47, 65, 71, 28, 67, 55, 76], [41, 66], [52, 84], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [41, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[41,66] + x[66,41] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 11) (2 -> 17) (3 -> 48) (4 -> 12) (5 -> 89) (6 -> 76) (7 -> 68) (8 -> 44) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 43) (15 -> 35) (16 -> 80) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 41) (25 -> 27) (26 -> 51) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 46) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 90) (37 -> 23) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 66) (42 -> 29) (43 -> 7) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 78) (49 -> 16) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 42) (54 -> 85) (55 -> 67) (56 -> 86) (57 -> 71) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 45) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 47) (66 -> 73) (67 -> 28) (68 -> 79) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 34) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 78, 25, 27, 72, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 80, 14, 43, 7, 68, 79, 2, 17, 36, 90, 53, 42, 29, 4, 12, 50, 39, 26, 51, 62, 18, 63, 8, 44, 21, 19, 40, 82, 54, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [20, 57, 71, 65, 47, 24, 41, 66, 73], [32, 38], [52, 84], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [32, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[32,38] + x[38,32] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 32) (9 -> 85) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 80) (15 -> 35) (16 -> 63) (17 -> 2) (18 -> 62) (19 -> 40) (20 -> 73) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 41) (30 -> 37) (31 -> 46) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 23) (38 -> 24) (39 -> 50) (40 -> 19) (41 -> 66) (42 -> 53) (43 -> 14) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 87) (48 -> 78) (49 -> 16) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 67) (56 -> 86) (57 -> 20) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 21) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 34) (73 -> 42) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 57) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [2, 79, 68, 7, 43, 14, 80, 57, 20, 73, 42, 53, 90, 36, 17], [3, 48, 78, 25, 27, 72, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 41, 66, 21, 44, 8, 32, 38, 24, 47, 87], [19, 40], [52, 84], [54, 82], [56, 86], [60, 75], [64, 70], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [19, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,40] + x[40,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 89) (2 -> 85) (3 -> 48) (4 -> 12) (5 -> 58) (6 -> 66) (7 -> 43) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 35) (16 -> 63) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 44) (22 -> 13) (23 -> 49) (24 -> 47) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 46) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 23) (38 -> 24) (39 -> 68) (40 -> 19) (41 -> 29) (42 -> 53) (43 -> 14) (44 -> 8) (45 -> 69) (46 -> 59) (47 -> 87) (48 -> 78) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 1) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 22) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 81) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 34) (73 -> 42) (74 -> 28) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 57) (81 -> 15) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 5) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 66, 41, 29, 4, 12, 50, 84, 52], [2, 85, 54, 82, 40, 19, 21, 44, 8, 32, 38, 24, 47, 87, 3, 48, 78, 25, 27, 72, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 68, 7, 43, 14, 80, 57, 20, 73, 42, 53, 90, 36, 17, 79], [9, 11], [55, 76], [56, 86], [60, 75], [64, 70], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [9, 11]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,11] + x[11,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 32) (9 -> 11) (10 -> 78) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 49) (17 -> 2) (18 -> 63) (19 -> 21) (20 -> 73) (21 -> 66) (22 -> 59) (23 -> 37) (24 -> 47) (25 -> 27) (26 -> 51) (27 -> 72) (28 -> 67) (29 -> 4) (30 -> 33) (31 -> 35) (32 -> 38) (33 -> 10) (34 -> 52) (35 -> 15) (36 -> 17) (37 -> 30) (38 -> 24) (39 -> 26) (40 -> 19) (41 -> 29) (42 -> 53) (43 -> 14) (44 -> 8) (45 -> 69) (46 -> 31) (47 -> 65) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 28) (72 -> 44) (73 -> 42) (74 -> 61) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 57) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 48) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 61, 34, 52, 84, 48, 3, 87, 9, 11], [2, 79, 68, 7, 43, 14, 80, 57, 20, 73, 42, 53, 90, 36, 17], [4, 12, 50, 39, 26, 51, 62, 18, 63, 16, 49, 23, 37, 30, 33, 10, 78, 25, 27, 72, 44, 8, 32, 38, 24, 47, 65, 71, 28, 67, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 54, 82, 40, 19, 21, 66, 41, 29], [45, 69], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [45, 69]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[45,69] + x[69,45] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 89) (2 -> 73) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 66) (7 -> 68) (8 -> 44) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 50) (13 -> 88) (14 -> 43) (15 -> 81) (16 -> 49) (17 -> 36) (18 -> 63) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 59) (23 -> 37) (24 -> 38) (25 -> 78) (26 -> 51) (27 -> 25) (28 -> 71) (29 -> 4) (30 -> 33) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 72) (35 -> 15) (36 -> 90) (37 -> 30) (38 -> 32) (39 -> 26) (40 -> 82) (41 -> 29) (42 -> 22) (43 -> 7) (44 -> 21) (45 -> 70) (46 -> 31) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 39) (51 -> 62) (52 -> 84) (53 -> 42) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 80) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 18) (63 -> 16) (64 -> 55) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 79) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 61) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 17) (80 -> 14) (81 -> 67) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 2) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 61, 34, 72, 27, 25, 78, 48, 3, 87, 9, 11], [2, 73, 20, 57, 80, 14, 43, 7, 68, 79, 17, 36, 90, 53, 42, 22, 59, 46, 31, 35, 15, 81, 67, 28, 71, 65, 47, 24, 38, 32, 8, 44, 21, 19, 40, 82, 54, 85], [4, 12, 50, 39, 26, 51, 62, 18, 63, 16, 49, 23, 37, 30, 33, 10, 69, 45, 70, 64, 55, 76, 6, 66, 41, 29], [13, 88], [52, 84], [56, 86], [60, 75], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [13, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,88] + x[88,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 89) (2 -> 17) (3 -> 48) (4 -> 29) (5 -> 58) (6 -> 88) (7 -> 68) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 4) (13 -> 22) (14 -> 43) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 59) (23 -> 49) (24 -> 47) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 67) (29 -> 41) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 15) (36 -> 90) (37 -> 23) (38 -> 24) (39 -> 50) (40 -> 78) (41 -> 66) (42 -> 73) (43 -> 7) (44 -> 8) (45 -> 69) (46 -> 31) (47 -> 87) (48 -> 84) (49 -> 16) (50 -> 12) (51 -> 26) (52 -> 34) (53 -> 42) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 80) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 71) (66 -> 21) (67 -> 55) (68 -> 79) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 44) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 2) (80 -> 14) (81 -> 85) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 9) (86 -> 56) (87 -> 3) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 9, 11], [2, 17, 36, 90, 53, 42, 73, 20, 57, 80, 14, 43, 7, 68, 79], [3, 48, 84, 52, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 41, 66, 21, 19, 40, 78, 25, 27, 72, 44, 8, 32, 38, 24, 47, 87], [54, 82], [56, 86], [60, 75], [64, 70], [65, 71], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [54, 82]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[54,82] + x[82,54] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 89) (2 -> 85) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 44) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 79) (18 -> 62) (19 -> 21) (20 -> 73) (21 -> 66) (22 -> 59) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 71) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 8) (33 -> 30) (34 -> 61) (35 -> 15) (36 -> 17) (37 -> 23) (38 -> 32) (39 -> 68) (40 -> 19) (41 -> 29) (42 -> 53) (43 -> 14) (44 -> 72) (45 -> 69) (46 -> 31) (47 -> 24) (48 -> 3) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 34) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 42) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 2) (80 -> 57) (81 -> 67) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 71, 65, 47, 24, 38, 32, 8, 44, 72, 27, 25, 78, 48, 3, 87, 9, 11], [2, 85, 54, 82, 40, 19, 21, 66, 41, 29, 4, 12, 50, 84, 52, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 68, 7, 43, 14, 80, 57, 20, 73, 42, 53, 90, 36, 17, 79], [6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 67, 55, 76], [56, 86], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [56, 86]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[56,86] + x[86,56] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 63) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 86) (15 -> 35) (16 -> 80) (17 -> 2) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 38) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 41) (30 -> 37) (31 -> 46) (32 -> 8) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 23) (38 -> 32) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 53) (43 -> 44) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 78) (49 -> 16) (50 -> 12) (51 -> 26) (52 -> 84) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 42) (57 -> 71) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 73) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 65) (72 -> 34) (73 -> 20) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 25) (79 -> 68) (80 -> 14) (81 -> 15) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 78, 25, 27, 72, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 80, 14, 86, 56, 42, 53, 90, 36, 17, 2, 79, 68, 7, 43, 44, 21, 19, 40, 82, 54, 85, 81, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [4, 29, 41, 66, 73, 20, 57, 71, 65, 47, 24, 38, 32, 8, 63, 18, 62, 51, 26, 39, 50, 12], [52, 84], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [52, 84]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[52,84] + x[84,52] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 87) (4 -> 12) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 32) (9 -> 11) (10 -> 33) (11 -> 1) (12 -> 50) (13 -> 22) (14 -> 86) (15 -> 81) (16 -> 80) (17 -> 2) (18 -> 63) (19 -> 21) (20 -> 73) (21 -> 66) (22 -> 59) (23 -> 49) (24 -> 47) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 67) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 15) (36 -> 17) (37 -> 23) (38 -> 24) (39 -> 26) (40 -> 19) (41 -> 29) (42 -> 53) (43 -> 44) (44 -> 72) (45 -> 69) (46 -> 31) (47 -> 65) (48 -> 3) (49 -> 16) (50 -> 84) (51 -> 62) (52 -> 34) (53 -> 90) (54 -> 82) (55 -> 76) (56 -> 42) (57 -> 20) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 45) (62 -> 18) (63 -> 8) (64 -> 70) (65 -> 71) (66 -> 41) (67 -> 55) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 57) (72 -> 27) (73 -> 51) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 68) (80 -> 14) (81 -> 85) (82 -> 40) (83 -> 77) (84 -> 52) (85 -> 54) (86 -> 56) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 54, 82, 40, 19, 21, 66, 41, 29, 4, 12, 50, 84, 52, 34, 61, 45, 69, 10, 33, 30, 37, 23, 49, 16, 80, 14, 86, 56, 42, 53, 90, 36, 17, 2, 79, 68, 7, 43, 44, 72, 27, 25, 78, 48, 3, 87, 9, 11], [8, 32, 38, 24, 47, 65, 71, 57, 20, 73, 51, 62, 18, 63], [26, 39], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [26, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,39] + x[39,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 89) (2 -> 79) (3 -> 87) (4 -> 29) (5 -> 58) (6 -> 88) (7 -> 43) (8 -> 63) (9 -> 11) (10 -> 69) (11 -> 1) (12 -> 4) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 49) (17 -> 36) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 59) (23 -> 37) (24 -> 38) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 67) (29 -> 41) (30 -> 33) (31 -> 35) (32 -> 8) (33 -> 10) (34 -> 52) (35 -> 15) (36 -> 90) (37 -> 30) (38 -> 32) (39 -> 68) (40 -> 82) (41 -> 66) (42 -> 56) (43 -> 44) (44 -> 21) (45 -> 61) (46 -> 31) (47 -> 24) (48 -> 3) (49 -> 23) (50 -> 12) (51 -> 26) (52 -> 72) (53 -> 42) (54 -> 84) (55 -> 76) (56 -> 86) (57 -> 71) (58 -> 74) (59 -> 46) (60 -> 75) (61 -> 34) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 73) (67 -> 55) (68 -> 7) (69 -> 45) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 28) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 48) (79 -> 17) (80 -> 16) (81 -> 85) (82 -> 54) (83 -> 77) (84 -> 50) (85 -> 2) (86 -> 14) (87 -> 9) (88 -> 13) (89 -> 5) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 89, 5, 58, 74, 28, 67, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 85, 2, 79, 17, 36, 90, 53, 42, 56, 86, 14, 80, 16, 49, 23, 37, 30, 33, 10, 69, 45, 61, 34, 52, 72, 27, 25, 78, 48, 3, 87, 9, 11], [4, 29, 41, 66, 73, 20, 57, 71, 65, 47, 24, 38, 32, 8, 63, 18, 62, 51, 26, 39, 68, 7, 43, 44, 21, 19, 40, 82, 54, 84, 50, 12], [60, 75], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [60, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,75] + x[75,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 29) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 44) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 4) (13 -> 88) (14 -> 86) (15 -> 35) (16 -> 63) (17 -> 2) (18 -> 62) (19 -> 40) (20 -> 57) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 74) (29 -> 41) (30 -> 37) (31 -> 46) (32 -> 8) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 17) (37 -> 23) (38 -> 32) (39 -> 50) (40 -> 82) (41 -> 66) (42 -> 53) (43 -> 15) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 84) (49 -> 16) (50 -> 12) (51 -> 26) (52 -> 34) (53 -> 90) (54 -> 85) (55 -> 67) (56 -> 42) (57 -> 71) (58 -> 5) (59 -> 22) (60 -> 75) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 73) (67 -> 28) (68 -> 7) (69 -> 72) (70 -> 64) (71 -> 65) (72 -> 27) (73 -> 20) (74 -> 58) (75 -> 80) (76 -> 55) (77 -> 83) (78 -> 10) (79 -> 68) (80 -> 14) (81 -> 60) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 81) (86 -> 56) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 36) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 84, 52, 34, 61, 45, 69, 72, 27, 25, 78, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 50, 12, 4, 29, 41, 66, 73, 20, 57, 71, 65, 47, 24, 38, 32, 8, 44, 21, 19, 40, 82, 54, 85, 81, 60, 75, 80, 14, 86, 56, 42, 53, 90, 36, 17, 2, 79, 68, 7, 43, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 67, 28, 74, 58, 5, 89], [64, 70], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [64, 70]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[64,70] + x[70,64] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 12) (5 -> 89) (6 -> 88) (7 -> 43) (8 -> 32) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 22) (14 -> 80) (15 -> 81) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 59) (23 -> 49) (24 -> 47) (25 -> 27) (26 -> 39) (27 -> 72) (28 -> 74) (29 -> 4) (30 -> 37) (31 -> 35) (32 -> 38) (33 -> 30) (34 -> 61) (35 -> 15) (36 -> 90) (37 -> 23) (38 -> 24) (39 -> 68) (40 -> 82) (41 -> 29) (42 -> 56) (43 -> 44) (44 -> 21) (45 -> 70) (46 -> 31) (47 -> 65) (48 -> 78) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 34) (53 -> 42) (54 -> 85) (55 -> 76) (56 -> 86) (57 -> 20) (58 -> 5) (59 -> 46) (60 -> 8) (61 -> 45) (62 -> 51) (63 -> 18) (64 -> 55) (65 -> 71) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 10) (70 -> 64) (71 -> 57) (72 -> 69) (73 -> 66) (74 -> 58) (75 -> 60) (76 -> 6) (77 -> 83) (78 -> 25) (79 -> 17) (80 -> 75) (81 -> 67) (82 -> 54) (83 -> 77) (84 -> 52) (85 -> 2) (86 -> 14) (87 -> 3) (88 -> 13) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 78, 25, 27, 72, 69, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 68, 7, 43, 44, 21, 19, 40, 82, 54, 85, 2, 79, 17, 36, 90, 53, 42, 56, 86, 14, 80, 75, 60, 8, 32, 38, 24, 47, 65, 71, 57, 20, 73, 66, 41, 29, 4, 12, 50, 84, 52, 34, 61, 45, 70, 64, 55, 76, 6, 88, 13, 22, 59, 46, 31, 35, 15, 81, 67, 28, 74, 58, 5, 89], [77, 83]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [77, 83]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[77,83] + x[83,77] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 157.0
   Permutations :
(1 -> 11) (2 -> 79) (3 -> 48) (4 -> 12) (5 -> 89) (6 -> 76) (7 -> 43) (8 -> 44) (9 -> 87) (10 -> 33) (11 -> 9) (12 -> 50) (13 -> 88) (14 -> 80) (15 -> 35) (16 -> 63) (17 -> 36) (18 -> 62) (19 -> 40) (20 -> 73) (21 -> 19) (22 -> 13) (23 -> 49) (24 -> 38) (25 -> 78) (26 -> 39) (27 -> 25) (28 -> 71) (29 -> 4) (30 -> 37) (31 -> 46) (32 -> 8) (33 -> 30) (34 -> 61) (35 -> 31) (36 -> 90) (37 -> 23) (38 -> 32) (39 -> 68) (40 -> 82) (41 -> 29) (42 -> 56) (43 -> 15) (44 -> 21) (45 -> 69) (46 -> 59) (47 -> 24) (48 -> 77) (49 -> 16) (50 -> 84) (51 -> 26) (52 -> 34) (53 -> 42) (54 -> 85) (55 -> 64) (56 -> 86) (57 -> 20) (58 -> 5) (59 -> 22) (60 -> 81) (61 -> 74) (62 -> 51) (63 -> 18) (64 -> 70) (65 -> 47) (66 -> 41) (67 -> 28) (68 -> 7) (69 -> 75) (70 -> 45) (71 -> 65) (72 -> 27) (73 -> 66) (74 -> 58) (75 -> 60) (76 -> 55) (77 -> 83) (78 -> 10) (79 -> 17) (80 -> 57) (81 -> 67) (82 -> 54) (83 -> 72) (84 -> 52) (85 -> 2) (86 -> 14) (87 -> 3) (88 -> 6) (89 -> 1) (90 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 9, 87, 3, 48, 77, 83, 72, 27, 25, 78, 10, 33, 30, 37, 23, 49, 16, 63, 18, 62, 51, 26, 39, 68, 7, 43, 15, 35, 31, 46, 59, 22, 13, 88, 6, 76, 55, 64, 70, 45, 69, 75, 60, 81, 67, 28, 71, 65, 47, 24, 38, 32, 8, 44, 21, 19, 40, 82, 54, 85, 2, 79, 17, 36, 90, 53, 42, 56, 86, 14, 80, 57, 20, 73, 66, 41, 29, 4, 12, 50, 84, 52, 34, 61, 74, 58, 5, 89]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 157.0
> Nombre d'itération nécéssaires : 42
> Nombre de contraintes ajoutées : 41
> Ordre de parcours des drônes : 
1 -> 11 -> 9 -> 87 -> 3 -> 48 -> 77 -> 83 -> 72 -> 27 -> 25 -> 78 -> 10 -> 33 -> 30 -> 37 -> 23 -> 49 -> 16 -> 63 -> 18 -> 62 -> 51 -> 26 -> 39 -> 68 -> 7 -> 43 -> 15 -> 35 -> 31 -> 46 -> 59 -> 22 -> 13 -> 88 -> 6 -> 76 -> 55 -> 64 -> 70 -> 45 -> 69 -> 75 -> 60 -> 81 -> 67 -> 28 -> 71 -> 65 -> 47 -> 24 -> 38 -> 32 -> 8 -> 44 -> 21 -> 19 -> 40 -> 82 -> 54 -> 85 -> 2 -> 79 -> 17 -> 36 -> 90 -> 53 -> 42 -> 56 -> 86 -> 14 -> 80 -> 57 -> 20 -> 73 -> 66 -> 41 -> 29 -> 4 -> 12 -> 50 -> 84 -> 52 -> 34 -> 61 -> 74 -> 58 -> 5 -> 89 -> 1. 
