Résolution exacte pour relief/relief150.dat points à visiter :
Résolution d'initiale :  
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 112) (3 -> 17) (4 -> 7) (5 -> 101) (6 -> 51) (7 -> 147) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 90) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 34) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 68) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 57) (42 -> 29) (43 -> 105) (44 -> 26) (45 -> 22) (46 -> 129) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 25) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 135) (69 -> 124) (70 -> 102) (71 -> 131) (72 -> 136) (73 -> 44) (74 -> 18) (75 -> 3) (76 -> 61) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 70) (85 -> 86) (86 -> 20) (87 -> 72) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 9) (96 -> 122) (97 -> 19) (98 -> 140) (99 -> 88) (100 -> 98) (101 -> 92) (102 -> 126) (103 -> 118) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 56) (112 -> 73) (113 -> 35) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 27) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 133) (137 -> 127) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 37) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 35, 23, 128, 87, 72, 136, 133, 148, 36, 68, 135, 91, 76, 61, 54], [2, 112, 73, 44, 26, 145, 11, 90, 28, 21, 59, 52, 137, 127, 46, 129, 27, 97, 19, 93, 123, 103, 118, 149, 65, 85, 86, 20, 31, 108, 104, 142, 37, 66, 69, 124, 6, 51, 99, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 122, 15, 143, 109, 24], [4, 7, 147, 121, 84, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107], [5, 101, 92, 150, 43, 105, 74, 18, 71, 131, 45, 22, 138, 39, 42, 29], [9, 95], [10, 80, 110, 79, 50, 25, 34, 100, 98, 140, 125, 53, 89, 117, 55, 130, 120], [13, 114, 40, 94, 14], [16, 38, 111, 56], [41, 57, 132, 119]]
> Nombre de cycle(s) trouvé(s) : 9
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [9, 95]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,95] + x[95,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 112) (3 -> 17) (4 -> 7) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 101) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 68) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 134) (42 -> 29) (43 -> 105) (44 -> 26) (45 -> 22) (46 -> 129) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 25) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 37) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 124) (70 -> 102) (71 -> 51) (72 -> 136) (73 -> 34) (74 -> 18) (75 -> 3) (76 -> 135) (77 -> 78) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 72) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 5) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 88) (100 -> 98) (101 -> 92) (102 -> 126) (103 -> 118) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 56) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 14) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 133) (137 -> 65) (138 -> 39) (139 -> 52) (140 -> 125) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 58) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 52, 137, 65, 85, 86, 20, 31, 108, 104, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107, 4, 7, 44, 26, 145, 11, 127, 46, 129, 57, 132, 119, 41, 134, 146, 96, 9, 95, 35, 23, 128, 87, 72, 136, 133, 148, 36, 68, 147, 121, 84, 27, 97, 19, 93, 123, 103, 118, 149, 58, 81, 144, 113, 90, 28, 21, 59, 37, 66, 69, 124, 6, 61, 54], [2, 112, 73, 34, 100, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 25, 122, 15, 143, 109, 24], [3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 5, 131, 45, 22, 138, 39, 42, 29, 101, 92, 150, 43, 105, 74, 18, 71, 51, 99, 88, 12, 75], [16, 38, 111, 56], [76, 135, 91], [77, 78]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [77, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[77,78] + x[78,77] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 7) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 11) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 68) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 97) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 102) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 93) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 101) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 103) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137, 72, 18, 71, 51, 99, 129, 57, 132, 119, 41, 97, 19, 11, 127, 46, 124, 6, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 15, 143, 109, 24], [4, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 93, 123, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 86, 20, 31, 108, 104, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107], [5, 131, 45, 22, 138, 39, 42, 29], [10, 80, 110, 79, 50, 136, 26, 145, 103, 98, 140, 125, 53, 89, 117, 55, 130, 120], [13, 114, 40, 94, 14], [27, 68, 147, 121, 84], [76, 135, 91]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [76, 135, 91]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[76,135] + x[135,91] + x[91,76] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 7) (5 -> 101) (6 -> 51) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 68) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 57) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 104) (71 -> 131) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 70) (85 -> 86) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 98) (101 -> 92) (102 -> 126) (103 -> 118) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 91) (109 -> 24) (110 -> 79) (111 -> 102) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 27) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 61) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 37) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137, 72, 18, 71, 131, 45, 22, 138, 39, 42, 29, 5, 101, 92, 150, 43, 105, 74, 133, 148, 36, 68, 147, 121, 84, 70, 104, 142, 37, 66, 69, 56, 16, 38, 111, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107, 4, 7, 44, 112, 73, 34, 100, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 51, 99, 129, 27, 97, 19, 93, 123, 103, 118, 149, 65, 85, 86, 20, 31, 108, 91, 76, 135, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 15, 143, 109, 24], [13, 114, 40, 94, 14], [41, 57, 132, 119]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [41, 57, 132, 119]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[41,57] + x[57,132] + x[132,119] + x[119,41] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 7) (5 -> 101) (6 -> 51) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 68) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 121) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 97) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 129) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 135) (69 -> 124) (70 -> 102) (71 -> 131) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 61) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 147) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 60) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 56) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 86) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137, 72, 18, 71, 131, 45, 22, 138, 39, 42, 29, 5, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 147, 86, 20, 31, 108, 104, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 121, 84, 27, 68, 135, 91, 76, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 15, 143, 109, 24], [4, 7, 44, 112, 73, 34, 100, 37, 66, 69, 124, 6, 51, 99, 60, 33, 63, 107], [10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 129, 57, 132, 119, 41, 97, 19, 93, 123, 103, 98, 140, 125, 53, 89, 117, 55, 130, 120], [13, 114, 40, 94, 14], [16, 38, 111, 56]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [16, 38, 111, 56]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[16,38] + x[38,111] + x[111,56] + x[56,16] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 7) (5 -> 101) (6 -> 51) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 68) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 97) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 104) (71 -> 131) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 91) (109 -> 24) (110 -> 79) (111 -> 102) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 61) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137, 72, 18, 71, 131, 45, 22, 138, 39, 42, 29, 5, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 86, 20, 31, 108, 91, 76, 135, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 15, 143, 109, 24], [4, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107], [6, 51, 99, 129, 57, 132, 119, 41, 97, 19, 93, 123, 103, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124], [13, 114, 40, 94, 14], [27, 68, 147, 121, 84], [70, 104, 142]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [70, 104, 142]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[70,104] + x[104,142] + x[142,70] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 7) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 71) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 68) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 57) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 28) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 104) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 134) (78 -> 77) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 70) (85 -> 86) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 118) (91 -> 76) (92 -> 150) (93 -> 123) (94 -> 14) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 98) (101 -> 92) (102 -> 126) (103 -> 119) (104 -> 142) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 91) (109 -> 24) (110 -> 79) (111 -> 102) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 78) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 15) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 27) (130 -> 120) (131 -> 45) (132 -> 141) (133 -> 148) (134 -> 146) (135 -> 101) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 64) (142 -> 37) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 118, 149, 65, 85, 86, 20, 31, 108, 91, 76, 135, 101, 92, 150, 43, 105, 74, 133, 148, 36, 68, 147, 121, 84, 70, 104, 142, 37, 66, 69, 56, 16, 38, 111, 102, 126, 47, 83, 8, 67, 62, 28, 21, 59, 52, 137, 72, 18, 71, 51, 99, 129, 27, 97, 19, 93, 123, 103, 119, 41, 57, 132, 141, 64, 49, 32, 60, 33, 63, 107, 4, 7, 44, 112, 73, 34, 100, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 78, 77, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 15, 143, 109, 24], [5, 131, 45, 22, 138, 39, 42, 29], [13, 114, 40, 94, 14]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [13, 114, 40, 94, 14]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[13,114] + x[114,40] + x[40,94] + x[94,14] + x[14,13] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 15) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 101) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 25) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 5) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 68) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 134) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 119) (61 -> 54) (62 -> 28) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 102) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 78) (78 -> 71) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 72) (88 -> 12) (89 -> 117) (90 -> 118) (91 -> 77) (92 -> 150) (93 -> 123) (94 -> 33) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 76) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 64) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 14) (116 -> 139) (117 -> 55) (118 -> 149) (119 -> 41) (120 -> 10) (121 -> 84) (122 -> 142) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 141) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 2) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 7) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 139, 58, 81, 144, 113, 90, 118, 149, 65, 85, 86, 20, 31, 108, 104, 76, 135, 91, 77, 78, 71, 51, 99, 129, 57, 132, 141, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 64, 49, 32, 60, 119, 41, 134, 146, 96, 9, 95, 35, 23, 128, 87, 72, 18, 101, 92, 150, 43, 105, 74, 133, 148, 36, 68, 147, 121, 84, 27, 97, 19, 93, 123, 103, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 33, 63, 107, 4, 15, 143, 109, 24, 25, 122, 142, 70, 102, 126, 47, 83, 8, 67, 62, 28, 21, 59, 52, 137], [5, 131, 45, 22, 138, 39, 42, 29]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [5, 131, 45, 22, 138, 39, 42, 29]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[5,131] + x[131,45] + x[45,22] + x[22,138] + x[138,39] + x[39,42] + x[42,29] + x[29,5] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 15) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 101) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 25) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 139) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 134) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 102) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 78) (78 -> 71) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 72) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 77) (92 -> 150) (93 -> 123) (94 -> 5) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 76) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 125) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 14) (116 -> 41) (117 -> 55) (118 -> 149) (119 -> 68) (120 -> 10) (121 -> 84) (122 -> 142) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 2) (138 -> 39) (139 -> 58) (140 -> 7) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 41, 134, 146, 96, 9, 95, 35, 23, 128, 87, 72, 18, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 86, 20, 31, 108, 104, 76, 135, 91, 77, 78, 71, 51, 99, 129, 57, 132, 119, 68, 147, 121, 84, 27, 97, 19, 93, 123, 103, 98, 140, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 5, 131, 45, 22, 138, 39, 42, 29, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137], [4, 15, 143, 109, 24, 25, 122, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [4, 15, 143, 109, 24, 25, 122, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107]
> Taille du cycle à casser : 24
> Nouvelle contrainte : x[4,15] + x[15,143] + x[143,109] + x[109,24] + x[24,25] + x[25,122] + x[122,142] + x[142,70] + x[70,102] + x[102,126] + x[126,47] + x[47,83] + x[83,8] + x[8,67] + x[67,62] + x[62,141] + x[141,64] + x[64,49] + x[49,32] + x[32,60] + x[60,33] + x[33,63] + x[63,107] + x[107,4] ≤ 23
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 15) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 101) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 25) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 139) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 134) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 102) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 78) (78 -> 71) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 72) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 77) (92 -> 150) (93 -> 123) (94 -> 5) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 76) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 64) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 14) (116 -> 41) (117 -> 55) (118 -> 149) (119 -> 68) (120 -> 10) (121 -> 84) (122 -> 142) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 2) (138 -> 39) (139 -> 58) (140 -> 125) (141 -> 7) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 41, 134, 146, 96, 9, 95, 35, 23, 128, 87, 72, 18, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 86, 20, 31, 108, 104, 76, 135, 91, 77, 78, 71, 51, 99, 129, 57, 132, 119, 68, 147, 121, 84, 27, 97, 19, 93, 123, 103, 98, 140, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 61, 54], [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 5, 131, 45, 22, 138, 39, 42, 29, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137], [4, 15, 143, 109, 24, 25, 122, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 64, 49, 32, 60, 33, 63, 107]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 5, 131, 45, 22, 138, 39, 42, 29, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137]
> Taille du cycle à casser : 34
> Nouvelle contrainte : x[2,88] + x[88,12] + x[12,75] + x[75,3] + x[3,17] + x[17,106] + x[106,82] + x[82,48] + x[48,115] + x[115,14] + x[14,13] + x[13,114] + x[114,40] + x[40,94] + x[94,5] + x[5,131] + x[131,45] + x[45,22] + x[22,138] + x[138,39] + x[39,42] + x[42,29] + x[29,139] + x[139,58] + x[58,81] + x[81,144] + x[144,113] + x[113,90] + x[90,28] + x[28,21] + x[21,59] + x[59,52] + x[52,137] + x[137,2] ≤ 33
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 30) (2 -> 88) (3 -> 17) (4 -> 15) (5 -> 131) (6 -> 61) (7 -> 44) (8 -> 67) (9 -> 95) (10 -> 80) (11 -> 127) (12 -> 75) (13 -> 114) (14 -> 13) (15 -> 143) (16 -> 38) (17 -> 106) (18 -> 101) (19 -> 93) (20 -> 31) (21 -> 59) (22 -> 138) (23 -> 128) (24 -> 2) (25 -> 122) (26 -> 145) (27 -> 97) (28 -> 21) (29 -> 139) (30 -> 116) (31 -> 108) (32 -> 60) (33 -> 63) (34 -> 100) (35 -> 23) (36 -> 118) (37 -> 66) (38 -> 111) (39 -> 42) (40 -> 94) (41 -> 134) (42 -> 29) (43 -> 105) (44 -> 112) (45 -> 22) (46 -> 124) (47 -> 83) (48 -> 115) (49 -> 32) (50 -> 136) (51 -> 99) (52 -> 137) (53 -> 89) (54 -> 1) (55 -> 130) (56 -> 16) (57 -> 132) (58 -> 81) (59 -> 52) (60 -> 33) (61 -> 54) (62 -> 141) (63 -> 107) (64 -> 49) (65 -> 85) (66 -> 69) (67 -> 62) (68 -> 147) (69 -> 56) (70 -> 102) (71 -> 51) (72 -> 18) (73 -> 34) (74 -> 133) (75 -> 3) (76 -> 135) (77 -> 78) (78 -> 71) (79 -> 50) (80 -> 110) (81 -> 144) (82 -> 48) (83 -> 8) (84 -> 27) (85 -> 86) (86 -> 20) (87 -> 25) (88 -> 12) (89 -> 117) (90 -> 28) (91 -> 77) (92 -> 150) (93 -> 123) (94 -> 5) (95 -> 35) (96 -> 9) (97 -> 19) (98 -> 140) (99 -> 129) (100 -> 37) (101 -> 92) (102 -> 126) (103 -> 98) (104 -> 76) (105 -> 74) (106 -> 82) (107 -> 4) (108 -> 104) (109 -> 24) (110 -> 79) (111 -> 125) (112 -> 73) (113 -> 90) (114 -> 40) (115 -> 14) (116 -> 41) (117 -> 55) (118 -> 149) (119 -> 68) (120 -> 10) (121 -> 84) (122 -> 142) (123 -> 103) (124 -> 6) (125 -> 53) (126 -> 47) (127 -> 46) (128 -> 87) (129 -> 57) (130 -> 120) (131 -> 45) (132 -> 119) (133 -> 148) (134 -> 146) (135 -> 91) (136 -> 26) (137 -> 72) (138 -> 39) (139 -> 58) (140 -> 7) (141 -> 64) (142 -> 70) (143 -> 109) (144 -> 113) (145 -> 11) (146 -> 96) (147 -> 121) (148 -> 36) (149 -> 65) (150 -> 43) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 116, 41, 134, 146, 96, 9, 95, 35, 23, 128, 87, 25, 122, 142, 70, 102, 126, 47, 83, 8, 67, 62, 141, 64, 49, 32, 60, 33, 63, 107, 4, 15, 143, 109, 24, 2, 88, 12, 75, 3, 17, 106, 82, 48, 115, 14, 13, 114, 40, 94, 5, 131, 45, 22, 138, 39, 42, 29, 139, 58, 81, 144, 113, 90, 28, 21, 59, 52, 137, 72, 18, 101, 92, 150, 43, 105, 74, 133, 148, 36, 118, 149, 65, 85, 86, 20, 31, 108, 104, 76, 135, 91, 77, 78, 71, 51, 99, 129, 57, 132, 119, 68, 147, 121, 84, 27, 97, 19, 93, 123, 103, 98, 140, 7, 44, 112, 73, 34, 100, 37, 66, 69, 56, 16, 38, 111, 125, 53, 89, 117, 55, 130, 120, 10, 80, 110, 79, 50, 136, 26, 145, 11, 127, 46, 124, 6, 61, 54]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 100.0
> Nombre d'itération nécéssaires : 11
> Nombre de contraintes ajoutées : 10
> Ordre de parcours des drônes : 
1 -> 30 -> 116 -> 41 -> 134 -> 146 -> 96 -> 9 -> 95 -> 35 -> 23 -> 128 -> 87 -> 25 -> 122 -> 142 -> 70 -> 102 -> 126 -> 47 -> 83 -> 8 -> 67 -> 62 -> 141 -> 64 -> 49 -> 32 -> 60 -> 33 -> 63 -> 107 -> 4 -> 15 -> 143 -> 109 -> 24 -> 2 -> 88 -> 12 -> 75 -> 3 -> 17 -> 106 -> 82 -> 48 -> 115 -> 14 -> 13 -> 114 -> 40 -> 94 -> 5 -> 131 -> 45 -> 22 -> 138 -> 39 -> 42 -> 29 -> 139 -> 58 -> 81 -> 144 -> 113 -> 90 -> 28 -> 21 -> 59 -> 52 -> 137 -> 72 -> 18 -> 101 -> 92 -> 150 -> 43 -> 105 -> 74 -> 133 -> 148 -> 36 -> 118 -> 149 -> 65 -> 85 -> 86 -> 20 -> 31 -> 108 -> 104 -> 76 -> 135 -> 91 -> 77 -> 78 -> 71 -> 51 -> 99 -> 129 -> 57 -> 132 -> 119 -> 68 -> 147 -> 121 -> 84 -> 27 -> 97 -> 19 -> 93 -> 123 -> 103 -> 98 -> 140 -> 7 -> 44 -> 112 -> 73 -> 34 -> 100 -> 37 -> 66 -> 69 -> 56 -> 16 -> 38 -> 111 -> 125 -> 53 -> 89 -> 117 -> 55 -> 130 -> 120 -> 10 -> 80 -> 110 -> 79 -> 50 -> 136 -> 26 -> 145 -> 11 -> 127 -> 46 -> 124 -> 6 -> 61 -> 54 -> 1. 
