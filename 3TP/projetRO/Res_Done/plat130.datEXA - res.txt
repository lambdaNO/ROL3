Résolution exacte pour plat/plat130.dat points à visiter :
Résolution d'initiale :  
> temps total = 78.0
   Permutations :
(1 -> 30) (2 -> 24) (3 -> 71) (4 -> 95) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 86) (25 -> 96) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 100) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 27) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30], [2, 24, 86, 28, 119, 27, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 100, 60, 37, 25, 96, 26], [3, 71], [5, 31], [6, 38], [7, 23], [8, 103], [9, 105], [10, 49], [11, 54], [12, 50], [13, 36], [14, 65], [15, 126], [16, 110], [18, 116], [19, 35], [20, 33], [21, 64], [29, 109], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 81], [48, 89], [52, 104], [55, 128], [56, 88], [57, 114], [58, 124], [61, 125], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [84, 118], [85, 94], [87, 115], [90, 117], [99, 130], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 53
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 30]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,30] + x[30,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 78.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 31) (6 -> 53) (7 -> 18) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 33) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 119, 28, 86, 24, 2, 118, 84, 54, 11], [3, 71], [4, 95], [5, 31], [6, 53], [7, 18], [8, 103], [9, 105], [10, 49], [12, 50], [13, 36], [14, 65], [15, 126], [16, 110], [17, 62], [19, 35], [20, 29, 109, 47, 81, 23, 33], [21, 64], [22, 39], [25, 37], [26, 96], [27, 92], [32, 107], [34, 59], [38, 116], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [57, 114], [58, 124], [60, 100], [61, 125], [63, 106], [66, 76], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [90, 117], [99, 130], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 58

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [3, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,71] + x[71,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 119) (29 -> 24) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 61) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 95) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 122, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 6, 38, 116, 18, 7, 23, 81, 47, 109, 29, 24, 2, 118, 84, 54, 11], [3, 71, 86, 28, 119, 30, 82, 111], [5, 31], [8, 103], [9, 105], [10, 49], [12, 50], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [20, 33], [21, 64], [25, 37], [26, 96], [27, 92], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [48, 89], [52, 104], [55, 128], [56, 88], [57, 114], [58, 124], [60, 100], [66, 76], [68, 93], [69, 79], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 117], [99, 130], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 44

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [5, 31]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,31] + x[31,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 82) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 122) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 86, 28, 119, 30], [3, 71, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95, 122, 112, 67, 72, 82, 111], [4, 63], [6, 38], [7, 23], [8, 103], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [17, 39], [18, 116], [19, 35], [20, 33], [21, 64], [22, 53], [25, 37], [26, 96], [27, 92], [29, 109], [32, 62], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 81], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [106, 107], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 52

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [4, 63]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,63] + x[63,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 11) (2 -> 118) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 53) (7 -> 18) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 29) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 71) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11], [2, 118], [3, 111, 82, 30, 119, 28, 86, 24, 29, 109, 47, 81, 23, 7, 18, 116, 38, 6, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 71], [8, 103], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [20, 33], [21, 64], [25, 37], [26, 96], [27, 92], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [54, 84], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 46

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [1, 11]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,11] + x[11,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 119) (28 -> 86) (29 -> 109) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 27, 119, 28, 86, 24, 2, 118, 84, 54, 11], [6, 38], [7, 23], [8, 103], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [18, 116], [19, 35], [20, 33], [21, 64], [25, 37], [26, 96], [29, 109], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 81], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 46

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [6, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,38] + x[38,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 84) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 96) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 6, 38, 116, 18, 7, 23, 81, 47, 109, 29, 20, 33, 96, 26, 84, 54, 11], [2, 118], [8, 103], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [21, 64], [24, 86], [25, 37], [27, 92], [28, 119], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 44

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [2, 118]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,118] + x[118,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 79.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 96) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 6, 38, 116, 18, 7, 23, 81, 47, 109, 29, 20, 33, 96, 26, 2, 118, 84, 54, 11], [8, 103], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [21, 64], [24, 86], [25, 37], [27, 92], [28, 119], [34, 59], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 43

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [8, 103]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,103] + x[103,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 80.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 8) (4 -> 95) (5 -> 130) (6 -> 53) (7 -> 18) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 29) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 46) (73 -> 1) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 26) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 41) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 71) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 29, 109, 47, 81, 23, 7, 18, 116, 38, 6, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 71, 3, 8, 103, 41, 97, 122, 112, 67, 72, 46, 80, 125, 61, 91, 73], [9, 105], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [20, 33], [21, 64], [25, 37], [26, 96], [27, 92], [28, 86], [30, 119], [34, 59], [40, 123], [42, 51], [43, 127], [44, 129], [45, 74], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [66, 76], [68, 93], [69, 79], [70, 121], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 39

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [9, 105]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,105] + x[105,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 82.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 33) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 103) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 17) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 24, 2, 118, 84, 54, 11], [4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 92, 66, 76, 53, 6, 38, 116, 18, 7, 23, 33, 20, 29, 109, 47, 81, 17, 62, 32, 107, 106, 63], [8, 93, 68, 103], [10, 49], [13, 36], [14, 65], [15, 126], [16, 110], [19, 35], [21, 64], [22, 39], [25, 37], [26, 96], [28, 119], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [67, 72], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 40

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [10, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,49] + x[49,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 82.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 43) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 49) (34 -> 117) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 68) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 24, 2, 118, 84, 54, 11], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 6, 38, 116, 18, 7, 23, 81, 47, 109, 29, 20, 33, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95], [8, 103, 68, 93], [13, 36], [14, 65], [15, 126], [16, 110], [21, 64], [25, 37], [26, 96], [28, 119], [40, 123], [41, 97], [42, 51], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 37

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [13, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,36] + x[36,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 83.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 53) (7 -> 18) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 81) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 33) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 87) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 82) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 41) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 68) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 86, 28, 119, 30], [3, 71, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 81, 23, 7, 18, 116, 38, 6, 53, 87, 115, 68, 93, 8, 103, 41, 97, 122, 112, 67, 72, 82, 111], [14, 65], [15, 126], [16, 110], [20, 29], [21, 64], [22, 39], [25, 37], [26, 96], [40, 123], [42, 51], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [14, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,65] + x[65,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 85.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 3) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 81) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 111) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 103) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 33) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 10) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 72) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 119, 28, 86, 24, 2, 118, 84, 54, 11], [3, 71, 117, 34, 59, 105, 9, 27, 92, 66, 76, 53, 6, 14, 65, 10, 49, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 81, 23, 111, 82, 72, 67, 112, 122, 97, 41, 103, 8], [7, 18], [15, 126], [16, 110], [19, 35], [20, 29], [21, 64], [22, 39], [25, 37], [26, 96], [38, 116], [40, 123], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 38

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [7, 18]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,18] + x[18,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 85.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 3) (9 -> 27) (10 -> 65) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 81) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 111) (24 -> 86) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 5) (32 -> 62) (33 -> 49) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 116) (39 -> 17) (40 -> 123) (41 -> 103) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 72) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 106) (108 -> 113) (109 -> 63) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 86, 28, 119, 30], [3, 71, 117, 34, 59, 105, 9, 27, 92, 66, 76, 53, 22, 39, 17, 81, 47, 109, 63, 4, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 33, 49, 10, 65, 14, 6, 38, 116, 18, 7, 23, 111, 82, 72, 67, 112, 122, 97, 41, 103, 8], [15, 126], [16, 110], [19, 35], [20, 29], [21, 64], [25, 37], [26, 96], [32, 62], [40, 123], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [68, 93], [69, 79], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [106, 107], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 36

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [15, 126]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,126] + x[126,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 86.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 69) (16 -> 110) (17 -> 81) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 96) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 33) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 10) (66 -> 92) (67 -> 72) (68 -> 103) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 53) (80 -> 46) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 126) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 86, 71, 3, 111, 82, 30], [4, 63, 106, 107, 32, 62, 17, 81, 23, 7, 18, 116, 38, 6, 14, 65, 10, 49, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95], [8, 93, 68, 103], [9, 105, 59, 34, 117, 126, 15, 69, 79, 53, 76, 66, 92, 27], [16, 110], [19, 35], [20, 29], [21, 64], [22, 39], [25, 37], [26, 96], [28, 119], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 39

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [16, 110]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,110] + x[110,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 87.0
   Permutations :
(1 -> 73) (2 -> 24) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 3) (9 -> 27) (10 -> 65) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 49) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 103) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 74) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 79) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 122, 97, 41, 103, 8, 3, 71, 117, 34, 59, 105, 9, 27, 92, 66, 76, 53, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 49, 10, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 26, 2, 24, 86, 28, 119, 30], [4, 95], [11, 54], [12, 50], [17, 62], [19, 35], [20, 29], [21, 64], [22, 39], [25, 37], [32, 107], [40, 123], [42, 51], [43, 127], [45, 74], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [57, 114], [58, 124], [60, 100], [63, 106], [68, 93], [70, 121], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [84, 118], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 36

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [4, 95]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,95] + x[95,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 87.0
   Permutations :
(1 -> 4) (2 -> 24) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 93) (9 -> 27) (10 -> 65) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 49) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 79) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 103) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 117) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 33, 49, 10, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 26, 2, 24, 86, 71, 3, 111, 82, 30], [8, 93, 68, 103], [9, 27, 92, 66, 76, 53, 79, 69, 15, 126, 117, 34, 59, 105], [11, 54], [17, 62], [19, 35], [20, 29], [21, 64], [22, 39], [25, 37], [28, 119], [32, 107], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [63, 106], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [84, 118], [85, 94], [87, 115], [90, 99], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 41

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [11, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,54] + x[54,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 87.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 3) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 81) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 2) (25 -> 37) (26 -> 103) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 33) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 79) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 10) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 23) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 117) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 23, 7, 18, 116, 38, 6, 14, 65, 10, 49, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 81, 16, 110, 96, 26, 103, 8, 3, 71, 86, 24, 2, 118, 84, 54, 11], [9, 27, 92, 66, 76, 53, 79, 69, 15, 126, 117, 34, 59, 105], [19, 35], [20, 29], [21, 64], [22, 39], [25, 37], [28, 119], [40, 123], [41, 97], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [67, 72], [68, 93], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 36

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [19, 35]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,35] + x[35,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 88.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 8) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 103) (9 -> 105) (10 -> 35) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 69) (16 -> 81) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 9) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 49) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 10) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 53) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 110) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 126) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 119, 28, 86, 71, 3, 8, 103, 26, 96, 110, 16, 81, 23, 7, 18, 116, 38, 6, 14, 65, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 126, 15, 69, 79, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 33, 49, 24, 2, 118, 84, 54, 11], [20, 29], [21, 64], [25, 37], [40, 123], [41, 97], [42, 51], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [68, 93], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 33

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [20, 29]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,29] + x[29,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 88.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 29) (25 -> 37) (26 -> 96) (27 -> 92) (28 -> 86) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 79) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 119) (66 -> 76) (67 -> 72) (68 -> 103) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 117) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 96, 110, 16, 81, 23, 7, 18, 116, 38, 6, 14, 65, 119, 28, 86, 71, 3, 111, 82, 30], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 79, 69, 15, 126, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95], [8, 93, 68, 103], [21, 64], [25, 37], [40, 123], [41, 97], [42, 51], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 32

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [21, 64]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,64] + x[64,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 91.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 21) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 126) (16 -> 108) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 29) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 8) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 96) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 117) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 28, 119, 65, 14, 6, 38, 116, 18, 7, 21, 64, 79, 69, 15, 126, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95], [16, 108, 113, 96, 110], [23, 81], [25, 37], [40, 123], [41, 97], [42, 51], [44, 129], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [55, 128], [58, 124], [60, 100], [61, 125], [67, 72], [68, 93], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 30

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [23, 81]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,81] + x[81,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 91.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 3) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 65) (22 -> 53) (23 -> 81) (24 -> 29) (25 -> 37) (26 -> 2) (27 -> 9) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 103) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 19) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 26) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 126) (118 -> 84) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 122, 97, 41, 103, 8, 3, 71, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 27, 9, 105, 59, 34, 117, 126, 15, 69, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 26, 2, 118, 84, 54, 11], [25, 37], [28, 86], [30, 119], [40, 123], [42, 51], [43, 127], [44, 129], [45, 74], [47, 109], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [60, 100], [68, 93], [70, 121], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [25, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,37] + x[37,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 92.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 8) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 103) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 29) (25 -> 96) (26 -> 2) (27 -> 9) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 21) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 41) (98 -> 75) (99 -> 19) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 43) (128 -> 100) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 119, 28, 86, 71, 3, 8, 103, 26, 2, 118, 84, 54, 11], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 27, 9, 105, 59, 34, 117, 90, 99, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95], [6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 100, 60, 37, 25, 96, 110, 16, 81, 23, 7, 18, 116, 38], [40, 123], [41, 97], [42, 51], [43, 127], [45, 74], [46, 80], [47, 109], [48, 89], [52, 104], [56, 88], [58, 124], [61, 125], [67, 72], [68, 93], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [108, 113], [112, 122]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [40, 123]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[40,123] + x[123,40] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 92.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 71) (4 -> 63) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 3) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 118) (20 -> 29) (21 -> 65) (22 -> 53) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 26) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 126) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 26, 103, 8, 3, 71, 86, 28, 119, 30], [2, 24, 49, 10, 35, 19, 118], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 27, 9, 105, 59, 34, 117, 126, 15, 69, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 122, 97, 41, 123, 40], [42, 51], [43, 127], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [61, 125], [67, 72], [68, 93], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [82, 111], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [42, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[42,51] + x[51,42] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 95.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 40) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 35) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 49) (25 -> 96) (26 -> 103) (27 -> 125) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 57) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 71) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 37) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 82) (73 -> 1) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 47) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 100) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 23) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 117) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 69, 15, 126, 117, 34, 59, 105, 9, 27, 125, 61, 91, 73], [4, 40, 123, 41, 97, 122, 112, 67, 72, 82, 30, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63], [5, 31, 57, 114, 12, 50, 95, 100, 60, 37, 25, 96, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130], [44, 129], [45, 74], [46, 80], [48, 89], [52, 104], [55, 128], [56, 88], [58, 124], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [44, 129]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,129] + x[129,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 86) (25 -> 96) (26 -> 103) (27 -> 125) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 10) (36 -> 33) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 52) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 37) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 21) (66 -> 92) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 53) (72 -> 67) (73 -> 1) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 110) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 13) (105 -> 9) (106 -> 63) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 43) (128 -> 100) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 52, 104, 13, 36, 33, 20, 29, 109, 47, 112, 122, 97, 41, 123, 40, 4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 125, 61, 91, 73], [3, 71, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 30, 82, 111], [6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 100, 60, 37, 25, 96, 110, 16, 81, 23, 7, 18, 116, 38], [17, 62], [22, 39], [32, 107], [45, 74], [46, 80], [48, 89], [56, 88], [58, 124], [63, 106], [67, 72], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [17, 62]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,62] + x[62,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 33) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 49) (25 -> 96) (26 -> 2) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 104) (40 -> 123) (41 -> 97) (42 -> 68) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 51) (53 -> 22) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 86) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 66) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 100) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 24, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 66, 76, 53, 22, 40, 123, 41, 97, 122, 112, 67, 72, 46, 80, 125, 61, 91, 73, 38, 6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 100, 60, 37, 25, 96, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 104, 52, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [7, 23], [18, 116], [28, 119], [45, 74], [48, 89], [56, 88], [58, 124], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [7, 23]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,23] + x[23,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 40) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 29) (25 -> 96) (26 -> 2) (27 -> 125) (28 -> 86) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 68) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 37) (61 -> 59) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 119) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 51) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 63) (110 -> 16) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 21) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 43) (128 -> 100) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [4, 40, 123, 41, 97, 122, 112, 47, 109, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95], [6, 14, 65, 119, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 100, 60, 37, 25, 96, 110, 16, 81, 23, 7, 18, 116, 38], [9, 27, 125, 61, 59, 105], [28, 86], [34, 117], [45, 74], [46, 80], [48, 89], [52, 104], [56, 88], [58, 124], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [28, 86]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,86] + x[86,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 40) (5 -> 31) (6 -> 53) (7 -> 23) (8 -> 103) (9 -> 105) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 104) (14 -> 6) (15 -> 69) (16 -> 60) (17 -> 62) (18 -> 7) (19 -> 43) (20 -> 33) (21 -> 65) (22 -> 39) (23 -> 81) (24 -> 49) (25 -> 96) (26 -> 2) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 44) (32 -> 107) (33 -> 36) (34 -> 117) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 17) (40 -> 123) (41 -> 97) (42 -> 68) (43 -> 127) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 51) (53 -> 22) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 125) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 8) (94 -> 85) (95 -> 100) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 130) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 24, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14, 6, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 40, 123, 41, 97, 122, 112, 67, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 7, 23, 81, 47, 109, 29, 20, 33, 36, 13, 104, 52, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [12, 50], [16, 60, 37, 25, 96, 110], [28, 119], [45, 74], [48, 89], [55, 128], [56, 88], [57, 114], [58, 124], [66, 76], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [95, 100], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [12, 50]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,50] + x[50,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 104) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 65) (22 -> 53) (23 -> 81) (24 -> 29) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 4) (41 -> 123) (42 -> 68) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 51) (53 -> 22) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 109) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 61) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 128) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 63) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 63, 109, 47, 112, 122, 97, 41, 123, 40, 4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 24, 29, 20, 33, 36, 13, 104, 52, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [3, 71, 86, 28, 119, 30, 82, 111], [6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 128, 55, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14], [17, 39], [22, 53], [32, 62], [45, 74], [46, 80], [48, 89], [56, 88], [58, 124], [66, 76], [67, 72], [70, 121], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [106, 107], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [17, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,39] + x[39,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 65) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 10) (36 -> 66) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 33) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 59) (62 -> 32) (63 -> 125) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 128) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 82, 30], [4, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63, 125, 61, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 33, 20, 29, 109, 47, 112, 122, 97, 41, 123, 40], [6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 128, 55, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14], [24, 86], [28, 119], [34, 117], [45, 74], [46, 80], [48, 89], [52, 104], [56, 88], [58, 124], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [24, 86]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,86] + x[86,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 104) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 47) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 68) (43 -> 19) (44 -> 129) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 51) (53 -> 79) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 112) (70 -> 121) (71 -> 53) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 41) (98 -> 75) (99 -> 90) (100 -> 128) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 96) (111 -> 3) (112 -> 122) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 53, 79, 64, 21, 47, 109, 29, 20, 33, 36, 13, 104, 52, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [4, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 128, 55, 44, 129, 126, 15, 69, 112, 122, 97, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63], [45, 74], [46, 80], [48, 89], [56, 88], [58, 124], [61, 125], [66, 76], [67, 72], [70, 121], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [45, 74]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[45,74] + x[74,45] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 40) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 104) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 33) (21 -> 65) (22 -> 39) (23 -> 81) (24 -> 2) (25 -> 37) (26 -> 84) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 51) (53 -> 22) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 61) (92 -> 66) (93 -> 8) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 96) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 19) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 58) (125 -> 80) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 47, 109, 29, 20, 33, 36, 13, 104, 52, 51, 42, 68, 93, 8, 103, 26, 84, 54, 11], [2, 118, 19, 35, 10, 49, 24], [3, 71, 86, 28, 119, 30, 82, 111], [4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63], [43, 127], [48, 89], [56, 88], [58, 124], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [43, 127]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[43,127] + x[127,43] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 51) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 6) (22 -> 53) (23 -> 111) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 10) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 68) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 81) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 79) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 117) (72 -> 67) (73 -> 91) (74 -> 70) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 69) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 79, 64, 21, 6, 38, 116, 18, 7, 23, 111, 3, 71, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 31], [30, 82], [48, 89], [52, 104], [56, 88], [58, 124], [66, 76], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [30, 82]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,82] + x[82,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 40) (5 -> 31) (6 -> 53) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 99) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 33) (21 -> 7) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 96) (26 -> 2) (27 -> 92) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 73) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 22) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 37) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 51) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 125) (81 -> 47) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 61) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 100) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 58) (125 -> 80) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 69, 79, 64, 21, 7, 23, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 114, 12, 50, 95, 100, 60, 37, 25, 96, 110, 16, 99, 90, 117, 34, 59, 105, 9, 27, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14, 6, 53, 22, 39, 17, 62, 32, 107, 106, 63], [18, 116], [38, 73], [46, 72], [48, 89], [52, 104], [56, 88], [58, 124], [61, 91], [66, 76], [67, 112], [75, 98], [77, 120], [78, 102], [80, 125], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [18, 116]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,116] + x[116,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 130) (6 -> 21) (7 -> 23) (8 -> 93) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 53) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 10) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 61) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 92) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 46) (73 -> 38) (74 -> 70) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 2) (119 -> 65) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 27) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 82, 30], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14, 6, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40], [5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 46, 80, 125, 27, 9, 105, 59, 61, 91, 73, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 31], [34, 117], [48, 89], [52, 104], [56, 88], [58, 124], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [34, 117]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,117] + x[117,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 130) (6 -> 14) (7 -> 21) (8 -> 103) (9 -> 105) (10 -> 35) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 53) (23 -> 111) (24 -> 49) (25 -> 37) (26 -> 2) (27 -> 9) (28 -> 86) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 68) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 104) (53 -> 6) (54 -> 11) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 119) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 15) (70 -> 121) (71 -> 51) (72 -> 46) (73 -> 38) (74 -> 70) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 72) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 8) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 16) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 7, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 6, 14, 65, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 23, 111, 3, 71, 51, 42, 68, 93, 8, 103, 26, 2, 118, 84, 54, 11], [48, 89], [52, 104], [56, 88], [58, 124], [66, 76], [67, 112], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [48, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[48,89] + x[89,48] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 97.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 93) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 43) (20 -> 29) (21 -> 65) (22 -> 53) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 111) (38 -> 116) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 52) (52 -> 104) (53 -> 79) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 86) (72 -> 82) (73 -> 91) (74 -> 70) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 69) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 130) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 13) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 52, 104, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 82, 30], [3, 71, 86, 24, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 57, 48, 89, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 111], [12, 114], [28, 119], [46, 80], [50, 95], [56, 88], [58, 124], [60, 100], [61, 125], [66, 76], [73, 91], [75, 98], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [12, 114]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,114] + x[114,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 97.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 40) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 69) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 57) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 112) (70 -> 74) (71 -> 3) (72 -> 46) (73 -> 1) (74 -> 45) (75 -> 52) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 53) (80 -> 125) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 27) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 130) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 13) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 16) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 82, 30, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 57, 48, 89, 98, 75, 52, 104, 13, 36, 33, 20, 29, 109, 47, 81, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 69, 112, 67, 72, 46, 80, 125, 61, 91, 73], [12, 114, 16, 110, 96, 25, 37, 60, 100, 95, 50], [56, 88], [58, 124], [66, 76], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [56, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[56,88] + x[88,56] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 14) (7 -> 18) (8 -> 56) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 7) (22 -> 40) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 86) (29 -> 109) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 48) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 10) (50 -> 95) (51 -> 71) (52 -> 104) (53 -> 6) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 119) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 79) (70 -> 74) (71 -> 3) (72 -> 82) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 122) (98 -> 93) (99 -> 130) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 13) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 23) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 58) (125 -> 61) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 69, 79, 64, 21, 7, 18, 116, 38, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 23, 81, 16, 110, 96, 25, 37, 60, 100, 75, 52, 104, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 82, 30], [6, 14, 65, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53], [46, 80], [58, 124], [61, 125], [73, 91], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [46, 80]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[46,80] + x[80,46] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 21) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 88) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 20) (34 -> 117) (35 -> 10) (36 -> 33) (37 -> 60) (38 -> 73) (39 -> 22) (40 -> 4) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 81) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 59) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 46) (73 -> 91) (74 -> 70) (75 -> 52) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 61) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 130) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 34) (104 -> 13) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 16) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 65) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 34, 117, 90, 99, 130, 5, 31, 57, 48, 89, 98, 75, 52, 104, 13, 36, 33, 20, 29, 109, 47, 81, 23, 7, 18, 116, 38, 73, 91, 61, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 71, 3, 111, 82, 30], [4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14, 6, 21, 64, 79, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40], [12, 114, 16, 110, 96, 25, 37, 60, 100, 95, 50], [46, 72], [58, 124], [67, 112], [77, 120], [78, 102], [80, 125], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [46, 72]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[46,72] + x[72,46] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 2) (25 -> 37) (26 -> 103) (27 -> 88) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 10) (36 -> 33) (37 -> 60) (38 -> 6) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 81) (48 -> 57) (49 -> 24) (50 -> 12) (51 -> 52) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 8) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 82) (73 -> 91) (74 -> 70) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 53) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 61) (92 -> 127) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 13) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 23) (112 -> 69) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 82, 30, 119, 28, 86, 71, 3, 111, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 2, 118, 84, 54, 11], [4, 95, 50, 12, 114, 85, 94, 67, 112, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63], [5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 52, 104, 13, 36, 33, 20, 29, 109, 47, 81, 16, 110, 96, 25, 37, 60, 100, 75, 98, 89, 48, 57, 31], [26, 103], [58, 124], [77, 120], [78, 102], [83, 101], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [26, 103]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,103] + x[103,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 95) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 56) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 43) (20 -> 29) (21 -> 65) (22 -> 39) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 57) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 79) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 46) (73 -> 1) (74 -> 70) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 125) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 93) (99 -> 130) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 13) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 69) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 90, 99, 130, 5, 31, 57, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 82, 30, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 75, 52, 104, 13, 36, 33, 20, 29, 109, 47, 112, 69, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 85, 94, 67, 72, 46, 80, 125, 61, 91, 73], [58, 124], [77, 120], [78, 102], [83, 101], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [58, 124]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[58,124] + x[124,58] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 40) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 35) (11 -> 1) (12 -> 114) (13 -> 104) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 43) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 14) (52 -> 75) (53 -> 6) (54 -> 11) (55 -> 58) (56 -> 8) (57 -> 48) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 74) (71 -> 86) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 17) (90 -> 117) (91 -> 61) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 96) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 80) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 47, 109, 29, 20, 33, 36, 13, 104, 52, 75, 98, 93, 68, 42, 51, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [3, 71, 86, 28, 119, 30, 82, 111], [4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 35, 19, 43, 127, 92, 66, 76, 53, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 48, 89, 17, 62, 32, 107, 106, 63], [22, 39], [24, 49], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [22, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,39] + x[39,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 111) (4 -> 63) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 124) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 39) (18 -> 116) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 53) (23 -> 7) (24 -> 49) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 10) (36 -> 33) (37 -> 60) (38 -> 6) (39 -> 22) (40 -> 4) (41 -> 103) (42 -> 51) (43 -> 19) (44 -> 31) (45 -> 74) (46 -> 72) (47 -> 81) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 123) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 55) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 21) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 121) (71 -> 3) (72 -> 82) (73 -> 91) (74 -> 70) (75 -> 52) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 117) (91 -> 61) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 13) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 23) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 99) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 82, 30, 119, 28, 86, 71, 3, 111, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 99, 90, 117, 34, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 123, 40, 4, 63, 106, 107, 32, 62, 17, 39, 22, 53, 76, 66, 92, 127, 43, 19, 35, 10, 124, 58, 55, 128, 45, 74, 70, 121, 41, 103, 26, 2, 118, 84, 54, 11], [12, 114, 57, 48, 89, 98, 75, 52, 104, 13, 36, 33, 20, 29, 109, 47, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50], [24, 49], [67, 112], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 45 Cassage de contrainte 
> Cycle à casser : [24, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,49] + x[49,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 56) (2 -> 26) (3 -> 111) (4 -> 40) (5 -> 130) (6 -> 21) (7 -> 23) (8 -> 93) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 58) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 74) (71 -> 3) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 35) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 11) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 18) (117 -> 90) (118 -> 2) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 56, 88, 27, 9, 105, 59, 34, 117, 90, 99, 35, 19, 43, 127, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 48, 89, 98, 75, 52, 104, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 82, 30], [77, 120], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 46 Cassage de contrainte 
> Cycle à casser : [77, 120]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[77,120] + x[120,77] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 7) (19 -> 43) (20 -> 33) (21 -> 65) (22 -> 40) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 44) (32 -> 62) (33 -> 49) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 58) (56 -> 8) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 36) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 51) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 98) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 96) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 30) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 80) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 67, 112, 47, 109, 29, 20, 33, 49, 24, 86, 28, 119, 30, 82, 111, 3, 71, 51, 42, 68, 93, 98, 89, 48, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 35, 19, 43, 127, 92, 66, 36, 13, 130, 5, 31, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 75, 52, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [53, 76], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 47 Cassage de contrainte 
> Cycle à casser : [53, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,76] + x[76,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 40) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 93) (9 -> 27) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 49) (25 -> 37) (26 -> 103) (27 -> 88) (28 -> 86) (29 -> 109) (30 -> 119) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 72) (47 -> 81) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 22) (54 -> 84) (55 -> 58) (56 -> 1) (57 -> 48) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 74) (71 -> 3) (72 -> 82) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 77) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 23) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 28) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 80) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 93, 68, 42, 51, 71, 3, 111, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 57, 48, 89, 98, 75, 52, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56], [4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 80, 46, 72, 82, 30, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63], [61, 125], [67, 112], [73, 91], [78, 102], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 48 Cassage de contrainte 
> Cycle à casser : [61, 125]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[61,125] + x[125,61] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 71) (4 -> 40) (5 -> 130) (6 -> 14) (7 -> 18) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 86) (25 -> 96) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 75) (53 -> 22) (54 -> 84) (55 -> 58) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 21) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 74) (71 -> 51) (72 -> 46) (73 -> 1) (74 -> 45) (75 -> 98) (76 -> 53) (77 -> 104) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 120) (94 -> 85) (95 -> 100) (96 -> 110) (97 -> 122) (98 -> 89) (99 -> 35) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 90, 99, 35, 19, 43, 127, 92, 66, 76, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 49, 24, 86, 28, 119, 30, 82, 111, 3, 71, 51, 42, 68, 93, 120, 77, 104, 52, 75, 98, 89, 48, 57, 114, 12, 50, 95, 100, 60, 37, 25, 96, 110, 16, 81, 23, 7, 18, 116, 38, 6, 14, 65, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 46, 80, 125, 61, 91, 73], [78, 102], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 49 Cassage de contrainte 
> Cycle à casser : [78, 102]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[78,102] + x[102,78] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 130) (6 -> 14) (7 -> 21) (8 -> 103) (9 -> 27) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 49) (25 -> 96) (26 -> 2) (27 -> 88) (28 -> 86) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 57) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 75) (53 -> 78) (54 -> 11) (55 -> 58) (56 -> 8) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 119) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 74) (71 -> 51) (72 -> 46) (73 -> 104) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 98) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 18) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 37) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 3) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 37, 25, 96, 110, 16, 81, 23, 7, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 46, 80, 125, 61, 91, 73, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [3, 71, 51, 42, 68, 93, 98, 89, 48, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124], [6, 14, 65, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38], [52, 75], [60, 100], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 50 Cassage de contrainte 
> Cycle à casser : [52, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[52,75] + x[75,52] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 73) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 53) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 35) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 81) (17 -> 39) (18 -> 7) (19 -> 43) (20 -> 33) (21 -> 65) (22 -> 40) (23 -> 111) (24 -> 49) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 86) (29 -> 20) (30 -> 119) (31 -> 44) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 25) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 57) (49 -> 10) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 78) (54 -> 11) (55 -> 58) (56 -> 8) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 51) (72 -> 82) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 66) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 47) (82 -> 30) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 127) (93 -> 98) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 18) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 117) (121 -> 41) (122 -> 97) (123 -> 96) (124 -> 70) (125 -> 80) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 73, 91, 61, 125, 80, 46, 72, 82, 30, 119, 28, 86, 24, 49, 10, 35, 19, 43, 25, 37, 60, 100, 75, 52, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [3, 71, 51, 42, 68, 93, 98, 89, 48, 57, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 96, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 44, 129, 126, 15, 69, 79, 64, 21, 65, 14, 6, 53, 78, 102, 18, 7, 23, 111], [38, 116], [41, 121], [45, 128, 55, 58, 124, 70, 74], [66, 76], [67, 112], [83, 101], [85, 94], [87, 115], [90, 99], [92, 127], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 51 Cassage de contrainte 
> Cycle à casser : [38, 116]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[38,116] + x[116,38] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 21) (8 -> 93) (9 -> 27) (10 -> 35) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 49) (25 -> 96) (26 -> 2) (27 -> 88) (28 -> 86) (29 -> 24) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 103) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 6) (39 -> 17) (40 -> 22) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 123) (52 -> 104) (53 -> 78) (54 -> 11) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 55) (59 -> 105) (60 -> 100) (61 -> 59) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 119) (66 -> 76) (67 -> 112) (68 -> 42) (69 -> 15) (70 -> 124) (71 -> 3) (72 -> 46) (73 -> 91) (74 -> 70) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 72) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 18) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 37) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 84) (119 -> 28) (120 -> 117) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 72, 46, 80, 125, 61, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 57, 48, 89, 98, 75, 52, 104, 77, 120, 117, 34, 103, 26, 2, 118, 84, 54, 11], [3, 111, 37, 25, 96, 110, 16, 81, 23, 7, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38, 6, 14, 65, 119, 28, 86, 71], [41, 121], [45, 74, 70, 124, 58, 55, 128], [47, 109], [60, 100], [67, 112], [73, 91], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 52 Cassage de contrainte 
> Cycle à casser : [41, 121]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[41,121] + x[121,41] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 72) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 110) (17 -> 39) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 7) (22 -> 40) (23 -> 81) (24 -> 29) (25 -> 37) (26 -> 2) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 44) (32 -> 62) (33 -> 36) (34 -> 59) (35 -> 99) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 109) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 52) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 58) (56 -> 8) (57 -> 114) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 79) (70 -> 74) (71 -> 86) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 120) (78 -> 53) (79 -> 64) (80 -> 125) (81 -> 16) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 93) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 28, 119, 65, 14, 6, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 99, 90, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 2, 118, 84, 54, 11], [4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 49, 24, 29, 20, 33, 36, 13, 130, 5, 31, 44, 129, 126, 15, 69, 79, 64, 21, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 75, 98, 89, 48, 57, 114, 12, 50, 95], [42, 51, 52, 104, 77, 120, 93, 68], [47, 109], [67, 112], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 53 Cassage de contrainte 
> Cycle à casser : [47, 109]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[47,109] + x[109,47] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 38) (7 -> 21) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 102) (19 -> 35) (20 -> 29) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 86) (25 -> 96) (26 -> 2) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 103) (35 -> 99) (36 -> 33) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 19) (44 -> 55) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 57) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 75) (53 -> 76) (54 -> 11) (55 -> 58) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 17) (63 -> 4) (64 -> 79) (65 -> 14) (66 -> 92) (67 -> 72) (68 -> 93) (69 -> 15) (70 -> 74) (71 -> 51) (72 -> 46) (73 -> 106) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 67) (95 -> 50) (96 -> 110) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 63) (110 -> 16) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 120) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 129) (127 -> 43) (128 -> 100) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 51, 42, 68, 93, 8, 56, 88, 27, 9, 105, 59, 34, 103, 26, 2, 118, 84, 54, 11], [4, 95, 50, 12, 114, 85, 94, 67, 72, 46, 80, 125, 61, 91, 73, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 100, 60, 37, 25, 96, 110, 16, 81, 23, 7, 21, 64, 79, 69, 15, 126, 129, 44, 55, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 99, 90, 117, 120, 77, 104, 52, 75, 98, 89, 48, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 63], [47, 112], [83, 101], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 54 Cassage de contrainte 
> Cycle à casser : [47, 112]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[47,112] + x[112,47] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 69) (16 -> 81) (17 -> 39) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 7) (22 -> 40) (23 -> 111) (24 -> 2) (25 -> 37) (26 -> 96) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 44) (32 -> 62) (33 -> 36) (34 -> 110) (35 -> 99) (36 -> 13) (37 -> 60) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 109) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 51) (53 -> 76) (54 -> 11) (55 -> 58) (56 -> 88) (57 -> 114) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 103) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 86) (72 -> 46) (73 -> 106) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 64) (80 -> 125) (81 -> 47) (82 -> 72) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 120) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 72, 46, 80, 125, 61, 91, 73, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 10, 49, 24, 2, 118, 84, 54, 11], [3, 71, 86, 28, 119, 65, 14, 6, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 99, 90, 117, 120, 77, 104, 52, 51, 42, 68, 93, 8, 56, 88, 27, 9, 105, 59, 34, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 44, 129, 126, 15, 69, 79, 64, 21, 7, 23, 111], [4, 63, 103, 26, 96, 25, 37, 60, 100, 75, 98, 89, 48, 57, 114, 12, 50, 95], [67, 112], [83, 101], [85, 94], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 55 Cassage de contrainte 
> Cycle à casser : [67, 112]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[67,112] + x[112,67] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 21) (8 -> 103) (9 -> 27) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 49) (25 -> 37) (26 -> 96) (27 -> 88) (28 -> 86) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 59) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 6) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 31) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 78) (54 -> 84) (55 -> 58) (56 -> 8) (57 -> 48) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 91) (62 -> 17) (63 -> 4) (64 -> 79) (65 -> 119) (66 -> 76) (67 -> 72) (68 -> 42) (69 -> 15) (70 -> 74) (71 -> 3) (72 -> 46) (73 -> 106) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 50) (96 -> 110) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 75) (101 -> 83) (102 -> 18) (103 -> 63) (104 -> 77) (105 -> 9) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 67) (113 -> 108) (114 -> 57) (115 -> 87) (116 -> 38) (117 -> 34) (118 -> 2) (119 -> 28) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 25) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 55) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 96, 110, 16, 81, 23, 7, 21, 64, 79, 69, 15, 126, 129, 44, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 67, 72, 46, 80, 125, 61, 91, 73, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 58, 124, 25, 37, 60, 100, 75, 52, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56, 8, 103, 63, 4, 95, 50, 12, 114, 57, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 82, 30], [6, 14, 65, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38], [83, 101], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 56 Cassage de contrainte 
> Cycle à casser : [83, 101]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[83,101] + x[101,83] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 101) (16 -> 114) (17 -> 39) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 7) (22 -> 40) (23 -> 81) (24 -> 86) (25 -> 96) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 46) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 71) (52 -> 75) (53 -> 76) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 73) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 79) (70 -> 74) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 100) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 64) (80 -> 125) (81 -> 47) (82 -> 30) (83 -> 58) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 99) (91 -> 61) (92 -> 127) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 82) (112 -> 69) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 18) (117 -> 120) (118 -> 2) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 80) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 120, 77, 104, 52, 75, 100, 60, 37, 25, 96, 110, 16, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 46, 72, 67, 112, 69, 79, 64, 21, 7, 23, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 82, 30], [61, 73, 91], [80, 125], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 57 Cassage de contrainte 
> Cycle à casser : [80, 125]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[80,125] + x[125,80] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 124) (4 -> 95) (5 -> 31) (6 -> 38) (7 -> 23) (8 -> 93) (9 -> 27) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 130) (14 -> 6) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 7) (22 -> 39) (23 -> 111) (24 -> 86) (25 -> 96) (26 -> 103) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 71) (52 -> 104) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 83) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 92) (67 -> 112) (68 -> 42) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 82) (73 -> 91) (74 -> 70) (75 -> 52) (76 -> 66) (77 -> 120) (78 -> 53) (79 -> 64) (80 -> 46) (81 -> 47) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 61) (92 -> 127) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 15) (102 -> 78) (103 -> 63) (104 -> 77) (105 -> 9) (106 -> 73) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 37) (112 -> 69) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 2) (119 -> 65) (120 -> 117) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 63, 4, 95, 50, 12, 114, 85, 94, 67, 112, 69, 79, 64, 21, 7, 23, 111, 37, 25, 96, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 98, 75, 52, 104, 77, 120, 117, 34, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 71, 3, 124, 58, 83, 101, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 73, 91, 61, 125, 80, 46, 72, 82, 30], [6, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 10, 49, 24, 86, 28, 119, 65, 14], [60, 100], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 58 Cassage de contrainte 
> Cycle à casser : [60, 100]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,100] + x[100,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 95) (5 -> 31) (6 -> 38) (7 -> 21) (8 -> 93) (9 -> 27) (10 -> 124) (11 -> 1) (12 -> 114) (13 -> 130) (14 -> 6) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 2) (25 -> 43) (26 -> 96) (27 -> 88) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 107) (33 -> 49) (34 -> 103) (35 -> 10) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 12) (51 -> 52) (52 -> 104) (53 -> 76) (54 -> 11) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 83) (59 -> 105) (60 -> 37) (61 -> 59) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 14) (66 -> 36) (67 -> 72) (68 -> 42) (69 -> 112) (70 -> 121) (71 -> 86) (72 -> 46) (73 -> 91) (74 -> 70) (75 -> 100) (76 -> 66) (77 -> 120) (78 -> 53) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 111) (83 -> 101) (84 -> 54) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 56) (89 -> 98) (90 -> 99) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 110) (97 -> 122) (98 -> 75) (99 -> 90) (100 -> 60) (101 -> 15) (102 -> 78) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 3) (112 -> 47) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 34) (118 -> 84) (119 -> 65) (120 -> 117) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 86, 28, 119, 65, 14, 6, 38, 116, 18, 102, 78, 53, 76, 66, 36, 13, 130, 5, 31, 57, 48, 89, 98, 75, 100, 60, 37, 25, 43, 19, 35, 10, 124, 58, 83, 101, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 85, 94, 67, 72, 46, 80, 125, 61, 59, 105, 9, 27, 88, 56, 8, 93, 68, 42, 51, 52, 104, 77, 120, 117, 34, 103, 26, 96, 110, 16, 81, 23, 7, 21, 64, 79, 69, 112, 47, 109, 29, 20, 33, 49, 24, 2, 118, 84, 54, 11], [73, 91], [87, 115], [90, 99], [92, 127], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 59 Cassage de contrainte 
> Cycle à casser : [73, 91]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[73,91] + x[91,73] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 72) (7 -> 23) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 101) (16 -> 114) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 33) (21 -> 7) (22 -> 40) (23 -> 81) (24 -> 86) (25 -> 96) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 117) (35 -> 19) (36 -> 13) (37 -> 25) (38 -> 73) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 35) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 71) (52 -> 75) (53 -> 78) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 112) (68 -> 42) (69 -> 79) (70 -> 74) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 100) (76 -> 53) (77 -> 104) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 47) (82 -> 30) (83 -> 58) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 68) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 18) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 82) (112 -> 69) (113 -> 108) (114 -> 12) (115 -> 87) (116 -> 38) (117 -> 120) (118 -> 2) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 80) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 120, 77, 104, 52, 75, 100, 60, 37, 25, 96, 110, 16, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 72, 67, 112, 69, 79, 64, 21, 7, 23, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 82, 30], [18, 116, 38, 73, 91, 61, 125, 80, 46, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102], [85, 94], [87, 115], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 60 Cassage de contrainte 
> Cycle à casser : [85, 94]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[85,94] + x[94,85] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 71) (4 -> 40) (5 -> 130) (6 -> 38) (7 -> 23) (8 -> 56) (9 -> 102) (10 -> 49) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 6) (15 -> 101) (16 -> 110) (17 -> 62) (18 -> 7) (19 -> 35) (20 -> 29) (21 -> 65) (22 -> 39) (23 -> 81) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 92) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 59) (35 -> 99) (36 -> 33) (37 -> 60) (38 -> 116) (39 -> 17) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 112) (48 -> 57) (49 -> 24) (50 -> 12) (51 -> 42) (52 -> 75) (53 -> 22) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 105) (60 -> 100) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 14) (66 -> 76) (67 -> 72) (68 -> 93) (69 -> 79) (70 -> 74) (71 -> 51) (72 -> 46) (73 -> 1) (74 -> 45) (75 -> 98) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 64) (80 -> 125) (81 -> 16) (82 -> 111) (83 -> 58) (84 -> 118) (85 -> 94) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 67) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 95) (101 -> 83) (102 -> 78) (103 -> 34) (104 -> 52) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 69) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 120) (118 -> 2) (119 -> 30) (120 -> 77) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 34, 59, 105, 9, 102, 78, 53, 22, 39, 17, 62, 32, 107, 106, 63, 4, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 30, 82, 111, 3, 71, 51, 42, 68, 93, 8, 56, 88, 27, 92, 127, 43, 19, 35, 99, 90, 117, 120, 77, 104, 52, 75, 98, 89, 48, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 112, 69, 79, 64, 21, 65, 14, 6, 38, 116, 18, 7, 23, 81, 16, 110, 96, 25, 37, 60, 100, 95, 50, 12, 114, 85, 94, 67, 72, 46, 80, 125, 61, 91, 73], [66, 76], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 61 Cassage de contrainte 
> Cycle à casser : [66, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[66,76] + x[76,66] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 110.0
   Permutations :
(1 -> 11) (2 -> 24) (3 -> 111) (4 -> 95) (5 -> 31) (6 -> 14) (7 -> 23) (8 -> 103) (9 -> 27) (10 -> 124) (11 -> 54) (12 -> 114) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 33) (21 -> 7) (22 -> 39) (23 -> 81) (24 -> 49) (25 -> 37) (26 -> 96) (27 -> 88) (28 -> 86) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 107) (33 -> 36) (34 -> 59) (35 -> 19) (36 -> 13) (37 -> 60) (38 -> 73) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 52) (52 -> 104) (53 -> 78) (54 -> 84) (55 -> 128) (56 -> 8) (57 -> 48) (58 -> 83) (59 -> 105) (60 -> 100) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 119) (66 -> 76) (67 -> 112) (68 -> 42) (69 -> 79) (70 -> 121) (71 -> 3) (72 -> 6) (73 -> 91) (74 -> 70) (75 -> 98) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 71) (87 -> 115) (88 -> 56) (89 -> 69) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 25) (97 -> 122) (98 -> 93) (99 -> 35) (100 -> 75) (101 -> 15) (102 -> 18) (103 -> 26) (104 -> 77) (105 -> 9) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 34) (111 -> 82) (112 -> 47) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 28) (120 -> 117) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 24, 49, 10, 124, 58, 83, 101, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 85, 94, 67, 112, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 69, 79, 64, 21, 7, 23, 81, 16, 110, 34, 59, 105, 9, 27, 88, 56, 8, 103, 26, 96, 25, 37, 60, 100, 75, 98, 93, 68, 42, 51, 52, 104, 77, 120, 117, 90, 99, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38, 73, 91, 61, 125, 80, 46, 72, 6, 14, 65, 119, 28, 86, 71, 3, 111, 82, 30], [87, 115], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 62 Cassage de contrainte 
> Cycle à casser : [87, 115]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[87,115] + x[115,87] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 11) (2 -> 115) (3 -> 71) (4 -> 95) (5 -> 130) (6 -> 14) (7 -> 23) (8 -> 56) (9 -> 105) (10 -> 35) (11 -> 54) (12 -> 114) (13 -> 36) (14 -> 65) (15 -> 126) (16 -> 110) (17 -> 62) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 7) (22 -> 39) (23 -> 111) (24 -> 49) (25 -> 124) (26 -> 103) (27 -> 9) (28 -> 86) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 107) (33 -> 20) (34 -> 117) (35 -> 19) (36 -> 33) (37 -> 25) (38 -> 73) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 68) (43 -> 127) (44 -> 55) (45 -> 74) (46 -> 72) (47 -> 81) (48 -> 57) (49 -> 10) (50 -> 12) (51 -> 42) (52 -> 75) (53 -> 78) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 31) (58 -> 83) (59 -> 34) (60 -> 37) (61 -> 125) (62 -> 32) (63 -> 4) (64 -> 21) (65 -> 119) (66 -> 76) (67 -> 112) (68 -> 93) (69 -> 79) (70 -> 121) (71 -> 51) (72 -> 82) (73 -> 91) (74 -> 70) (75 -> 100) (76 -> 53) (77 -> 104) (78 -> 102) (79 -> 64) (80 -> 46) (81 -> 16) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 6) (88 -> 27) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 98) (94 -> 67) (95 -> 50) (96 -> 26) (97 -> 122) (98 -> 89) (99 -> 90) (100 -> 60) (101 -> 15) (102 -> 18) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 47) (110 -> 96) (111 -> 3) (112 -> 69) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 38) (117 -> 120) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 80) (126 -> 129) (127 -> 92) (128 -> 45) (129 -> 44) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 115, 87, 6, 14, 65, 119, 28, 86, 24, 49, 10, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38, 73, 91, 61, 125, 80, 46, 72, 82, 30], [3, 71, 51, 42, 68, 93, 98, 89, 48, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 16, 110, 96, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 117, 120, 77, 104, 52, 75, 100, 60, 37, 25, 124, 58, 83, 101, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 85, 94, 67, 112, 69, 79, 64, 21, 7, 23, 111], [90, 99], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 63 Cassage de contrainte 
> Cycle à casser : [90, 99]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[90,99] + x[99,90] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 11) (2 -> 115) (3 -> 111) (4 -> 95) (5 -> 31) (6 -> 14) (7 -> 21) (8 -> 56) (9 -> 105) (10 -> 124) (11 -> 54) (12 -> 114) (13 -> 130) (14 -> 65) (15 -> 126) (16 -> 81) (17 -> 62) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 39) (23 -> 7) (24 -> 49) (25 -> 96) (26 -> 103) (27 -> 9) (28 -> 86) (29 -> 20) (30 -> 1) (31 -> 57) (32 -> 107) (33 -> 36) (34 -> 110) (35 -> 99) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 17) (40 -> 22) (41 -> 123) (42 -> 51) (43 -> 19) (44 -> 55) (45 -> 74) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 10) (50 -> 12) (51 -> 71) (52 -> 75) (53 -> 76) (54 -> 84) (55 -> 128) (56 -> 88) (57 -> 48) (58 -> 83) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 32) (63 -> 4) (64 -> 79) (65 -> 119) (66 -> 92) (67 -> 72) (68 -> 42) (69 -> 112) (70 -> 121) (71 -> 3) (72 -> 46) (73 -> 38) (74 -> 70) (75 -> 100) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 69) (80 -> 125) (81 -> 23) (82 -> 30) (83 -> 101) (84 -> 118) (85 -> 94) (86 -> 24) (87 -> 6) (88 -> 27) (89 -> 98) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 68) (94 -> 67) (95 -> 50) (96 -> 26) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 60) (101 -> 15) (102 -> 78) (103 -> 8) (104 -> 52) (105 -> 59) (106 -> 63) (107 -> 106) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 82) (112 -> 47) (113 -> 108) (114 -> 85) (115 -> 87) (116 -> 18) (117 -> 120) (118 -> 2) (119 -> 28) (120 -> 77) (121 -> 41) (122 -> 97) (123 -> 40) (124 -> 58) (125 -> 61) (126 -> 129) (127 -> 43) (128 -> 45) (129 -> 44) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 115, 87, 6, 14, 65, 119, 28, 86, 24, 49, 10, 124, 58, 83, 101, 15, 126, 129, 44, 55, 128, 45, 74, 70, 121, 41, 123, 40, 22, 39, 17, 62, 32, 107, 106, 63, 4, 95, 50, 12, 114, 85, 94, 67, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 99, 90, 117, 120, 77, 104, 52, 75, 100, 60, 37, 25, 96, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 110, 16, 81, 23, 7, 21, 64, 79, 69, 112, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 98, 93, 68, 42, 51, 71, 3, 111, 82, 30], [97, 122], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 64 Cassage de contrainte 
> Cycle à casser : [97, 122]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[97,122] + x[122,97] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 111) (4 -> 63) (5 -> 31) (6 -> 87) (7 -> 21) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 130) (14 -> 6) (15 -> 101) (16 -> 81) (17 -> 39) (18 -> 102) (19 -> 35) (20 -> 33) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 86) (25 -> 96) (26 -> 2) (27 -> 9) (28 -> 119) (29 -> 20) (30 -> 82) (31 -> 57) (32 -> 62) (33 -> 36) (34 -> 103) (35 -> 99) (36 -> 13) (37 -> 25) (38 -> 116) (39 -> 22) (40 -> 123) (41 -> 97) (42 -> 51) (43 -> 19) (44 -> 129) (45 -> 128) (46 -> 80) (47 -> 109) (48 -> 89) (49 -> 24) (50 -> 95) (51 -> 71) (52 -> 75) (53 -> 76) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 48) (58 -> 124) (59 -> 34) (60 -> 37) (61 -> 91) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 92) (67 -> 94) (68 -> 42) (69 -> 121) (70 -> 74) (71 -> 3) (72 -> 46) (73 -> 38) (74 -> 45) (75 -> 100) (76 -> 66) (77 -> 104) (78 -> 53) (79 -> 69) (80 -> 125) (81 -> 47) (82 -> 72) (83 -> 58) (84 -> 54) (85 -> 114) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 98) (90 -> 117) (91 -> 73) (92 -> 127) (93 -> 8) (94 -> 85) (95 -> 4) (96 -> 110) (97 -> 122) (98 -> 93) (99 -> 90) (100 -> 60) (101 -> 83) (102 -> 78) (103 -> 26) (104 -> 52) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 29) (110 -> 16) (111 -> 23) (112 -> 67) (113 -> 108) (114 -> 12) (115 -> 68) (116 -> 18) (117 -> 120) (118 -> 84) (119 -> 65) (120 -> 77) (121 -> 70) (122 -> 112) (123 -> 41) (124 -> 10) (125 -> 61) (126 -> 15) (127 -> 43) (128 -> 55) (129 -> 126) (130 -> 5) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 72, 46, 80, 125, 61, 91, 73, 38, 116, 18, 102, 78, 53, 76, 66, 92, 127, 43, 19, 35, 99, 90, 117, 120, 77, 104, 52, 75, 100, 60, 37, 25, 96, 110, 16, 81, 47, 109, 29, 20, 33, 36, 13, 130, 5, 31, 57, 48, 89, 98, 93, 8, 56, 88, 27, 9, 105, 59, 34, 103, 26, 2, 118, 84, 54, 11], [3, 111, 23, 7, 21, 64, 79, 69, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 87, 115, 68, 42, 51, 71], [4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 97, 122, 112, 67, 94, 85, 114, 12, 50, 95], [108, 113]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 65 Cassage de contrainte 
> Cycle à casser : [108, 113]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[108,113] + x[113,108] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 11) (2 -> 26) (3 -> 111) (4 -> 63) (5 -> 130) (6 -> 87) (7 -> 21) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 54) (12 -> 50) (13 -> 36) (14 -> 6) (15 -> 101) (16 -> 108) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 1) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 110) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 73) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 51) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 81) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 71) (52 -> 104) (53 -> 78) (54 -> 84) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 76) (67 -> 94) (68 -> 42) (69 -> 112) (70 -> 74) (71 -> 3) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 30) (83 -> 58) (84 -> 118) (85 -> 114) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 98) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 89) (98 -> 93) (99 -> 35) (100 -> 75) (101 -> 83) (102 -> 18) (103 -> 8) (104 -> 77) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 82) (112 -> 122) (113 -> 96) (114 -> 12) (115 -> 68) (116 -> 38) (117 -> 90) (118 -> 2) (119 -> 65) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 41) (124 -> 10) (125 -> 80) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 11, 54, 84, 118, 2, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 110, 16, 108, 113, 96, 25, 37, 60, 100, 75, 52, 104, 77, 120, 117, 90, 99, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38, 73, 91, 61, 125, 80, 46, 72, 67, 94, 85, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 87, 115, 68, 42, 51, 71, 3, 111, 82, 30], [5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 23, 7, 21, 64, 79, 69, 112, 122, 97, 89, 48, 57, 31], [93, 98]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 66 Cassage de contrainte 
> Cycle à casser : [93, 98]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[93,98] + x[98,93] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 30) (2 -> 118) (3 -> 71) (4 -> 63) (5 -> 130) (6 -> 87) (7 -> 21) (8 -> 56) (9 -> 105) (10 -> 49) (11 -> 1) (12 -> 50) (13 -> 36) (14 -> 6) (15 -> 101) (16 -> 108) (17 -> 39) (18 -> 116) (19 -> 43) (20 -> 29) (21 -> 64) (22 -> 40) (23 -> 7) (24 -> 86) (25 -> 37) (26 -> 103) (27 -> 9) (28 -> 119) (29 -> 109) (30 -> 82) (31 -> 5) (32 -> 62) (33 -> 20) (34 -> 110) (35 -> 19) (36 -> 33) (37 -> 60) (38 -> 73) (39 -> 22) (40 -> 123) (41 -> 121) (42 -> 68) (43 -> 127) (44 -> 129) (45 -> 128) (46 -> 72) (47 -> 81) (48 -> 57) (49 -> 24) (50 -> 95) (51 -> 42) (52 -> 104) (53 -> 78) (54 -> 11) (55 -> 44) (56 -> 88) (57 -> 31) (58 -> 124) (59 -> 34) (60 -> 100) (61 -> 125) (62 -> 17) (63 -> 106) (64 -> 79) (65 -> 14) (66 -> 76) (67 -> 94) (68 -> 93) (69 -> 112) (70 -> 74) (71 -> 51) (72 -> 67) (73 -> 91) (74 -> 45) (75 -> 52) (76 -> 53) (77 -> 120) (78 -> 102) (79 -> 69) (80 -> 46) (81 -> 23) (82 -> 111) (83 -> 58) (84 -> 26) (85 -> 114) (86 -> 28) (87 -> 115) (88 -> 27) (89 -> 48) (90 -> 99) (91 -> 61) (92 -> 66) (93 -> 98) (94 -> 85) (95 -> 4) (96 -> 25) (97 -> 41) (98 -> 89) (99 -> 35) (100 -> 75) (101 -> 83) (102 -> 18) (103 -> 8) (104 -> 77) (105 -> 59) (106 -> 107) (107 -> 32) (108 -> 113) (109 -> 47) (110 -> 16) (111 -> 3) (112 -> 122) (113 -> 96) (114 -> 12) (115 -> 2) (116 -> 38) (117 -> 90) (118 -> 84) (119 -> 65) (120 -> 117) (121 -> 70) (122 -> 97) (123 -> 54) (124 -> 10) (125 -> 80) (126 -> 15) (127 -> 92) (128 -> 55) (129 -> 126) (130 -> 13) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 82, 111, 3, 71, 51, 42, 68, 93, 98, 89, 48, 57, 31, 5, 130, 13, 36, 33, 20, 29, 109, 47, 81, 23, 7, 21, 64, 79, 69, 112, 122, 97, 41, 121, 70, 74, 45, 128, 55, 44, 129, 126, 15, 101, 83, 58, 124, 10, 49, 24, 86, 28, 119, 65, 14, 6, 87, 115, 2, 118, 84, 26, 103, 8, 56, 88, 27, 9, 105, 59, 34, 110, 16, 108, 113, 96, 25, 37, 60, 100, 75, 52, 104, 77, 120, 117, 90, 99, 35, 19, 43, 127, 92, 66, 76, 53, 78, 102, 18, 116, 38, 73, 91, 61, 125, 80, 46, 72, 67, 94, 85, 114, 12, 50, 95, 4, 63, 106, 107, 32, 62, 17, 39, 22, 40, 123, 54, 11]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 112.0
> Nombre d'itération nécéssaires : 67
> Nombre de contraintes ajoutées : 66
> Ordre de parcours des drônes : 
1 -> 30 -> 82 -> 111 -> 3 -> 71 -> 51 -> 42 -> 68 -> 93 -> 98 -> 89 -> 48 -> 57 -> 31 -> 5 -> 130 -> 13 -> 36 -> 33 -> 20 -> 29 -> 109 -> 47 -> 81 -> 23 -> 7 -> 21 -> 64 -> 79 -> 69 -> 112 -> 122 -> 97 -> 41 -> 121 -> 70 -> 74 -> 45 -> 128 -> 55 -> 44 -> 129 -> 126 -> 15 -> 101 -> 83 -> 58 -> 124 -> 10 -> 49 -> 24 -> 86 -> 28 -> 119 -> 65 -> 14 -> 6 -> 87 -> 115 -> 2 -> 118 -> 84 -> 26 -> 103 -> 8 -> 56 -> 88 -> 27 -> 9 -> 105 -> 59 -> 34 -> 110 -> 16 -> 108 -> 113 -> 96 -> 25 -> 37 -> 60 -> 100 -> 75 -> 52 -> 104 -> 77 -> 120 -> 117 -> 90 -> 99 -> 35 -> 19 -> 43 -> 127 -> 92 -> 66 -> 76 -> 53 -> 78 -> 102 -> 18 -> 116 -> 38 -> 73 -> 91 -> 61 -> 125 -> 80 -> 46 -> 72 -> 67 -> 94 -> 85 -> 114 -> 12 -> 50 -> 95 -> 4 -> 63 -> 106 -> 107 -> 32 -> 62 -> 17 -> 39 -> 22 -> 40 -> 123 -> 54 -> 11 -> 1. 
