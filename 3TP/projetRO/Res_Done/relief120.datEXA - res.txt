Résolution exacte pour relief/relief120.dat points à visiter :
Résolution d'initiale :  
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 49) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 101) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 18) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 57) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 66) (51 -> 103) (52 -> 55) (53 -> 71) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 86) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 52) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 12) (85 -> 41) (86 -> 107) (87 -> 53) (88 -> 36) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 81) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 15) (111 -> 68) (112 -> 31) (113 -> 58) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 86, 107, 65, 95, 59, 43, 97, 102, 73, 88, 36, 112, 31, 50, 66, 116, 7, 76, 99, 78, 92, 109, 104, 81, 47, 46, 111, 68, 38, 74], [2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 58, 90, 67, 23, 101, 5, 85, 41, 3, 72, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 49, 24, 84, 12], [6, 34, 94, 79, 16, 91, 20, 45, 57, 8, 89, 56, 40, 18, 93, 51, 103, 120, 118, 28, 117, 39, 54, 108, 9, 26, 96, 29, 30, 105, 63, 87, 53, 71], [14, 110, 15, 82, 77, 37]]
> Nombre de cycle(s) trouvé(s) : 4
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [14, 110, 15, 82, 77, 37]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[14,110] + x[110,15] + x[15,82] + x[82,77] + x[77,37] + x[37,14] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 49) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 101) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 106) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 57) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 86) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 15) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 107) (87 -> 53) (88 -> 36) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 58) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 86, 107, 65, 95, 59, 43, 97, 102, 73, 88, 36, 112, 31, 50, 81, 47, 46, 111, 68, 38, 74], [2, 11, 75, 15, 82, 77, 37, 14, 110, 12], [3, 72, 66, 116, 7, 76, 99, 78, 92, 109, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 57, 8, 89, 56, 40, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 58, 90, 67, 23, 101, 5, 85, 41], [9, 26, 96, 29, 30, 105, 63, 87, 53, 18, 93, 51, 103, 120, 118, 28, 117, 39, 54, 108], [10, 119, 25, 42, 48, 13, 19, 49, 24, 84, 52, 55, 61, 60]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 11, 75, 15, 82, 77, 37, 14, 110, 12]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[2,11] + x[11,75] + x[75,15] + x[15,82] + x[82,77] + x[77,37] + x[37,14] + x[14,110] + x[110,12] + x[12,2] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 87) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 37) (40 -> 18) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 66) (51 -> 103) (52 -> 55) (53 -> 71) (54 -> 102) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 104) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 54) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 108) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 36) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 72) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 81) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 118) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 72, 54, 102, 73, 88, 36, 112, 31, 50, 66, 116, 7, 76, 99, 78, 92, 109, 118, 28, 117, 39, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 101, 5, 85, 41, 3, 87, 53, 71, 6, 34, 94, 79, 16, 91, 20, 45, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 108, 9, 26, 96, 29, 30, 105, 63, 104, 81, 47, 46, 111, 68, 38, 74], [8, 89, 56, 40, 18, 93, 51, 103, 120, 57]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [8, 89, 56, 40, 18, 93, 51, 103, 120, 57]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[8,89] + x[89,56] + x[56,40] + x[40,18] + x[18,93] + x[93,51] + x[51,103] + x[103,120] + x[120,57] + x[57,8] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 49) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 101) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 90) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 18) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 57) (46 -> 107) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 66) (51 -> 103) (52 -> 55) (53 -> 71) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 17) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 86) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 79) (70 -> 64) (71 -> 6) (72 -> 112) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 36) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 111) (95 -> 59) (96 -> 29) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 81) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 58) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 86, 15, 82, 77, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 79, 16, 91, 20, 45, 57, 8, 89, 56, 40, 18, 93, 51, 103, 120, 118, 28, 117, 39, 54, 108, 9, 26, 96, 29, 30, 105, 63, 87, 53, 71, 6, 34, 94, 111, 68, 38, 74], [3, 72, 112, 31, 50, 66, 116, 7, 76, 99, 78, 92, 109, 104, 81, 47, 46, 107, 65, 95, 59, 43, 97, 102, 73, 88, 36, 90, 67, 23, 101, 5, 85, 41], [10, 119, 25, 42, 48, 13, 19, 49, 24, 84, 52, 55, 61, 60], [17, 113, 58]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [17, 113, 58]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[17,113] + x[113,58] + x[58,17] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 37) (40 -> 18) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 66) (51 -> 103) (52 -> 55) (53 -> 71) (54 -> 90) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 17) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 29) (69 -> 114) (70 -> 64) (71 -> 6) (72 -> 54) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 108) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 65) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 57) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 81) (105 -> 63) (106 -> 27) (107 -> 28) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 38) (116 -> 7) (117 -> 39) (118 -> 36) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 28, 117, 39, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 38, 74], [3, 72, 54, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 108, 9, 26, 96, 57, 8, 89, 56, 40, 18, 93, 51, 103, 120, 118, 36, 112, 31, 50, 66, 116, 7, 76, 99, 78, 92, 109, 104, 81, 47, 46, 111, 68, 29, 30, 105, 63, 87, 53, 71, 6, 34, 94, 79, 16, 91, 20, 45, 58, 17, 113, 101, 5, 85, 41], [22, 100, 69, 114, 32, 35], [43, 97, 102, 73, 88, 65, 95, 59]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [22, 100, 69, 114, 32, 35]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[22,100] + x[100,69] + x[69,114] + x[114,32] + x[32,35] + x[35,22] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 101) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 50) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 106) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 57) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 49) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 65) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 28) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 58) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 36) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 28, 117, 39, 54, 108, 9, 26, 96, 29, 30, 105, 63, 87, 53, 18, 93, 51, 103, 120, 118, 36, 112, 31, 50, 81, 47, 46, 111, 68, 38, 74], [2, 11, 75, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12], [3, 72, 66, 116, 7, 76, 99, 78, 92, 109, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 57, 8, 89, 56, 40, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 58, 90, 67, 23, 101, 5, 85, 41], [43, 97, 102, 73, 88, 65, 95, 59]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [43, 97, 102, 73, 88, 65, 95, 59]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[43,97] + x[97,102] + x[102,73] + x[73,88] + x[88,65] + x[65,95] + x[95,59] + x[59,43] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 87) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 56) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 50) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 104) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 102) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 36) (89 -> 92) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 72) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 118) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 72, 66, 116, 7, 76, 99, 78, 102, 73, 88, 36, 112, 31, 56, 40, 50, 81, 47, 46, 111, 68, 38, 74], [2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 101, 5, 85, 41, 3, 87, 53, 18, 93, 51, 103, 120, 57, 8, 89, 92, 109, 118, 28, 117, 39, 54, 108, 9, 26, 96, 29, 30, 105, 63, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [1, 62, 107, 65, 95, 59, 43, 97, 72, 66, 116, 7, 76, 99, 78, 102, 73, 88, 36, 112, 31, 56, 40, 50, 81, 47, 46, 111, 68, 38, 74]
> Taille du cycle à casser : 31
> Nouvelle contrainte : x[1,62] + x[62,107] + x[107,65] + x[65,95] + x[95,59] + x[59,43] + x[43,97] + x[97,72] + x[72,66] + x[66,116] + x[116,7] + x[7,76] + x[76,99] + x[99,78] + x[78,102] + x[102,73] + x[73,88] + x[88,36] + x[36,112] + x[112,31] + x[31,56] + x[56,40] + x[40,50] + x[50,81] + x[81,47] + x[47,46] + x[46,111] + x[111,68] + x[68,38] + x[38,74] + x[74,1] ≤ 30
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 38) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 56) (32 -> 35) (33 -> 93) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 50) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 29) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 115) (89 -> 28) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 57) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 36) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 102, 73, 88, 115, 114, 32, 35, 22, 100, 69, 17, 113, 101, 5, 85, 41, 3, 72, 66, 116, 7, 76, 99, 78, 92, 109, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 93, 51, 103, 120, 118, 36, 112, 31, 56, 40, 50, 81, 47, 46, 111, 68, 29, 30, 105, 63, 87, 53, 18, 38, 74], [8, 89, 28, 117, 39, 54, 108, 9, 26, 96, 57]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [8, 89, 28, 117, 39, 54, 108, 9, 26, 96, 57]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[8,89] + x[89,28] + x[28,117] + x[117,39] + x[39,54] + x[54,108] + x[108,9] + x[9,26] + x[26,96] + x[96,57] + x[57,8] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 48) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 45) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 50) (41 -> 3) (42 -> 114) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 29) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 36) (89 -> 56) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 57) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 38) (116 -> 7) (117 -> 39) (118 -> 28) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 102, 73, 88, 36, 112, 31, 45, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 114, 32, 35, 22, 100, 69, 17, 113, 101, 5, 85, 41, 3, 72, 66, 116, 7, 76, 99, 78, 92, 109, 104, 71, 6, 34, 94, 79, 16, 91, 20, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 38, 74], [8, 89, 56, 40, 50, 81, 47, 46, 111, 68, 29, 30, 105, 63, 87, 53, 18, 93, 51, 103, 120, 118, 28, 117, 39, 54, 108, 9, 26, 96, 57]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [8, 89, 56, 40, 50, 81, 47, 46, 111, 68, 29, 30, 105, 63, 87, 53, 18, 93, 51, 103, 120, 118, 28, 117, 39, 54, 108, 9, 26, 96, 57]
> Taille du cycle à casser : 31
> Nouvelle contrainte : x[8,89] + x[89,56] + x[56,40] + x[40,50] + x[50,81] + x[81,47] + x[47,46] + x[46,111] + x[111,68] + x[68,29] + x[29,30] + x[30,105] + x[105,63] + x[63,87] + x[87,53] + x[53,18] + x[18,93] + x[93,51] + x[51,103] + x[103,120] + x[120,118] + x[118,28] + x[28,117] + x[117,39] + x[39,54] + x[54,108] + x[108,9] + x[9,26] + x[26,96] + x[96,57] + x[57,8] ≤ 30
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 72) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 56) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 50) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 57) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 108) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 87) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 101) (89 -> 28) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 102) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 104) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 58) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 36) (119 -> 25) (120 -> 118) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 102, 73, 88, 101, 5, 85, 41, 3, 72, 66, 116, 7, 76, 99, 78, 92, 109, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 57, 8, 89, 28, 117, 39, 54, 108, 9, 26, 96, 29, 30, 105, 63, 87, 53, 18, 93, 51, 103, 120, 118, 36, 112, 31, 56, 40, 50, 81, 47, 46, 111, 68, 38, 74], [2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12]
> Taille du cycle à casser : 49
> Nouvelle contrainte : x[2,11] + x[11,75] + x[75,106] + x[106,27] + x[27,98] + x[98,80] + x[80,70] + x[70,64] + x[64,83] + x[83,4] + x[4,21] + x[21,44] + x[44,33] + x[33,115] + x[115,114] + x[114,32] + x[32,35] + x[35,22] + x[22,100] + x[100,69] + x[69,17] + x[17,113] + x[113,58] + x[58,90] + x[90,67] + x[67,23] + x[23,49] + x[49,24] + x[24,84] + x[84,52] + x[52,55] + x[55,61] + x[61,60] + x[60,10] + x[10,119] + x[119,25] + x[25,42] + x[42,48] + x[48,13] + x[13,19] + x[19,86] + x[86,15] + x[15,82] + x[82,77] + x[77,37] + x[37,14] + x[14,110] + x[110,12] + x[12,2] ≤ 48
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 62) (2 -> 11) (3 -> 87) (4 -> 21) (5 -> 85) (6 -> 34) (7 -> 76) (8 -> 89) (9 -> 26) (10 -> 119) (11 -> 75) (12 -> 2) (13 -> 19) (14 -> 110) (15 -> 82) (16 -> 91) (17 -> 113) (18 -> 93) (19 -> 86) (20 -> 45) (21 -> 44) (22 -> 100) (23 -> 49) (24 -> 84) (25 -> 42) (26 -> 96) (27 -> 98) (28 -> 117) (29 -> 30) (30 -> 105) (31 -> 56) (32 -> 35) (33 -> 115) (34 -> 94) (35 -> 22) (36 -> 112) (37 -> 14) (38 -> 74) (39 -> 54) (40 -> 50) (41 -> 3) (42 -> 48) (43 -> 97) (44 -> 33) (45 -> 58) (46 -> 111) (47 -> 46) (48 -> 13) (49 -> 24) (50 -> 81) (51 -> 103) (52 -> 55) (53 -> 18) (54 -> 102) (55 -> 61) (56 -> 40) (57 -> 8) (58 -> 90) (59 -> 43) (60 -> 10) (61 -> 60) (62 -> 107) (63 -> 104) (64 -> 83) (65 -> 95) (66 -> 116) (67 -> 23) (68 -> 38) (69 -> 17) (70 -> 64) (71 -> 6) (72 -> 66) (73 -> 88) (74 -> 1) (75 -> 106) (76 -> 99) (77 -> 37) (78 -> 92) (79 -> 16) (80 -> 70) (81 -> 47) (82 -> 77) (83 -> 4) (84 -> 52) (85 -> 41) (86 -> 15) (87 -> 53) (88 -> 36) (89 -> 28) (90 -> 67) (91 -> 20) (92 -> 109) (93 -> 51) (94 -> 79) (95 -> 59) (96 -> 29) (97 -> 72) (98 -> 80) (99 -> 78) (100 -> 69) (101 -> 5) (102 -> 73) (103 -> 120) (104 -> 71) (105 -> 63) (106 -> 27) (107 -> 65) (108 -> 9) (109 -> 118) (110 -> 12) (111 -> 68) (112 -> 31) (113 -> 101) (114 -> 32) (115 -> 114) (116 -> 7) (117 -> 39) (118 -> 108) (119 -> 25) (120 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 107, 65, 95, 59, 43, 97, 72, 66, 116, 7, 76, 99, 78, 92, 109, 118, 108, 9, 26, 96, 29, 30, 105, 63, 104, 71, 6, 34, 94, 79, 16, 91, 20, 45, 58, 90, 67, 23, 49, 24, 84, 52, 55, 61, 60, 10, 119, 25, 42, 48, 13, 19, 86, 15, 82, 77, 37, 14, 110, 12, 2, 11, 75, 106, 27, 98, 80, 70, 64, 83, 4, 21, 44, 33, 115, 114, 32, 35, 22, 100, 69, 17, 113, 101, 5, 85, 41, 3, 87, 53, 18, 93, 51, 103, 120, 57, 8, 89, 28, 117, 39, 54, 102, 73, 88, 36, 112, 31, 56, 40, 50, 81, 47, 46, 111, 68, 38, 74]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 103.0
> Nombre d'itération nécéssaires : 11
> Nombre de contraintes ajoutées : 10
> Ordre de parcours des drônes : 
1 -> 62 -> 107 -> 65 -> 95 -> 59 -> 43 -> 97 -> 72 -> 66 -> 116 -> 7 -> 76 -> 99 -> 78 -> 92 -> 109 -> 118 -> 108 -> 9 -> 26 -> 96 -> 29 -> 30 -> 105 -> 63 -> 104 -> 71 -> 6 -> 34 -> 94 -> 79 -> 16 -> 91 -> 20 -> 45 -> 58 -> 90 -> 67 -> 23 -> 49 -> 24 -> 84 -> 52 -> 55 -> 61 -> 60 -> 10 -> 119 -> 25 -> 42 -> 48 -> 13 -> 19 -> 86 -> 15 -> 82 -> 77 -> 37 -> 14 -> 110 -> 12 -> 2 -> 11 -> 75 -> 106 -> 27 -> 98 -> 80 -> 70 -> 64 -> 83 -> 4 -> 21 -> 44 -> 33 -> 115 -> 114 -> 32 -> 35 -> 22 -> 100 -> 69 -> 17 -> 113 -> 101 -> 5 -> 85 -> 41 -> 3 -> 87 -> 53 -> 18 -> 93 -> 51 -> 103 -> 120 -> 57 -> 8 -> 89 -> 28 -> 117 -> 39 -> 54 -> 102 -> 73 -> 88 -> 36 -> 112 -> 31 -> 56 -> 40 -> 50 -> 81 -> 47 -> 46 -> 111 -> 68 -> 38 -> 74 -> 1. 
