Résolution exacte pour plat/plat60.dat points à visiter :
Résolution d'initiale :  
> temps total = 102.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 20) (19 -> 42) (20 -> 18) (21 -> 1) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 16) (39 -> 13) (40 -> 11) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21], [2, 32], [3, 37], [4, 27], [5, 30], [6, 52], [7, 50], [8, 56], [9, 46], [10, 35], [11, 40], [12, 44], [13, 39], [14, 36], [15, 24], [16, 38], [17, 58], [18, 20], [19, 42], [22, 41], [23, 45], [25, 60], [26, 48], [28, 49], [29, 43], [31, 47], [33, 54], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 30
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 21]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,21] + x[21,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 25) (19 -> 42) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 8) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 3) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 8, 56, 6, 52, 3, 37, 20, 18, 25, 60, 16, 38], [2, 32], [4, 27], [5, 30], [7, 50], [9, 46], [10, 35], [12, 44], [13, 39], [14, 36], [15, 24], [17, 58], [19, 42], [22, 41], [23, 45], [26, 48], [28, 49], [29, 43], [31, 47], [33, 54], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 32]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,32] + x[32,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 32) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 25) (19 -> 42) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 20) (38 -> 1) (39 -> 46) (40 -> 8) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 3) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 8, 56, 6, 52, 3, 37, 20, 18, 25, 60, 16, 38], [2, 13, 39, 46, 9, 32], [4, 27], [5, 30], [7, 50], [10, 35], [12, 44], [14, 36], [15, 24], [17, 58], [19, 42], [22, 41], [23, 45], [26, 48], [28, 49], [29, 43], [31, 47], [33, 54], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [4, 27]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,27] + x[27,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 116.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 52) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 40) (9 -> 46) (10 -> 35) (11 -> 21) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 60) (17 -> 32) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 48) (27 -> 33) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 16) (39 -> 26) (40 -> 11) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 31) (48 -> 4) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 58) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 16, 60, 25, 18, 20, 37, 3, 52, 6, 56, 8, 40, 11, 21], [2, 13, 39, 26, 48, 4, 27, 33, 54, 58, 17, 32], [5, 30], [7, 50], [9, 46], [10, 35], [12, 44], [14, 36], [15, 24], [19, 42], [22, 41], [23, 45], [28, 49], [29, 43], [31, 47], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [5, 30]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,30] + x[30,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 117.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 48) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 39) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 17) (33 -> 27) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 54) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 38], [2, 32, 17, 58, 54, 33, 27, 4, 48, 26, 39, 13], [7, 50], [9, 46], [10, 35], [12, 44], [14, 36], [15, 24], [22, 41], [23, 45], [28, 49], [29, 43], [31, 47], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [7, 50]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,50] + x[50,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 32) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 7) (37 -> 20) (38 -> 1) (39 -> 46) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 26) (48 -> 4) (49 -> 28) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 38], [2, 13, 39, 46, 9, 32], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [10, 35], [12, 44], [15, 24], [17, 58], [22, 41], [23, 45], [28, 49], [29, 43], [33, 54], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [10, 35]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,35] + x[35,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 122.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 48) (5 -> 30) (6 -> 52) (7 -> 36) (8 -> 56) (9 -> 46) (10 -> 25) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 27) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 20) (19 -> 35) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 47) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 50) (32 -> 9) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 35, 10, 25, 60, 16, 38], [2, 32, 9, 46, 39, 13], [3, 37], [4, 48, 26, 47, 31, 50, 7, 36, 14, 27], [6, 52], [8, 56], [12, 44], [15, 24], [17, 58], [18, 20], [22, 41], [23, 45], [28, 49], [29, 43], [33, 54], [34, 59], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [3, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,37] + x[37,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 122.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 48) (5 -> 30) (6 -> 56) (7 -> 36) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 27) (15 -> 24) (16 -> 38) (17 -> 58) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 47) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 50) (32 -> 9) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 14) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 54) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 8) (57 -> 53) (58 -> 17) (59 -> 23) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 38], [2, 32, 9, 46, 39, 13], [4, 48, 26, 47, 31, 50, 7, 36, 14, 27], [10, 35, 34, 59, 23, 45, 54, 33], [12, 44], [15, 24], [17, 58], [22, 41], [28, 49], [29, 43], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [12, 44]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,44] + x[44,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 125.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 8) (4 -> 27) (5 -> 40) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 32) (10 -> 25) (11 -> 21) (12 -> 59) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 60) (17 -> 58) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 7) (37 -> 3) (38 -> 44) (39 -> 46) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 9) (47 -> 26) (48 -> 4) (49 -> 28) (50 -> 31) (51 -> 55) (52 -> 19) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 44, 12, 59, 34, 35, 10, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [2, 13, 39, 46, 9, 32], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [15, 24], [16, 60], [17, 58], [22, 41], [23, 45], [28, 49], [29, 43], [33, 54], [51, 55], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [15, 24]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,24] + x[24,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 127.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 52) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 51) (16 -> 60) (17 -> 58) (18 -> 25) (19 -> 24) (20 -> 37) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 7) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 38) (45 -> 23) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 28) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 57) (54 -> 33) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 24, 15, 51, 55, 53, 57, 9, 46, 39, 13, 2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 38], [3, 52, 6, 56, 8], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [16, 60], [18, 25], [20, 37], [22, 41], [23, 45], [28, 49], [29, 43]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [16, 60]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,60] + x[60,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 127.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 8) (4 -> 27) (5 -> 30) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 32) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 51) (16 -> 60) (17 -> 58) (18 -> 20) (19 -> 24) (20 -> 37) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 2) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 7) (37 -> 38) (38 -> 1) (39 -> 46) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 16) (45 -> 54) (46 -> 9) (47 -> 26) (48 -> 4) (49 -> 28) (50 -> 31) (51 -> 55) (52 -> 3) (53 -> 57) (54 -> 33) (55 -> 23) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 12) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 24, 15, 51, 55, 23, 45, 54, 33, 10, 35, 34, 59, 12, 44, 16, 60, 25, 18, 20, 37, 38], [2, 13, 39, 46, 9, 32], [3, 8, 56, 6, 52], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [17, 58], [22, 41], [28, 49], [29, 43], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [17, 58]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,58] + x[58,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 127.0
   Permutations :
(1 -> 38) (2 -> 32) (3 -> 8) (4 -> 48) (5 -> 40) (6 -> 52) (7 -> 36) (8 -> 56) (9 -> 46) (10 -> 33) (11 -> 21) (12 -> 59) (13 -> 2) (14 -> 27) (15 -> 51) (16 -> 60) (17 -> 22) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 47) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 50) (32 -> 9) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 44) (39 -> 13) (40 -> 11) (41 -> 24) (42 -> 30) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 19) (53 -> 57) (54 -> 58) (55 -> 53) (56 -> 6) (57 -> 16) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 44, 12, 59, 34, 35, 10, 33, 54, 58, 17, 22, 41, 24, 15, 51, 55, 53, 57, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [2, 32, 9, 46, 39, 13], [4, 48, 26, 47, 31, 50, 7, 36, 14, 27], [23, 45], [28, 49], [29, 43]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [23, 45]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,45] + x[45,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 8) (4 -> 48) (5 -> 40) (6 -> 52) (7 -> 36) (8 -> 56) (9 -> 32) (10 -> 33) (11 -> 21) (12 -> 59) (13 -> 39) (14 -> 27) (15 -> 51) (16 -> 60) (17 -> 22) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 18) (26 -> 47) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 50) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 16) (39 -> 46) (40 -> 11) (41 -> 24) (42 -> 30) (43 -> 29) (44 -> 12) (45 -> 44) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 19) (53 -> 57) (54 -> 58) (55 -> 23) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [2, 13, 39, 46, 9, 32], [4, 48, 26, 47, 31, 50, 7, 36, 14, 27], [10, 33, 54, 58, 17, 22, 41, 24, 15, 51, 55, 23, 45, 44, 12, 59, 34, 35], [28, 49], [29, 43], [53, 57]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [28, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,49] + x[49,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 130.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 8) (4 -> 27) (5 -> 40) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 57) (10 -> 33) (11 -> 21) (12 -> 44) (13 -> 39) (14 -> 36) (15 -> 24) (16 -> 60) (17 -> 32) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 55) (24 -> 35) (25 -> 18) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 7) (37 -> 3) (38 -> 16) (39 -> 46) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 29) (44 -> 45) (45 -> 23) (46 -> 9) (47 -> 26) (48 -> 4) (49 -> 12) (50 -> 31) (51 -> 15) (52 -> 19) (53 -> 28) (54 -> 58) (55 -> 51) (56 -> 6) (57 -> 53) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [2, 13, 39, 46, 9, 57, 53, 28, 49, 12, 44, 45, 23, 55, 51, 15, 24, 35, 10, 33, 54, 58, 17, 32], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [22, 41], [29, 43], [34, 59]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [22, 41]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,41] + x[41,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 48) (5 -> 30) (6 -> 56) (7 -> 49) (8 -> 3) (9 -> 32) (10 -> 33) (11 -> 40) (12 -> 59) (13 -> 1) (14 -> 36) (15 -> 24) (16 -> 44) (17 -> 58) (18 -> 20) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 17) (23 -> 55) (24 -> 41) (25 -> 60) (26 -> 47) (27 -> 4) (28 -> 53) (29 -> 43) (30 -> 42) (31 -> 50) (32 -> 2) (33 -> 27) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 38) (38 -> 16) (39 -> 46) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 15) (52 -> 6) (53 -> 57) (54 -> 45) (55 -> 51) (56 -> 8) (57 -> 9) (58 -> 54) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 38, 16, 44, 12, 59, 34, 35, 10, 33, 27, 4, 48, 26, 47, 31, 50, 7, 49, 28, 53, 57, 9, 32, 2, 13], [14, 36], [15, 24, 41, 22, 17, 58, 54, 45, 23, 55, 51], [18, 20], [25, 60], [29, 43], [39, 46]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [14, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,36] + x[36,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 13) (2 -> 32) (3 -> 8) (4 -> 27) (5 -> 40) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 57) (10 -> 33) (11 -> 21) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 51) (16 -> 38) (17 -> 22) (18 -> 20) (19 -> 42) (20 -> 18) (21 -> 1) (22 -> 41) (23 -> 59) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 9) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 7) (37 -> 3) (38 -> 37) (39 -> 46) (40 -> 11) (41 -> 24) (42 -> 30) (43 -> 29) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 12) (50 -> 31) (51 -> 55) (52 -> 19) (53 -> 28) (54 -> 58) (55 -> 53) (56 -> 6) (57 -> 16) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 13, 2, 32, 9, 57, 16, 38, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [4, 27, 14, 36, 7, 50, 31, 47, 26, 48], [10, 33, 54, 58, 17, 22, 41, 24, 15, 51, 55, 53, 28, 49, 12, 44, 45, 23, 59, 34, 35], [18, 20], [25, 60], [29, 43], [39, 46]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [18, 20]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,20] + x[20,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 38) (2 -> 32) (3 -> 8) (4 -> 48) (5 -> 40) (6 -> 52) (7 -> 49) (8 -> 56) (9 -> 46) (10 -> 35) (11 -> 21) (12 -> 44) (13 -> 2) (14 -> 27) (15 -> 24) (16 -> 60) (17 -> 58) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 36) (23 -> 55) (24 -> 41) (25 -> 18) (26 -> 47) (27 -> 4) (28 -> 53) (29 -> 43) (30 -> 5) (31 -> 50) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 14) (37 -> 3) (38 -> 16) (39 -> 13) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 29) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 15) (52 -> 19) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 6) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 45, 23, 55, 51, 15, 24, 41, 22, 36, 14, 27, 4, 48, 26, 47, 31, 50, 7, 49, 28, 53, 57, 9, 46, 39, 13], [29, 43]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [29, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[29,43] + x[43,29] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 8) (4 -> 48) (5 -> 40) (6 -> 52) (7 -> 49) (8 -> 56) (9 -> 57) (10 -> 33) (11 -> 21) (12 -> 59) (13 -> 39) (14 -> 27) (15 -> 24) (16 -> 60) (17 -> 32) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 36) (23 -> 45) (24 -> 41) (25 -> 18) (26 -> 47) (27 -> 4) (28 -> 53) (29 -> 23) (30 -> 5) (31 -> 50) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 43) (39 -> 46) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 29) (44 -> 12) (45 -> 44) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 15) (52 -> 19) (53 -> 55) (54 -> 58) (55 -> 51) (56 -> 6) (57 -> 16) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 43, 29, 23, 45, 44, 12, 59, 34, 35, 10, 33, 54, 58, 17, 32, 2, 13, 39, 46, 9, 57, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [4, 48, 26, 47, 31, 50, 7, 49, 28, 53, 55, 51, 15, 24, 41, 22, 36, 14, 27]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [4, 48, 26, 47, 31, 50, 7, 49, 28, 53, 55, 51, 15, 24, 41, 22, 36, 14, 27]
> Taille du cycle à casser : 19
> Nouvelle contrainte : x[4,48] + x[48,26] + x[26,47] + x[47,31] + x[31,50] + x[50,7] + x[7,49] + x[49,28] + x[28,53] + x[53,55] + x[55,51] + x[51,15] + x[15,24] + x[24,41] + x[41,22] + x[22,36] + x[36,14] + x[14,27] + x[27,4] ≤ 18
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 13) (2 -> 32) (3 -> 8) (4 -> 27) (5 -> 40) (6 -> 52) (7 -> 49) (8 -> 56) (9 -> 46) (10 -> 35) (11 -> 21) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 47) (16 -> 60) (17 -> 58) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 41) (23 -> 29) (24 -> 15) (25 -> 18) (26 -> 48) (27 -> 14) (28 -> 53) (29 -> 43) (30 -> 5) (31 -> 50) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 22) (37 -> 3) (38 -> 16) (39 -> 26) (40 -> 11) (41 -> 24) (42 -> 30) (43 -> 38) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 4) (49 -> 28) (50 -> 7) (51 -> 55) (52 -> 19) (53 -> 57) (54 -> 33) (55 -> 51) (56 -> 6) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 13, 2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 45, 23, 29, 43, 38, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [4, 27, 14, 36, 22, 41, 24, 15, 47, 31, 50, 7, 49, 28, 53, 57, 9, 46, 39, 26, 48], [51, 55]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [51, 55]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[51,55] + x[55,51] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 57) (10 -> 33) (11 -> 40) (12 -> 59) (13 -> 1) (14 -> 36) (15 -> 51) (16 -> 38) (17 -> 32) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 45) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 23) (30 -> 42) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 22) (37 -> 20) (38 -> 43) (39 -> 46) (40 -> 5) (41 -> 24) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 44) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 58) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 38, 43, 29, 23, 45, 44, 12, 59, 34, 35, 10, 33, 54, 58, 17, 32, 2, 13], [4, 27, 14, 36, 22, 41, 24, 15, 51, 55, 53, 28, 49, 7, 50, 31, 47, 26, 48], [9, 57], [39, 46]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [9, 57]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,57] + x[57,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 51) (16 -> 57) (17 -> 58) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 29) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 22) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 24) (42 -> 19) (43 -> 38) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 33) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 57, 9, 46, 39, 13, 2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 45, 23, 29, 43, 38], [4, 27, 14, 36, 22, 41, 24, 15, 51, 55, 53, 28, 49, 7, 50, 31, 47, 26, 48]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [4, 27, 14, 36, 22, 41, 24, 15, 51, 55, 53, 28, 49, 7, 50, 31, 47, 26, 48]
> Taille du cycle à casser : 19
> Nouvelle contrainte : x[4,27] + x[27,14] + x[14,36] + x[36,22] + x[22,41] + x[41,24] + x[24,15] + x[15,51] + x[51,55] + x[55,53] + x[53,28] + x[28,49] + x[49,7] + x[7,50] + x[50,31] + x[31,47] + x[47,26] + x[26,48] + x[48,4] ≤ 18
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 38) (2 -> 13) (3 -> 8) (4 -> 50) (5 -> 40) (6 -> 52) (7 -> 49) (8 -> 56) (9 -> 57) (10 -> 33) (11 -> 21) (12 -> 59) (13 -> 39) (14 -> 27) (15 -> 24) (16 -> 60) (17 -> 32) (18 -> 20) (19 -> 42) (20 -> 37) (21 -> 1) (22 -> 36) (23 -> 45) (24 -> 41) (25 -> 18) (26 -> 48) (27 -> 4) (28 -> 53) (29 -> 23) (30 -> 5) (31 -> 47) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 3) (38 -> 43) (39 -> 46) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 29) (44 -> 12) (45 -> 44) (46 -> 9) (47 -> 31) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 15) (52 -> 19) (53 -> 55) (54 -> 58) (55 -> 51) (56 -> 6) (57 -> 16) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 38, 43, 29, 23, 45, 44, 12, 59, 34, 35, 10, 33, 54, 58, 17, 32, 2, 13, 39, 46, 9, 57, 16, 60, 25, 18, 20, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21], [4, 50, 7, 49, 28, 53, 55, 51, 15, 24, 41, 22, 36, 14, 27], [26, 48], [31, 47]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [26, 48]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,48] + x[48,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 48) (5 -> 30) (6 -> 56) (7 -> 49) (8 -> 3) (9 -> 57) (10 -> 33) (11 -> 40) (12 -> 59) (13 -> 39) (14 -> 27) (15 -> 24) (16 -> 60) (17 -> 32) (18 -> 20) (19 -> 52) (20 -> 31) (21 -> 11) (22 -> 36) (23 -> 45) (24 -> 41) (25 -> 18) (26 -> 47) (27 -> 4) (28 -> 53) (29 -> 23) (30 -> 42) (31 -> 50) (32 -> 2) (33 -> 54) (34 -> 35) (35 -> 10) (36 -> 14) (37 -> 38) (38 -> 1) (39 -> 46) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 12) (45 -> 44) (46 -> 9) (47 -> 15) (48 -> 26) (49 -> 28) (50 -> 7) (51 -> 43) (52 -> 6) (53 -> 55) (54 -> 58) (55 -> 51) (56 -> 8) (57 -> 16) (58 -> 17) (59 -> 34) (60 -> 25) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 38], [2, 13, 39, 46, 9, 57, 16, 60, 25, 18, 20, 31, 50, 7, 49, 28, 53, 55, 51, 43, 29, 23, 45, 44, 12, 59, 34, 35, 10, 33, 54, 58, 17, 32], [4, 48, 26, 47, 15, 24, 41, 22, 36, 14, 27]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [4, 48, 26, 47, 15, 24, 41, 22, 36, 14, 27]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[4,48] + x[48,26] + x[26,47] + x[47,15] + x[15,24] + x[24,41] + x[41,22] + x[22,36] + x[36,14] + x[14,27] + x[27,4] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 52) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 51) (16 -> 57) (17 -> 58) (18 -> 25) (19 -> 24) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 29) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 47) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 22) (37 -> 20) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 56) (42 -> 19) (43 -> 38) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 33) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 24, 15, 51, 55, 53, 28, 49, 7, 50, 31, 47, 26, 48, 4, 27, 14, 36, 22, 41, 56, 8, 3, 37, 20, 18, 25, 60, 16, 57, 9, 46, 39, 13, 2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 45, 23, 29, 43, 38], [6, 52]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [6, 52]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,52] + x[52,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 21) (2 -> 32) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 2) (14 -> 36) (15 -> 47) (16 -> 57) (17 -> 58) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 29) (24 -> 15) (25 -> 60) (26 -> 48) (27 -> 14) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 20) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 22) (37 -> 38) (38 -> 1) (39 -> 13) (40 -> 5) (41 -> 24) (42 -> 19) (43 -> 51) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 26) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 33) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 38], [2, 32, 17, 58, 54, 33, 10, 35, 34, 59, 12, 44, 45, 23, 29, 43, 51, 55, 53, 28, 49, 7, 50, 31, 20, 18, 25, 60, 16, 57, 9, 46, 39, 13], [4, 27, 14, 36, 22, 41, 24, 15, 47, 26, 48]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [4, 27, 14, 36, 22, 41, 24, 15, 47, 26, 48]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[4,27] + x[27,14] + x[14,36] + x[36,22] + x[22,41] + x[41,24] + x[24,15] + x[15,47] + x[47,26] + x[26,48] + x[48,4] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 52) (4 -> 48) (5 -> 30) (6 -> 56) (7 -> 36) (8 -> 3) (9 -> 32) (10 -> 33) (11 -> 40) (12 -> 44) (13 -> 1) (14 -> 27) (15 -> 51) (16 -> 57) (17 -> 22) (18 -> 25) (19 -> 35) (20 -> 18) (21 -> 11) (22 -> 41) (23 -> 29) (24 -> 15) (25 -> 60) (26 -> 47) (27 -> 4) (28 -> 49) (29 -> 43) (30 -> 42) (31 -> 50) (32 -> 2) (33 -> 54) (34 -> 59) (35 -> 10) (36 -> 14) (37 -> 20) (38 -> 37) (39 -> 46) (40 -> 5) (41 -> 24) (42 -> 19) (43 -> 38) (44 -> 45) (45 -> 23) (46 -> 39) (47 -> 31) (48 -> 26) (49 -> 12) (50 -> 7) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 58) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 17) (59 -> 34) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 35, 10, 33, 54, 58, 17, 22, 41, 24, 15, 51, 55, 53, 28, 49, 12, 44, 45, 23, 29, 43, 38, 37, 20, 18, 25, 60, 16, 57, 9, 32, 2, 13], [3, 52, 6, 56, 8], [4, 48, 26, 47, 31, 50, 7, 36, 14, 27], [34, 59], [39, 46]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [34, 59]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,59] + x[59,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 21) (2 -> 13) (3 -> 37) (4 -> 27) (5 -> 30) (6 -> 56) (7 -> 50) (8 -> 3) (9 -> 46) (10 -> 35) (11 -> 40) (12 -> 44) (13 -> 1) (14 -> 51) (15 -> 24) (16 -> 57) (17 -> 32) (18 -> 25) (19 -> 52) (20 -> 18) (21 -> 11) (22 -> 36) (23 -> 45) (24 -> 41) (25 -> 60) (26 -> 48) (27 -> 33) (28 -> 49) (29 -> 23) (30 -> 42) (31 -> 47) (32 -> 2) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 14) (37 -> 20) (38 -> 43) (39 -> 26) (40 -> 5) (41 -> 22) (42 -> 19) (43 -> 29) (44 -> 38) (45 -> 54) (46 -> 39) (47 -> 15) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 6) (53 -> 28) (54 -> 58) (55 -> 53) (56 -> 8) (57 -> 9) (58 -> 17) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 21, 11, 40, 5, 30, 42, 19, 52, 6, 56, 8, 3, 37, 20, 18, 25, 60, 16, 57, 9, 46, 39, 26, 48, 4, 27, 33, 10, 35, 34, 59, 12, 44, 38, 43, 29, 23, 45, 54, 58, 17, 32, 2, 13], [7, 50, 31, 47, 15, 24, 41, 22, 36, 14, 51, 55, 53, 28, 49]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [7, 50, 31, 47, 15, 24, 41, 22, 36, 14, 51, 55, 53, 28, 49]
> Taille du cycle à casser : 15
> Nouvelle contrainte : x[7,50] + x[50,31] + x[31,47] + x[47,15] + x[15,24] + x[24,41] + x[41,22] + x[22,36] + x[36,14] + x[14,51] + x[51,55] + x[55,53] + x[53,28] + x[28,49] + x[49,7] ≤ 14
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 13) (2 -> 32) (3 -> 8) (4 -> 27) (5 -> 40) (6 -> 52) (7 -> 50) (8 -> 56) (9 -> 46) (10 -> 35) (11 -> 21) (12 -> 44) (13 -> 2) (14 -> 20) (15 -> 24) (16 -> 57) (17 -> 58) (18 -> 25) (19 -> 42) (20 -> 18) (21 -> 1) (22 -> 36) (23 -> 29) (24 -> 41) (25 -> 60) (26 -> 48) (27 -> 33) (28 -> 49) (29 -> 43) (30 -> 5) (31 -> 47) (32 -> 17) (33 -> 10) (34 -> 59) (35 -> 34) (36 -> 14) (37 -> 3) (38 -> 37) (39 -> 26) (40 -> 11) (41 -> 22) (42 -> 30) (43 -> 51) (44 -> 38) (45 -> 23) (46 -> 39) (47 -> 15) (48 -> 4) (49 -> 7) (50 -> 31) (51 -> 55) (52 -> 19) (53 -> 28) (54 -> 45) (55 -> 53) (56 -> 6) (57 -> 9) (58 -> 54) (59 -> 12) (60 -> 16) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 13, 2, 32, 17, 58, 54, 45, 23, 29, 43, 51, 55, 53, 28, 49, 7, 50, 31, 47, 15, 24, 41, 22, 36, 14, 20, 18, 25, 60, 16, 57, 9, 46, 39, 26, 48, 4, 27, 33, 10, 35, 34, 59, 12, 44, 38, 37, 3, 8, 56, 6, 52, 19, 42, 30, 5, 40, 11, 21]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 134.0
> Nombre d'itération nécéssaires : 28
> Nombre de contraintes ajoutées : 27
> Ordre de parcours des drônes : 
1 -> 13 -> 2 -> 32 -> 17 -> 58 -> 54 -> 45 -> 23 -> 29 -> 43 -> 51 -> 55 -> 53 -> 28 -> 49 -> 7 -> 50 -> 31 -> 47 -> 15 -> 24 -> 41 -> 22 -> 36 -> 14 -> 20 -> 18 -> 25 -> 60 -> 16 -> 57 -> 9 -> 46 -> 39 -> 26 -> 48 -> 4 -> 27 -> 33 -> 10 -> 35 -> 34 -> 59 -> 12 -> 44 -> 38 -> 37 -> 3 -> 8 -> 56 -> 6 -> 52 -> 19 -> 42 -> 30 -> 5 -> 40 -> 11 -> 21 -> 1. 
