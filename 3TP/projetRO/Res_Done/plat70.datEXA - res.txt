Résolution exacte pour plat/plat70.dat points à visiter :
Résolution d'initiale :  
> temps total = 132.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 2) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 58) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4], [2, 16], [3, 46], [5, 23], [6, 59], [7, 51], [8, 38], [9, 10], [11, 36, 18, 29], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [19, 50], [20, 33], [21, 49], [22, 27], [24, 48], [25, 64], [26, 32], [28, 39], [30, 70], [31, 65], [35, 41], [37, 40], [44, 55], [45, 52], [53, 69], [54, 62], [56, 57], [58, 68], [60, 67], [61, 63]]
> Nombre de cycle(s) trouvé(s) : 34
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 4]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,4] + x[4,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 46) (4 -> 67) (5 -> 22) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 58) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 2) (17 -> 43) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 39) (24 -> 48) (25 -> 29) (26 -> 32) (27 -> 28) (28 -> 27) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 1) (38 -> 8) (39 -> 64) (40 -> 37) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 23, 39, 64, 25, 29, 11, 58, 68, 70, 30, 40, 37], [2, 16], [3, 46], [5, 22], [6, 59], [7, 51], [8, 38], [9, 10], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [18, 36], [19, 50], [20, 33], [21, 49], [24, 48], [26, 32], [27, 28], [31, 65], [35, 41], [44, 55], [45, 52], [53, 69], [54, 62], [56, 57], [61, 63]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 16]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,16] + x[16,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 58) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 48) (25 -> 29) (26 -> 32) (27 -> 22) (28 -> 27) (29 -> 25) (30 -> 2) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 56) (58 -> 11) (59 -> 6) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 39) (65 -> 31) (66 -> 12) (67 -> 4) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 39, 28, 27, 22, 5, 23, 60, 67, 4], [3, 46], [6, 59], [7, 51], [8, 38], [9, 10], [11, 58], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [18, 36], [19, 50], [20, 33], [21, 49], [24, 48], [25, 29], [26, 32], [31, 65], [35, 41], [44, 55], [45, 52], [53, 69], [54, 62], [56, 57], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [3, 46]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,46] + x[46,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 60) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 46) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 4) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4], [3, 57, 46], [5, 23], [6, 59], [7, 51], [8, 38], [9, 10], [11, 29], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [18, 36], [19, 50], [21, 49], [22, 27], [24, 48], [26, 32], [28, 39], [31, 65], [35, 41], [45, 52], [53, 69], [54, 62], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [5, 23]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,23] + x[23,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 22) (28 -> 27) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 60) (45 -> 52) (46 -> 57) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 4) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4], [3, 46, 57], [5, 23, 39, 28, 27, 22], [6, 59], [7, 51], [8, 38], [9, 10], [11, 36, 18, 29], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [19, 50], [21, 49], [24, 48], [26, 32], [31, 65], [35, 41], [45, 52], [53, 69], [54, 62], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [6, 59]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,59] + x[59,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 22) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 28) (28 -> 39) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 35) (42 -> 13) (43 -> 17) (44 -> 60) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 4) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 46, 3, 57, 6, 59, 4], [5, 22, 27, 28, 39, 23], [7, 51], [8, 38], [9, 10], [11, 36, 18, 29], [12, 66], [13, 42], [14, 34], [15, 47], [17, 43], [19, 50], [21, 49], [24, 48], [26, 32], [31, 65], [35, 41], [45, 52], [53, 69], [54, 62], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [7, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,51] + x[51,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 144.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 22) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 28) (28 -> 39) (29 -> 18) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 4) (34 -> 14) (35 -> 6) (36 -> 11) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 51) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 46) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 26) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 4], [3, 57, 46], [5, 22, 27, 28, 39, 23], [6, 59, 35], [7, 17, 43, 24, 48, 15, 47, 54, 62, 26, 32, 41, 51], [8, 38], [9, 10], [11, 36], [12, 66], [13, 42], [14, 34], [18, 29], [19, 50], [21, 49], [31, 65], [44, 55], [45, 52], [53, 69], [56, 58], [60, 67], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [8, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,38] + x[38,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 46) (4 -> 33) (5 -> 22) (6 -> 57) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 38) (28 -> 39) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 11) (37 -> 1) (38 -> 8) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 35) (53 -> 69) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 33, 20, 25, 64, 16, 2, 30, 40, 37], [3, 46, 67, 60, 23, 5, 22, 27, 38, 8, 12, 66, 17, 7, 51, 41, 32, 26, 62, 45, 52, 35, 59, 6, 57], [9, 10], [11, 36], [13, 42], [14, 34], [15, 48], [18, 29], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [44, 55], [47, 54], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [9, 10]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,10] + x[10,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 46) (4 -> 10) (5 -> 22) (6 -> 57) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 18) (37 -> 1) (38 -> 8) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 35) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 10, 9, 44, 55, 33, 20, 25, 64, 16, 2, 30, 40, 37], [3, 46, 67, 60, 23, 5, 22, 27, 38, 8, 12, 66, 17, 7, 51, 41, 32, 26, 62, 45, 52, 35, 59, 6, 57], [11, 36, 18, 29], [13, 42], [14, 34], [15, 48], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [47, 54], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [13, 42]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,42] + x[42,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 149.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 57) (4 -> 10) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 44) (10 -> 9) (11 -> 36) (12 -> 8) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 39) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 52) (36 -> 11) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 51) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 62) (46 -> 3) (47 -> 15) (48 -> 13) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 10, 9, 44, 55, 33, 20, 25, 64, 16, 2, 30, 40, 37], [3, 57, 6, 59, 35, 52, 45, 62, 54, 47, 15, 48, 13, 42, 26, 32, 41, 51, 7, 17, 66, 12, 8, 38, 27, 22, 5, 23, 60, 67, 46], [11, 36], [14, 34], [18, 29], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [11, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,36] + x[36,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 149.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 57) (4 -> 10) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 44) (10 -> 9) (11 -> 36) (12 -> 8) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 52) (36 -> 18) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 51) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 62) (46 -> 3) (47 -> 15) (48 -> 13) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 10, 9, 44, 55, 33, 20, 25, 64, 16, 2, 30, 40, 37], [3, 57, 6, 59, 35, 52, 45, 62, 54, 47, 15, 48, 13, 42, 26, 32, 41, 51, 7, 17, 66, 12, 8, 38, 27, 22, 5, 23, 60, 67, 46], [11, 36, 18, 29], [14, 34], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [14, 34]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,34] + x[34,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 4) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 61) (15 -> 48) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 20) (26 -> 32) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 52) (36 -> 18) (37 -> 40) (38 -> 27) (39 -> 28) (40 -> 30) (41 -> 51) (42 -> 13) (43 -> 24) (44 -> 9) (45 -> 62) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 26) (63 -> 42) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 9, 10, 4], [3, 57, 6, 59, 35, 52, 45, 62, 26, 32, 41, 51, 7, 17, 66, 12, 8, 38, 27, 22, 5, 23, 60, 67, 46], [11, 29], [13, 34, 14, 61, 63, 42], [15, 48], [18, 36], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [47, 54], [53, 69], [56, 58], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [11, 29]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,29] + x[29,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 57) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 4) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 64) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 43) (25 -> 20) (26 -> 62) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 13) (35 -> 59) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 26) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 14) (52 -> 35) (53 -> 69) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 9, 10, 4], [3, 46, 67, 60, 23, 5, 22, 27, 38, 8, 12, 66, 17, 7, 51, 14, 34, 13, 42, 26, 62, 45, 52, 35, 59, 6, 57], [11, 36, 18, 29], [15, 48], [19, 50], [21, 49], [24, 43], [28, 39], [31, 65], [32, 41], [47, 54], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [15, 48]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,48] + x[48,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 57) (4 -> 18) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 8) (13 -> 42) (14 -> 51) (15 -> 48) (16 -> 64) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 30) (26 -> 62) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 34) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 13) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 9) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 36, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 5, 23, 60, 67, 46, 3, 57, 6, 59, 35, 41, 32, 26, 62, 54, 47, 15, 48, 13, 42, 63, 61, 9, 10, 2, 16, 64, 25, 30, 40, 37], [19, 50], [20, 33], [21, 49], [24, 43], [28, 39], [31, 65], [44, 55], [45, 52], [53, 69], [56, 58], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [19, 50]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,50] + x[50,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 46) (4 -> 18) (5 -> 22) (6 -> 57) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 28) (12 -> 66) (13 -> 48) (14 -> 61) (15 -> 47) (16 -> 64) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 43) (25 -> 20) (26 -> 32) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 59) (36 -> 34) (37 -> 1) (38 -> 8) (39 -> 23) (40 -> 37) (41 -> 35) (42 -> 13) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 36) (51 -> 19) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 44) (61 -> 63) (62 -> 26) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 28, 39, 23, 5, 22, 27, 38, 8, 12, 66, 17, 7, 51, 19, 50, 36, 34, 14, 61, 63, 42, 13, 48, 15, 47, 54, 62, 26, 32, 41, 35, 59, 6, 57, 3, 46, 67, 60, 44, 9, 10, 2, 30, 40, 37], [16, 64], [20, 25], [21, 49], [24, 43], [31, 65], [33, 55], [45, 52], [53, 69], [56, 58], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [16, 64]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,64] + x[64,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 152.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 23) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 4) (11 -> 29) (12 -> 8) (13 -> 48) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 51) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 20) (26 -> 42) (27 -> 22) (28 -> 39) (29 -> 18) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 13) (35 -> 59) (36 -> 50) (37 -> 40) (38 -> 27) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 6) (60 -> 67) (61 -> 14) (62 -> 26) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 9, 10, 4], [3, 57, 56, 58, 11, 29, 18, 36, 50, 19, 51, 7, 17, 66, 12, 8, 38, 27, 22, 5, 23, 60, 67, 46], [6, 35, 59], [13, 48, 15, 47, 54, 62, 26, 42, 63, 61, 14, 34], [21, 49], [24, 43], [28, 39], [31, 65], [32, 41], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [21, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,49] + x[49,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 154.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 57) (4 -> 18) (5 -> 23) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 8) (13 -> 48) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 29) (19 -> 51) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 60) (24 -> 43) (25 -> 20) (26 -> 42) (27 -> 22) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 13) (35 -> 59) (36 -> 50) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 67) (61 -> 14) (62 -> 26) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 36, 50, 19, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 60, 67, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [2, 16, 64, 25, 20, 33, 55, 44, 9, 10], [6, 35, 59], [13, 48, 15, 47, 54, 62, 26, 42, 63, 61, 14, 34], [24, 43], [28, 39], [31, 65], [32, 41], [45, 52], [53, 69]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [24, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,43] + x[43,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 26) (2 -> 10) (3 -> 57) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 51) (8 -> 38) (9 -> 44) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 37) (17 -> 7) (18 -> 4) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 28) (28 -> 39) (29 -> 18) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 36) (35 -> 59) (36 -> 8) (37 -> 40) (38 -> 27) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 22) (50 -> 13) (51 -> 19) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 6) (60 -> 67) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 26, 62, 54, 47, 15, 48, 24, 43, 17, 7, 51, 19, 50, 13, 42, 63, 61, 14, 34, 36, 8, 38, 27, 28, 39, 23, 60, 67, 46, 3, 57, 56, 58, 11, 29, 18, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16, 37, 40, 30], [5, 21, 49, 22], [6, 35, 59], [12, 66], [31, 65], [32, 41], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [12, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,66] + x[66,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 46) (4 -> 18) (5 -> 21) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 58) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 37) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 36) (35 -> 59) (36 -> 43) (37 -> 1) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 64) (42 -> 63) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 19) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 14) (62 -> 26) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 58, 56, 57, 3, 46, 67, 60, 23, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 7, 51, 19, 50, 13, 42, 63, 61, 14, 34, 36, 43, 24, 48, 15, 47, 54, 62, 26, 32, 41, 64, 25, 20, 33, 55, 44, 9, 10, 2, 16, 37], [6, 35, 59], [28, 39], [30, 40], [31, 65], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [28, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,39] + x[39,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 26) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 58) (12 -> 66) (13 -> 34) (14 -> 61) (15 -> 48) (16 -> 37) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 11) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 67) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 36) (51 -> 19) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 4) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 26, 62, 54, 47, 15, 48, 24, 43, 17, 7, 51, 19, 50, 36, 11, 58, 56, 57, 3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16, 37, 40, 30], [5, 22, 49, 21], [6, 35, 59], [13, 34, 14, 61, 63, 42], [18, 29], [31, 65], [32, 41], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [18, 29]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,29] + x[29,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 26) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 58) (12 -> 66) (13 -> 34) (14 -> 61) (15 -> 48) (16 -> 37) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 5) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 38) (28 -> 27) (29 -> 11) (30 -> 2) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 67) (47 -> 15) (48 -> 24) (49 -> 22) (50 -> 36) (51 -> 19) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 4) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 26, 62, 54, 47, 15, 48, 24, 43, 17, 7, 51, 19, 50, 36, 18, 29, 11, 58, 56, 57, 3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16, 37, 40, 30], [5, 21, 49, 22], [6, 35, 59], [13, 34, 14, 61, 63, 42], [31, 65], [32, 41], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [31, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[31,65] + x[65,31] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 156.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 57) (4 -> 1) (5 -> 22) (6 -> 59) (7 -> 28) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 43) (18 -> 4) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 60) (24 -> 48) (25 -> 64) (26 -> 42) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 11) (37 -> 16) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 36) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 39) (65 -> 19) (66 -> 17) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 16, 2, 10, 9, 44, 55, 33, 20, 25, 64, 39, 23, 60, 67, 46, 3, 57, 6, 59, 35, 41, 32, 26, 42, 13, 34, 14, 51, 7, 28, 27, 38, 8, 12, 66, 17, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 36, 11, 29, 18, 4], [5, 22, 49, 21], [30, 40], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [30, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,40] + x[40,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 156.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 57) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 50) (14 -> 34) (15 -> 47) (16 -> 2) (17 -> 7) (18 -> 4) (19 -> 65) (20 -> 25) (21 -> 49) (22 -> 5) (23 -> 39) (24 -> 48) (25 -> 64) (26 -> 42) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 67) (31 -> 60) (32 -> 41) (33 -> 20) (34 -> 36) (35 -> 59) (36 -> 43) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 19) (51 -> 14) (52 -> 45) (53 -> 69) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 26) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 67, 46, 3, 57, 56, 58, 11, 29, 18, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16], [5, 21, 49, 22], [6, 35, 59], [7, 51, 14, 34, 36, 43, 24, 48, 15, 47, 54, 62, 26, 42, 13, 50, 19, 65, 31, 60, 23, 39, 28, 27, 38, 8, 12, 66, 17], [32, 41], [45, 52], [53, 69], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [32, 41]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[32,41] + x[41,32] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 156.0
   Permutations :
(1 -> 4) (2 -> 30) (3 -> 46) (4 -> 10) (5 -> 23) (6 -> 35) (7 -> 51) (8 -> 38) (9 -> 44) (10 -> 9) (11 -> 58) (12 -> 8) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 22) (28 -> 7) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 13) (35 -> 59) (36 -> 18) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 63) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 67) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 36) (51 -> 41) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 31) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 19) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 10, 9, 44, 55, 33, 20, 25, 64, 16, 2, 30, 40, 37], [3, 46, 67, 60, 31, 65, 19, 50, 36, 18, 29, 11, 58, 56, 57], [5, 23, 39, 28, 7, 51, 41, 32, 26, 62, 54, 47, 15, 48, 24, 43, 17, 66, 12, 8, 38, 27, 22, 49, 21], [6, 35, 59], [13, 42, 63, 61, 14, 34], [45, 52], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [45, 52]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[45,52] + x[52,45] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 156.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 21) (6 -> 59) (7 -> 17) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 58) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 38) (28 -> 27) (29 -> 11) (30 -> 25) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 36) (35 -> 6) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 51) (42 -> 63) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 35) (60 -> 23) (61 -> 14) (62 -> 45) (63 -> 61) (64 -> 41) (65 -> 19) (66 -> 4) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 25, 20, 33, 55, 44, 9, 10, 2, 16, 64, 41, 51, 7, 17, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 42, 63, 61, 14, 34, 36, 18, 29, 11, 58, 56, 57, 3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [5, 21, 49, 22], [6, 59, 35], [26, 32], [53, 69], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [26, 32]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,32] + x[32,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 156.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 21) (6 -> 59) (7 -> 28) (8 -> 12) (9 -> 10) (10 -> 5) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 4) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 60) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 38) (28 -> 39) (29 -> 18) (30 -> 2) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 11) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 36) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 6) (58 -> 56) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 17) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 2, 16, 64, 25, 20, 33, 55, 44, 9, 10, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 36, 11, 29, 18, 4], [3, 57, 6, 59, 35, 41, 32, 26, 42, 13, 34, 14, 51, 7, 28, 39, 23, 60, 67, 46], [53, 69], [56, 58], [61, 63], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [53, 69]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,69] + x[69,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 157.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 57) (4 -> 1) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 61) (15 -> 48) (16 -> 64) (17 -> 7) (18 -> 4) (19 -> 65) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 20) (26 -> 62) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 25) (31 -> 52) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 6) (36 -> 50) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 13) (43 -> 36) (44 -> 9) (45 -> 69) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 45) (53 -> 46) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 35) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 22) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 25, 20, 33, 55, 44, 9, 10, 2, 16, 64, 22, 49, 21, 5, 23, 39, 28, 27, 38, 8, 12, 66, 17, 7, 51, 41, 32, 26, 62, 54, 47, 15, 48, 24, 43, 36, 50, 19, 65, 31, 52, 45, 69, 53, 46, 3, 57, 56, 58, 11, 29, 18, 4], [6, 59, 35], [13, 34, 14, 61, 63, 42], [60, 67], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [60, 67]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,67] + x[67,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 157.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 58) (12 -> 66) (13 -> 42) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 38) (28 -> 27) (29 -> 11) (30 -> 67) (31 -> 65) (32 -> 26) (33 -> 20) (34 -> 13) (35 -> 59) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 17) (44 -> 55) (45 -> 52) (46 -> 53) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 36) (51 -> 41) (52 -> 31) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 19) (66 -> 4) (67 -> 60) (68 -> 70) (69 -> 45) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16], [3, 46, 53, 69, 45, 52, 31, 65, 19, 50, 36, 18, 29, 11, 58, 56, 57], [5, 22, 49, 21], [6, 35, 59], [7, 51, 41, 32, 26, 62, 54, 47, 15, 48, 24, 43, 17], [13, 42, 63, 61, 14, 34], [68, 70]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [68, 70]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[68,70] + x[70,68] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 158.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 57) (4 -> 18) (5 -> 22) (6 -> 43) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 8) (13 -> 42) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 60) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 28) (28 -> 39) (29 -> 11) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 59) (36 -> 34) (37 -> 1) (38 -> 27) (39 -> 23) (40 -> 37) (41 -> 35) (42 -> 26) (43 -> 24) (44 -> 9) (45 -> 69) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 52) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 67) (61 -> 63) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 36, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 28, 39, 23, 60, 67, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [2, 16, 64, 25, 20, 33, 55, 44, 9, 10], [5, 22, 49, 21], [6, 43, 24, 48, 15, 47, 54, 62, 45, 69, 53, 52, 31, 65, 19, 50, 13, 42, 26, 32, 41, 35, 59], [61, 63]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [61, 63]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[61,63] + x[63,61] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 158.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 35) (7 -> 17) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 61) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 70) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 59) (36 -> 11) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 51) (42 -> 26) (43 -> 24) (44 -> 9) (45 -> 69) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 52) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 45) (63 -> 42) (64 -> 25) (65 -> 19) (66 -> 4) (67 -> 60) (68 -> 58) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [2, 16, 64, 25, 20, 33, 55, 44, 9, 10], [5, 22, 49, 21], [6, 35, 59], [7, 17, 43, 24, 48, 15, 47, 54, 62, 45, 69, 53, 52, 31, 65, 19, 50, 13, 34, 14, 61, 63, 42, 26, 32, 41, 51], [11, 29, 18, 36]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [6, 35, 59]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[6,35] + x[35,59] + x[59,6] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 158.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 66) (5 -> 22) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 44) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 50) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 36) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 60) (24 -> 43) (25 -> 64) (26 -> 42) (27 -> 28) (28 -> 39) (29 -> 18) (30 -> 40) (31 -> 52) (32 -> 26) (33 -> 20) (34 -> 13) (35 -> 6) (36 -> 11) (37 -> 1) (38 -> 27) (39 -> 23) (40 -> 37) (41 -> 32) (42 -> 63) (43 -> 17) (44 -> 55) (45 -> 62) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 53) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 35) (60 -> 67) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 45) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 66, 12, 8, 38, 27, 28, 39, 23, 60, 67, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16], [5, 22, 49, 21], [6, 59, 35], [7, 51, 41, 32, 26, 42, 63, 61, 14, 34, 13, 50, 19, 65, 31, 52, 53, 69, 45, 62, 54, 47, 15, 48, 24, 43, 17], [11, 29, 18, 36]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [6, 59, 35]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[6,59] + x[59,35] + x[35,6] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 61) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 6) (36 -> 43) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 51) (42 -> 26) (43 -> 24) (44 -> 9) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 35) (53 -> 46) (54 -> 62) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 69) (60 -> 31) (61 -> 63) (62 -> 45) (63 -> 42) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 31, 65, 19, 50, 13, 34, 14, 61, 63, 42, 26, 32, 41, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 39, 28, 11, 29, 18, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 35, 6, 59, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [2, 16, 64, 25, 20, 33, 55, 44, 9, 10]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [2, 16, 64, 25, 20, 33, 55, 44, 9, 10]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[2,16] + x[16,64] + x[64,25] + x[25,20] + x[20,33] + x[33,55] + x[55,44] + x[44,9] + x[9,10] + x[10,2] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 35) (7 -> 51) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 8) (13 -> 50) (14 -> 34) (15 -> 48) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 65) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 20) (26 -> 42) (27 -> 22) (28 -> 7) (29 -> 18) (30 -> 70) (31 -> 52) (32 -> 26) (33 -> 55) (34 -> 13) (35 -> 41) (36 -> 11) (37 -> 40) (38 -> 27) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 17) (44 -> 60) (45 -> 62) (46 -> 53) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 14) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 54) (63 -> 61) (64 -> 25) (65 -> 31) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4], [5, 23, 39, 28, 7, 51, 14, 34, 13, 50, 19, 65, 31, 52, 45, 62, 54, 47, 15, 48, 24, 43, 17, 66, 12, 8, 38, 27, 22, 49, 21], [11, 29, 18, 36]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [11, 29, 18, 36]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[11,29] + x[29,18] + x[18,36] + x[36,11] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 43) (37 -> 40) (38 -> 27) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 60) (45 -> 52) (46 -> 53) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4], [5, 23, 39, 28, 11, 29, 18, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4]
> Taille du cycle à casser : 35
> Nouvelle contrainte : x[1,37] + x[37,40] + x[40,30] + x[30,70] + x[70,68] + x[68,58] + x[58,56] + x[56,57] + x[57,3] + x[3,46] + x[46,53] + x[53,69] + x[69,59] + x[59,6] + x[6,35] + x[35,41] + x[41,32] + x[32,26] + x[26,42] + x[42,63] + x[63,61] + x[61,9] + x[9,10] + x[10,2] + x[2,16] + x[16,64] + x[64,25] + x[25,20] + x[20,33] + x[33,55] + x[55,44] + x[44,60] + x[60,67] + x[67,4] + x[4,1] ≤ 34
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 158.99999999999997
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 43) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 8) (13 -> 42) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 28) (28 -> 11) (29 -> 18) (30 -> 70) (31 -> 65) (32 -> 41) (33 -> 55) (34 -> 14) (35 -> 59) (36 -> 34) (37 -> 40) (38 -> 27) (39 -> 23) (40 -> 30) (41 -> 35) (42 -> 63) (43 -> 24) (44 -> 60) (45 -> 52) (46 -> 53) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 26) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 45) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 45, 52, 31, 65, 19, 50, 13, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 4], [5, 22, 49, 21], [6, 43, 24, 48, 15, 47, 54, 62, 26, 32, 41, 35, 59], [7, 17, 66, 12, 8, 38, 27, 28, 11, 29, 18, 36, 34, 14, 51], [23, 39]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [23, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,39] + x[39,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 57) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 50) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 4) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 42) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 70) (31 -> 52) (32 -> 26) (33 -> 20) (34 -> 13) (35 -> 59) (36 -> 11) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 35) (42 -> 63) (43 -> 36) (44 -> 55) (45 -> 62) (46 -> 67) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 53) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 32) (69 -> 45) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 32, 26, 42, 63, 61, 14, 34, 13, 50, 19, 65, 31, 52, 53, 69, 45, 62, 54, 47, 15, 48, 24, 43, 36, 11, 29, 18, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16], [3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 17, 7, 51, 41, 35, 59, 6, 57], [5, 22, 49, 21], [56, 58]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [56, 58]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[56,58] + x[58,56] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 43) (7 -> 17) (8 -> 38) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 66) (18 -> 36) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 40) (31 -> 52) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 50) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 13) (43 -> 24) (44 -> 55) (45 -> 69) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 46) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 44) (61 -> 63) (62 -> 26) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 39, 28, 11, 29, 18, 36, 50, 19, 65, 31, 52, 45, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [6, 43, 24, 48, 15, 47, 54, 62, 26, 32, 41, 35, 59]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [6, 43, 24, 48, 15, 47, 54, 62, 26, 32, 41, 35, 59]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[6,43] + x[43,24] + x[24,48] + x[48,15] + x[15,47] + x[47,54] + x[54,62] + x[62,26] + x[26,32] + x[32,41] + x[41,35] + x[35,59] + x[59,6] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 51) (8 -> 12) (9 -> 44) (10 -> 9) (11 -> 28) (12 -> 66) (13 -> 50) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 7) (18 -> 29) (19 -> 65) (20 -> 25) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 43) (25 -> 64) (26 -> 42) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 60) (32 -> 26) (33 -> 20) (34 -> 13) (35 -> 52) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 36) (44 -> 55) (45 -> 62) (46 -> 53) (47 -> 15) (48 -> 24) (49 -> 22) (50 -> 19) (51 -> 41) (52 -> 45) (53 -> 69) (54 -> 47) (55 -> 33) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 14) (62 -> 54) (63 -> 61) (64 -> 16) (65 -> 31) (66 -> 17) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 52, 45, 62, 54, 47, 15, 48, 24, 43, 36, 18, 29, 11, 28, 39, 23, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 7, 51, 41, 32, 26, 42, 63, 61, 14, 34, 13, 50, 19, 65, 31, 60, 67, 4], [2, 10, 9, 44, 55, 33, 20, 25, 64, 16]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [2, 10, 9, 44, 55, 33, 20, 25, 64, 16]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[2,10] + x[10,9] + x[9,44] + x[44,55] + x[55,33] + x[33,20] + x[20,25] + x[25,64] + x[64,16] + x[16,2] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 6) (36 -> 43) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 46) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 69) (60 -> 44) (61 -> 63) (62 -> 45) (63 -> 42) (64 -> 16) (65 -> 19) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 6, 59, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [5, 23, 39, 28, 11, 29, 18, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 6, 59, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37]
> Taille du cycle à casser : 35
> Nouvelle contrainte : x[1,4] + x[4,67] + x[67,60] + x[60,44] + x[44,55] + x[55,33] + x[33,20] + x[20,25] + x[25,64] + x[64,16] + x[16,2] + x[2,10] + x[10,9] + x[9,61] + x[61,63] + x[63,42] + x[42,26] + x[26,32] + x[32,41] + x[41,35] + x[35,6] + x[6,59] + x[59,69] + x[69,53] + x[53,46] + x[46,3] + x[3,57] + x[57,56] + x[56,58] + x[58,68] + x[68,70] + x[70,30] + x[30,40] + x[40,37] + x[37,1] ≤ 34
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 59) (7 -> 17) (8 -> 38) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 50) (14 -> 51) (15 -> 48) (16 -> 2) (17 -> 66) (18 -> 36) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 62) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 40) (31 -> 52) (32 -> 26) (33 -> 20) (34 -> 14) (35 -> 41) (36 -> 34) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 32) (42 -> 13) (43 -> 6) (44 -> 55) (45 -> 69) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 46) (54 -> 47) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 35) (60 -> 44) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 13, 50, 19, 65, 31, 52, 45, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [5, 23, 39, 28, 11, 29, 18, 36, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21], [6, 59, 35, 41, 32, 26, 62, 54, 47, 15, 48, 24, 43]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [6, 59, 35, 41, 32, 26, 62, 54, 47, 15, 48, 24, 43]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[6,59] + x[59,35] + x[35,41] + x[41,32] + x[32,26] + x[26,62] + x[62,54] + x[54,47] + x[47,15] + x[15,48] + x[48,24] + x[24,43] + x[43,6] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 18) (5 -> 23) (6 -> 59) (7 -> 51) (8 -> 38) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 50) (14 -> 34) (15 -> 48) (16 -> 2) (17 -> 66) (18 -> 36) (19 -> 65) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 43) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 7) (29 -> 25) (30 -> 40) (31 -> 60) (32 -> 41) (33 -> 20) (34 -> 13) (35 -> 6) (36 -> 11) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 26) (43 -> 17) (44 -> 55) (45 -> 62) (46 -> 3) (47 -> 15) (48 -> 24) (49 -> 21) (50 -> 19) (51 -> 14) (52 -> 45) (53 -> 52) (54 -> 47) (55 -> 44) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 69) (60 -> 67) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 46) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 36, 11, 29, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 6, 59, 69, 53, 52, 45, 62, 54, 47, 15, 48, 24, 43, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 39, 28, 7, 51, 14, 34, 13, 50, 19, 65, 31, 60, 67, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [20, 33], [44, 55]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [20, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,33] + x[33,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.00000000000003
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 43) (7 -> 51) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 61) (15 -> 47) (16 -> 64) (17 -> 7) (18 -> 36) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 32) (27 -> 38) (28 -> 27) (29 -> 18) (30 -> 40) (31 -> 52) (32 -> 68) (33 -> 55) (34 -> 14) (35 -> 59) (36 -> 50) (37 -> 1) (38 -> 8) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 13) (43 -> 24) (44 -> 9) (45 -> 69) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 19) (51 -> 41) (52 -> 45) (53 -> 46) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 6) (60 -> 44) (61 -> 63) (62 -> 26) (63 -> 42) (64 -> 22) (65 -> 31) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 9, 10, 2, 16, 64, 22, 49, 21, 5, 23, 39, 28, 27, 38, 8, 12, 66, 17, 7, 51, 41, 35, 59, 6, 43, 24, 48, 15, 47, 54, 62, 26, 32, 68, 70, 30, 40, 37], [3, 57, 56, 58, 11, 29, 18, 36, 50, 19, 65, 31, 52, 45, 69, 53, 46], [13, 34, 14, 61, 63, 42], [20, 25], [33, 55]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [20, 25]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,25] + x[25,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 37) (2 -> 10) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 57) (7 -> 17) (8 -> 12) (9 -> 61) (10 -> 9) (11 -> 36) (12 -> 66) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 38) (28 -> 27) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 28) (40 -> 30) (41 -> 35) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 69) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 52) (54 -> 62) (55 -> 44) (56 -> 33) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 23) (61 -> 63) (62 -> 45) (63 -> 42) (64 -> 16) (65 -> 19) (66 -> 4) (67 -> 60) (68 -> 58) (69 -> 53) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 59, 6, 57, 3, 46, 67, 60, 23, 39, 28, 27, 38, 8, 12, 66, 4], [5, 22, 49, 21], [7, 17, 43, 24, 48, 15, 47, 54, 62, 45, 69, 53, 52, 31, 65, 19, 50, 13, 34, 14, 51], [11, 36, 18, 29], [44, 55]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [44, 55]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,55] + x[55,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 67) (5 -> 23) (6 -> 43) (7 -> 17) (8 -> 38) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 66) (18 -> 36) (19 -> 65) (20 -> 25) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 40) (31 -> 52) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 59) (36 -> 50) (37 -> 1) (38 -> 27) (39 -> 28) (40 -> 37) (41 -> 35) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 69) (46 -> 3) (47 -> 15) (48 -> 13) (49 -> 21) (50 -> 19) (51 -> 7) (52 -> 45) (53 -> 46) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 68) (59 -> 6) (60 -> 44) (61 -> 63) (62 -> 54) (63 -> 42) (64 -> 16) (65 -> 31) (66 -> 12) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 59, 6, 43, 24, 48, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 39, 28, 11, 29, 18, 36, 50, 19, 65, 31, 52, 45, 69, 53, 46, 3, 57, 56, 58, 68, 70, 30, 40, 37], [15, 47], [54, 62]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [15, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,47] + x[47,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 28) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 66) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 18) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 60) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 7) (52 -> 53) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 31) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 17) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 67, 4], [2, 16, 64, 25, 20, 33, 55, 44, 60, 31, 65, 19, 50, 13, 34, 14, 51, 7, 28, 39, 23, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 43, 24, 48, 15, 47, 54, 62, 45, 52, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10], [11, 36, 18, 29]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 45 Cassage de contrainte 
> Cycle à casser : [11, 36, 18, 29]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[11,36] + x[36,18] + x[18,29] + x[29,11] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 22) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 60) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 28) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 43) (37 -> 40) (38 -> 27) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 18) (45 -> 52) (46 -> 53) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 18, 29, 11, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 28, 39, 23, 60, 67, 4], [5, 22, 49, 21]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 46 Cassage de contrainte 
> Cycle à casser : [5, 22, 49, 21]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[5,22] + x[22,49] + x[49,21] + x[21,5] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 4) (2 -> 16) (3 -> 46) (4 -> 18) (5 -> 21) (6 -> 35) (7 -> 28) (8 -> 12) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 66) (13 -> 42) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 43) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 20) (26 -> 1) (27 -> 38) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 34) (37 -> 40) (38 -> 8) (39 -> 23) (40 -> 37) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 60) (45 -> 52) (46 -> 53) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 17) (67 -> 30) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 18, 29, 11, 36, 34, 14, 51, 7, 28, 39, 23, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 60, 67, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26], [37, 40]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 47 Cassage de contrainte 
> Cycle à casser : [37, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[37,40] + x[40,37] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 23) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 29) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 36) (19 -> 50) (20 -> 33) (21 -> 5) (22 -> 49) (23 -> 39) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 22) (28 -> 11) (29 -> 18) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 43) (37 -> 40) (38 -> 27) (39 -> 28) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 60) (45 -> 52) (46 -> 67) (47 -> 54) (48 -> 15) (49 -> 21) (50 -> 13) (51 -> 7) (52 -> 53) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 31) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 67, 4], [2, 16, 64, 25, 20, 33, 55, 44, 60, 31, 65, 19, 50, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 22, 49, 21, 5, 23, 39, 28, 11, 29, 18, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 48 Cassage de contrainte 
> Cycle à casser : [1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 67, 4]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[1,37] + x[37,40] + x[40,30] + x[30,70] + x[70,68] + x[68,58] + x[58,56] + x[56,57] + x[57,3] + x[3,46] + x[46,67] + x[67,4] + x[4,1] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 37) (2 -> 16) (3 -> 46) (4 -> 1) (5 -> 21) (6 -> 35) (7 -> 17) (8 -> 38) (9 -> 10) (10 -> 2) (11 -> 36) (12 -> 8) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 64) (17 -> 66) (18 -> 29) (19 -> 50) (20 -> 33) (21 -> 49) (22 -> 5) (23 -> 60) (24 -> 48) (25 -> 20) (26 -> 42) (27 -> 28) (28 -> 39) (29 -> 11) (30 -> 70) (31 -> 65) (32 -> 26) (33 -> 55) (34 -> 14) (35 -> 41) (36 -> 43) (37 -> 40) (38 -> 27) (39 -> 23) (40 -> 30) (41 -> 32) (42 -> 63) (43 -> 24) (44 -> 18) (45 -> 52) (46 -> 53) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 69) (54 -> 62) (55 -> 44) (56 -> 57) (57 -> 3) (58 -> 56) (59 -> 6) (60 -> 67) (61 -> 9) (62 -> 45) (63 -> 61) (64 -> 25) (65 -> 19) (66 -> 12) (67 -> 4) (68 -> 58) (69 -> 59) (70 -> 68) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 37, 40, 30, 70, 68, 58, 56, 57, 3, 46, 53, 69, 59, 6, 35, 41, 32, 26, 42, 63, 61, 9, 10, 2, 16, 64, 25, 20, 33, 55, 44, 18, 29, 11, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 34, 14, 51, 7, 17, 66, 12, 8, 38, 27, 28, 39, 23, 60, 67, 4], [5, 21, 49, 22]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 49 Cassage de contrainte 
> Cycle à casser : [5, 21, 49, 22]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[5,21] + x[21,49] + x[49,22] + x[22,5] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 4) (2 -> 10) (3 -> 57) (4 -> 67) (5 -> 21) (6 -> 59) (7 -> 28) (8 -> 12) (9 -> 61) (10 -> 9) (11 -> 29) (12 -> 66) (13 -> 34) (14 -> 51) (15 -> 47) (16 -> 2) (17 -> 68) (18 -> 36) (19 -> 50) (20 -> 25) (21 -> 49) (22 -> 27) (23 -> 5) (24 -> 48) (25 -> 64) (26 -> 32) (27 -> 38) (28 -> 39) (29 -> 18) (30 -> 40) (31 -> 65) (32 -> 41) (33 -> 20) (34 -> 14) (35 -> 6) (36 -> 43) (37 -> 1) (38 -> 8) (39 -> 23) (40 -> 37) (41 -> 35) (42 -> 26) (43 -> 24) (44 -> 55) (45 -> 52) (46 -> 3) (47 -> 54) (48 -> 15) (49 -> 22) (50 -> 13) (51 -> 7) (52 -> 31) (53 -> 46) (54 -> 62) (55 -> 33) (56 -> 58) (57 -> 56) (58 -> 11) (59 -> 69) (60 -> 44) (61 -> 63) (62 -> 45) (63 -> 42) (64 -> 16) (65 -> 19) (66 -> 17) (67 -> 60) (68 -> 70) (69 -> 53) (70 -> 30) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 4, 67, 60, 44, 55, 33, 20, 25, 64, 16, 2, 10, 9, 61, 63, 42, 26, 32, 41, 35, 6, 59, 69, 53, 46, 3, 57, 56, 58, 11, 29, 18, 36, 43, 24, 48, 15, 47, 54, 62, 45, 52, 31, 65, 19, 50, 13, 34, 14, 51, 7, 28, 39, 23, 5, 21, 49, 22, 27, 38, 8, 12, 66, 17, 68, 70, 30, 40, 37]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 160.0
> Nombre d'itération nécéssaires : 50
> Nombre de contraintes ajoutées : 49
> Ordre de parcours des drônes : 
1 -> 4 -> 67 -> 60 -> 44 -> 55 -> 33 -> 20 -> 25 -> 64 -> 16 -> 2 -> 10 -> 9 -> 61 -> 63 -> 42 -> 26 -> 32 -> 41 -> 35 -> 6 -> 59 -> 69 -> 53 -> 46 -> 3 -> 57 -> 56 -> 58 -> 11 -> 29 -> 18 -> 36 -> 43 -> 24 -> 48 -> 15 -> 47 -> 54 -> 62 -> 45 -> 52 -> 31 -> 65 -> 19 -> 50 -> 13 -> 34 -> 14 -> 51 -> 7 -> 28 -> 39 -> 23 -> 5 -> 21 -> 49 -> 22 -> 27 -> 38 -> 8 -> 12 -> 66 -> 17 -> 68 -> 70 -> 30 -> 40 -> 37 -> 1. 
