Résolution exacte pour relief/relief50.dat points à visiter :
Résolution d'initiale :  
> temps total = 152.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 19) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 43) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 20) (22 -> 46) (23 -> 11) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 38) (30 -> 32) (31 -> 2) (32 -> 27) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 26) (39 -> 3) (40 -> 23) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 1) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48], [2, 10, 44, 13, 50, 22, 46, 14, 6, 29, 38, 26, 5, 40, 23, 11, 31], [3, 19, 37, 12, 28, 41, 17, 43, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39], [7, 9, 47, 36], [20, 21]]
> Nombre de cycle(s) trouvé(s) : 5
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [20, 21]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,21] + x[21,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 153.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 19) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 43) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 26) (22 -> 46) (23 -> 11) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 38) (30 -> 32) (31 -> 2) (32 -> 27) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 1) (39 -> 3) (40 -> 23) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 50) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48, 50, 22, 46, 14, 6, 29, 38], [2, 10, 44, 13, 19, 37, 12, 28, 41, 17, 43, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39, 3, 20, 21, 26, 5, 40, 23, 11, 31], [7, 9, 47, 36]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [7, 9, 47, 36]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[7,9] + x[9,47] + x[47,36] + x[36,7] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 153.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 26) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 46) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 43) (22 -> 47) (23 -> 11) (24 -> 33) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 48) (30 -> 32) (31 -> 2) (32 -> 27) (33 -> 4) (34 -> 16) (35 -> 19) (36 -> 7) (37 -> 12) (38 -> 1) (39 -> 38) (40 -> 23) (41 -> 17) (42 -> 8) (43 -> 42) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 3) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 33, 4, 30, 32, 27, 34, 16, 35, 19, 37, 12, 28, 41, 17, 46, 14, 6, 29, 48, 3, 20, 21, 43, 42, 8, 39, 38], [2, 10, 44, 13, 50, 22, 47, 36, 7, 9, 26, 5, 40, 23, 11, 31]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [2, 10, 44, 13, 50, 22, 47, 36, 7, 9, 26, 5, 40, 23, 11, 31]
> Taille du cycle à casser : 16
> Nouvelle contrainte : x[2,10] + x[10,44] + x[44,13] + x[13,50] + x[50,22] + x[22,47] + x[47,36] + x[36,7] + x[7,9] + x[9,26] + x[26,5] + x[5,40] + x[40,23] + x[23,11] + x[11,31] + x[31,2] ≤ 15
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 153.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 26) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 19) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 46) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 43) (22 -> 47) (23 -> 11) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 38) (30 -> 32) (31 -> 2) (32 -> 27) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 1) (39 -> 3) (40 -> 23) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 50) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48, 50, 22, 47, 36, 7, 9, 26, 5, 40, 23, 11, 31, 2, 10, 44, 13, 19, 37, 12, 28, 41, 17, 46, 14, 6, 29, 38], [3, 20, 21, 43, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [3, 20, 21, 43, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39]
> Taille du cycle à casser : 15
> Nouvelle contrainte : x[3,20] + x[20,21] + x[21,43] + x[43,33] + x[33,4] + x[4,30] + x[30,32] + x[32,27] + x[27,34] + x[34,16] + x[16,35] + x[35,42] + x[42,8] + x[8,39] + x[39,3] ≤ 14
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 154.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 27) (18 -> 49) (19 -> 37) (20 -> 36) (21 -> 43) (22 -> 46) (23 -> 11) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 38) (30 -> 32) (31 -> 2) (32 -> 21) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 26) (39 -> 3) (40 -> 19) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 23) (48 -> 1) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48], [2, 10, 44, 13, 50, 22, 46, 14, 6, 29, 38, 26, 5, 40, 19, 37, 12, 28, 41, 17, 27, 34, 16, 35, 42, 8, 39, 3, 20, 36, 7, 9, 47, 23, 11, 31], [4, 30, 32, 21, 43, 33]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [4, 30, 32, 21, 43, 33]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[4,30] + x[30,32] + x[32,21] + x[21,43] + x[43,33] + x[33,4] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 154.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 43) (18 -> 49) (19 -> 37) (20 -> 36) (21 -> 11) (22 -> 46) (23 -> 27) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 38) (30 -> 32) (31 -> 2) (32 -> 21) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 26) (39 -> 3) (40 -> 19) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 23) (48 -> 1) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48], [2, 10, 44, 13, 50, 22, 46, 14, 6, 29, 38, 26, 5, 40, 19, 37, 12, 28, 41, 17, 43, 33, 4, 30, 32, 21, 11, 31], [3, 20, 36, 7, 9, 47, 23, 27, 34, 16, 35, 42, 8, 39]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [1, 15, 45, 18, 49, 25, 24, 48]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[1,15] + x[15,45] + x[45,18] + x[18,49] + x[49,25] + x[25,24] + x[24,48] + x[48,1] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 26) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 19) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 46) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 43) (22 -> 47) (23 -> 11) (24 -> 33) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 48) (30 -> 32) (31 -> 2) (32 -> 27) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 1) (39 -> 3) (40 -> 23) (41 -> 17) (42 -> 8) (43 -> 38) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 50) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39, 3, 20, 21, 43, 38], [2, 10, 44, 13, 19, 37, 12, 28, 41, 17, 46, 14, 6, 29, 48, 50, 22, 47, 36, 7, 9, 26, 5, 40, 23, 11, 31]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [1, 15, 45, 18, 49, 25, 24, 33, 4, 30, 32, 27, 34, 16, 35, 42, 8, 39, 3, 20, 21, 43, 38]
> Taille du cycle à casser : 23
> Nouvelle contrainte : x[1,15] + x[15,45] + x[45,18] + x[18,49] + x[49,25] + x[25,24] + x[24,33] + x[33,4] + x[4,30] + x[30,32] + x[32,27] + x[27,34] + x[34,16] + x[16,35] + x[35,42] + x[42,8] + x[8,39] + x[39,3] + x[3,20] + x[20,21] + x[21,43] + x[43,38] + x[38,1] ≤ 22
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 6) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 13) (15 -> 45) (16 -> 35) (17 -> 43) (18 -> 49) (19 -> 37) (20 -> 21) (21 -> 11) (22 -> 46) (23 -> 27) (24 -> 33) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 48) (30 -> 32) (31 -> 2) (32 -> 8) (33 -> 4) (34 -> 16) (35 -> 19) (36 -> 40) (37 -> 12) (38 -> 26) (39 -> 3) (40 -> 23) (41 -> 17) (42 -> 38) (43 -> 42) (44 -> 7) (45 -> 18) (46 -> 14) (47 -> 36) (48 -> 1) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 33, 4, 30, 32, 8, 39, 3, 20, 21, 11, 31, 2, 10, 44, 7, 9, 47, 36, 40, 23, 27, 34, 16, 35, 19, 37, 12, 28, 41, 17, 43, 42, 38, 26, 5, 6, 29, 48], [13, 50, 22, 46, 14]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [13, 50, 22, 46, 14]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[13,50] + x[50,22] + x[22,46] + x[46,14] + x[14,13] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 155.0
   Permutations :
(1 -> 15) (2 -> 10) (3 -> 20) (4 -> 30) (5 -> 40) (6 -> 29) (7 -> 9) (8 -> 39) (9 -> 47) (10 -> 44) (11 -> 31) (12 -> 28) (13 -> 50) (14 -> 6) (15 -> 45) (16 -> 35) (17 -> 43) (18 -> 49) (19 -> 37) (20 -> 36) (21 -> 11) (22 -> 46) (23 -> 27) (24 -> 48) (25 -> 24) (26 -> 5) (27 -> 34) (28 -> 41) (29 -> 1) (30 -> 32) (31 -> 2) (32 -> 21) (33 -> 4) (34 -> 16) (35 -> 42) (36 -> 7) (37 -> 12) (38 -> 26) (39 -> 38) (40 -> 19) (41 -> 17) (42 -> 8) (43 -> 33) (44 -> 13) (45 -> 18) (46 -> 14) (47 -> 23) (48 -> 3) (49 -> 25) (50 -> 22) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 15, 45, 18, 49, 25, 24, 48, 3, 20, 36, 7, 9, 47, 23, 27, 34, 16, 35, 42, 8, 39, 38, 26, 5, 40, 19, 37, 12, 28, 41, 17, 43, 33, 4, 30, 32, 21, 11, 31, 2, 10, 44, 13, 50, 22, 46, 14, 6, 29]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 155.0
> Nombre d'itération nécéssaires : 9
> Nombre de contraintes ajoutées : 8
> Ordre de parcours des drônes : 
1 -> 15 -> 45 -> 18 -> 49 -> 25 -> 24 -> 48 -> 3 -> 20 -> 36 -> 7 -> 9 -> 47 -> 23 -> 27 -> 34 -> 16 -> 35 -> 42 -> 8 -> 39 -> 38 -> 26 -> 5 -> 40 -> 19 -> 37 -> 12 -> 28 -> 41 -> 17 -> 43 -> 33 -> 4 -> 30 -> 32 -> 21 -> 11 -> 31 -> 2 -> 10 -> 44 -> 13 -> 50 -> 22 -> 46 -> 14 -> 6 -> 29 -> 1. 
