Résolution exacte pour relief/relief40.dat points à visiter :
Résolution d'initiale :  
> temps total = 104.0
   Permutations :
(1 -> 40) (2 -> 12) (3 -> 39) (4 -> 36) (5 -> 32) (6 -> 35) (7 -> 3) (8 -> 25) (9 -> 30) (10 -> 14) (11 -> 23) (12 -> 8) (13 -> 18) (14 -> 7) (15 -> 10) (16 -> 26) (17 -> 22) (18 -> 17) (19 -> 13) (20 -> 2) (21 -> 37) (22 -> 5) (23 -> 19) (24 -> 27) (25 -> 16) (26 -> 6) (27 -> 20) (28 -> 21) (29 -> 24) (30 -> 33) (31 -> 15) (32 -> 1) (33 -> 29) (34 -> 11) (35 -> 9) (36 -> 38) (37 -> 28) (38 -> 34) (39 -> 4) (40 -> 31) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 40, 31, 15, 10, 14, 7, 3, 39, 4, 36, 38, 34, 11, 23, 19, 13, 18, 17, 22, 5, 32], [2, 12, 8, 25, 16, 26, 6, 35, 9, 30, 33, 29, 24, 27, 20], [21, 37, 28]]
> Nombre de cycle(s) trouvé(s) : 3
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [21, 37, 28]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[21,37] + x[37,28] + x[28,21] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 40) (2 -> 12) (3 -> 39) (4 -> 28) (5 -> 32) (6 -> 35) (7 -> 3) (8 -> 25) (9 -> 30) (10 -> 14) (11 -> 23) (12 -> 8) (13 -> 18) (14 -> 7) (15 -> 10) (16 -> 26) (17 -> 36) (18 -> 17) (19 -> 13) (20 -> 34) (21 -> 37) (22 -> 20) (23 -> 19) (24 -> 27) (25 -> 16) (26 -> 6) (27 -> 22) (28 -> 21) (29 -> 24) (30 -> 33) (31 -> 15) (32 -> 2) (33 -> 29) (34 -> 11) (35 -> 9) (36 -> 38) (37 -> 1) (38 -> 5) (39 -> 4) (40 -> 31) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 40, 31, 15, 10, 14, 7, 3, 39, 4, 28, 21, 37], [2, 12, 8, 25, 16, 26, 6, 35, 9, 30, 33, 29, 24, 27, 22, 20, 34, 11, 23, 19, 13, 18, 17, 36, 38, 5, 32]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [1, 40, 31, 15, 10, 14, 7, 3, 39, 4, 28, 21, 37]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[1,40] + x[40,31] + x[31,15] + x[15,10] + x[10,14] + x[14,7] + x[7,3] + x[3,39] + x[39,4] + x[4,28] + x[28,21] + x[21,37] + x[37,1] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 40) (2 -> 12) (3 -> 39) (4 -> 36) (5 -> 32) (6 -> 35) (7 -> 25) (8 -> 28) (9 -> 30) (10 -> 14) (11 -> 23) (12 -> 8) (13 -> 18) (14 -> 7) (15 -> 10) (16 -> 26) (17 -> 22) (18 -> 17) (19 -> 13) (20 -> 34) (21 -> 37) (22 -> 5) (23 -> 19) (24 -> 27) (25 -> 16) (26 -> 6) (27 -> 20) (28 -> 21) (29 -> 24) (30 -> 33) (31 -> 15) (32 -> 2) (33 -> 29) (34 -> 3) (35 -> 9) (36 -> 38) (37 -> 1) (38 -> 11) (39 -> 4) (40 -> 31) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 40, 31, 15, 10, 14, 7, 25, 16, 26, 6, 35, 9, 30, 33, 29, 24, 27, 20, 34, 3, 39, 4, 36, 38, 11, 23, 19, 13, 18, 17, 22, 5, 32, 2, 12, 8, 28, 21, 37]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 105.0
> Nombre d'itération nécéssaires : 3
> Nombre de contraintes ajoutées : 2
> Ordre de parcours des drônes : 
1 -> 40 -> 31 -> 15 -> 10 -> 14 -> 7 -> 25 -> 16 -> 26 -> 6 -> 35 -> 9 -> 30 -> 33 -> 29 -> 24 -> 27 -> 20 -> 34 -> 3 -> 39 -> 4 -> 36 -> 38 -> 11 -> 23 -> 19 -> 13 -> 18 -> 17 -> 22 -> 5 -> 32 -> 2 -> 12 -> 8 -> 28 -> 21 -> 37 -> 1. 
