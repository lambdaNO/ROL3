Résolution exacte pour relief/relief100.dat points à visiter :
Résolution d'initiale :  
> temps total = 102.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 36) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 66) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 93) (21 -> 37) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 5) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 59) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 27) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 7) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 57) (82 -> 65) (83 -> 20) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 100) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 36, 46, 5, 51, 22], [3, 60, 87, 94, 69, 27, 61, 42, 18, 45, 44, 58, 11, 16, 31, 77, 7, 34, 38, 62, 48, 6, 9, 83, 20, 93, 50, 40, 25, 75, 35, 92, 15, 10, 63, 17, 95, 56, 82, 65, 86, 33, 79, 30, 47, 52, 41, 49, 43, 12, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 97, 70, 23, 54, 55, 59, 85, 24, 13, 99, 100, 8, 88, 67, 53, 19], [14, 90, 80, 96]]
> Nombre de cycle(s) trouvé(s) : 3
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [14, 90, 80, 96]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[14,90] + x[90,80] + x[80,96] + x[96,14] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 85) (2 -> 68) (3 -> 97) (4 -> 36) (5 -> 45) (6 -> 9) (7 -> 34) (8 -> 67) (9 -> 51) (10 -> 63) (11 -> 95) (12 -> 66) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 28) (19 -> 3) (20 -> 88) (21 -> 71) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 16) (26 -> 64) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 20) (56 -> 82) (57 -> 83) (58 -> 11) (59 -> 100) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 89) (67 -> 53) (68 -> 4) (69 -> 27) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 59) (74 -> 81) (75 -> 57) (76 -> 35) (77 -> 7) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 56) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 37) (87 -> 94) (88 -> 60) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 40) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 85, 24, 13, 99, 32, 73, 59, 100, 8, 67, 53, 19, 3, 97, 70, 23, 54, 55, 20, 88, 60, 87, 94, 69, 27, 61, 42, 98, 18, 28, 21, 71, 26, 64, 29, 76, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 56, 82, 65, 86, 37, 91, 2, 68, 4, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 51, 22], [5, 45, 44, 58, 11, 95, 40, 25, 16, 31, 77, 7, 34, 75, 57, 83], [12, 66, 89, 33, 79, 30, 47, 52, 41, 49, 43]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [12, 66, 89, 33, 79, 30, 47, 52, 41, 49, 43]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[12,66] + x[66,89] + x[89,33] + x[33,79] + x[79,30] + x[30,47] + x[47,52] + x[52,41] + x[41,49] + x[49,43] + x[43,12] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 97) (4 -> 36) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 6) (11 -> 95) (12 -> 60) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 71) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 16) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 63) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 77) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 85) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 20) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 100) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 89) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 59) (74 -> 81) (75 -> 57) (76 -> 35) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 56) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 37) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 40) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 71, 26, 98, 18, 45, 44, 58, 11, 95, 40, 25, 16, 31, 63, 17, 84, 39, 78, 72, 74, 81, 56, 82, 65, 86, 37, 91, 2, 68, 4, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 85, 24, 13, 99, 32, 73, 59, 100, 8, 88, 67, 53, 19, 3, 97, 70, 23, 54, 55, 20, 7, 34, 75, 57, 64, 29, 76, 35, 92, 15, 10, 6, 9, 83, 5, 51, 22], [12, 60, 87, 94, 69, 66, 89, 33, 79, 30, 47, 52, 41, 49, 43], [27, 61, 42, 77]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [27, 61, 42, 77]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[27,61] + x[61,42] + x[42,77] + x[77,27] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 85) (2 -> 68) (3 -> 97) (4 -> 36) (5 -> 45) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 51) (10 -> 63) (11 -> 95) (12 -> 60) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 28) (19 -> 3) (20 -> 7) (21 -> 71) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 16) (26 -> 64) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 20) (56 -> 82) (57 -> 83) (58 -> 11) (59 -> 100) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 89) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 59) (74 -> 81) (75 -> 57) (76 -> 35) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 56) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 37) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 40) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 85, 24, 13, 99, 32, 73, 59, 100, 8, 88, 67, 53, 19, 3, 97, 70, 23, 54, 55, 20, 7, 34, 75, 57, 83, 5, 45, 44, 58, 11, 95, 40, 25, 16, 31, 77, 27, 61, 42, 98, 18, 28, 21, 71, 26, 64, 29, 76, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 56, 82, 65, 86, 37, 91, 2, 68, 4, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 51, 22], [12, 60, 87, 94, 69, 66, 89, 33, 79, 30, 47, 52, 41, 49, 43]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [12, 60, 87, 94, 69, 66, 89, 33, 79, 30, 47, 52, 41, 49, 43]
> Taille du cycle à casser : 15
> Nouvelle contrainte : x[12,60] + x[60,87] + x[87,94] + x[94,69] + x[69,66] + x[66,89] + x[89,33] + x[33,79] + x[79,30] + x[30,47] + x[47,52] + x[52,41] + x[41,49] + x[49,43] + x[43,12] ≤ 14
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 51) (6 -> 20) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 54) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 59) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 96) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 86) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 9) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 40, 25, 75, 35, 92, 15, 10, 63, 17, 95, 56, 82, 65, 96, 14, 90, 80, 86, 9, 83, 5, 51, 22], [6, 20, 7, 34, 38, 62, 48], [11, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 18, 45, 44, 58], [13, 99, 32, 73, 97, 70, 23, 55, 59, 85, 24]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [6, 20, 7, 34, 38, 62, 48]
> Taille du cycle à casser : 7
> Nouvelle contrainte : x[6,20] + x[20,7] + x[7,34] + x[34,38] + x[38,62] + x[62,48] + x[48,6] ≤ 6
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 54) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 20) (56 -> 59) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 96) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 86) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 82) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 97, 70, 23, 55, 20, 7, 34, 38, 62, 48, 6, 9, 83, 5, 51, 22], [10, 63, 17, 95, 56, 59, 85, 24, 13, 99, 82, 65, 96, 14, 90, 80, 86, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 40, 25, 75, 35, 92, 15], [11, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 18, 45, 44, 58]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [11, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 18, 45, 44, 58]
> Taille du cycle à casser : 15
> Nouvelle contrainte : x[11,16] + x[16,31] + x[31,77] + x[77,27] + x[27,61] + x[61,49] + x[49,43] + x[43,12] + x[12,54] + x[54,42] + x[42,18] + x[18,45] + x[45,44] + x[44,58] + x[58,11] ≤ 14
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 64) (6 -> 20) (7 -> 34) (8 -> 88) (9 -> 51) (10 -> 63) (11 -> 95) (12 -> 54) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 16) (26 -> 40) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 59) (56 -> 82) (57 -> 83) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 9) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 71, 26, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 98, 18, 45, 44, 58, 11, 95, 56, 82, 65, 86, 9, 51, 22], [5, 64, 29, 76, 89, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 20, 7, 34, 75, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 57, 83], [13, 99, 32, 73, 97, 70, 23, 55, 59, 85, 24]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [13, 99, 32, 73, 97, 70, 23, 55, 59, 85, 24]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[13,99] + x[99,32] + x[32,73] + x[73,97] + x[97,70] + x[70,23] + x[23,55] + x[55,59] + x[59,85] + x[85,24] + x[24,13] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 95) (12 -> 54) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 16) (26 -> 40) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 20) (56 -> 59) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 82) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 71, 26, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 98, 18, 45, 44, 58, 11, 95, 56, 59, 85, 24, 13, 99, 82, 65, 86, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 83, 5, 51, 22], [7, 34, 75, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 97, 70, 23, 55, 20]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [7, 34, 75, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 97, 70, 23, 55, 20]
> Taille du cycle à casser : 27
> Nouvelle contrainte : x[7,34] + x[34,75] + x[75,35] + x[35,92] + x[92,15] + x[15,10] + x[10,63] + x[63,17] + x[17,84] + x[84,39] + x[39,78] + x[78,72] + x[72,74] + x[74,81] + x[81,57] + x[57,64] + x[64,29] + x[29,76] + x[76,89] + x[89,32] + x[32,73] + x[73,97] + x[97,70] + x[70,23] + x[23,55] + x[55,20] + x[20,7] ≤ 26
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 64) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 51) (10 -> 63) (11 -> 95) (12 -> 54) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 16) (26 -> 40) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 20) (56 -> 59) (57 -> 83) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 82) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 71, 26, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 98, 18, 45, 44, 58, 11, 95, 56, 59, 85, 24, 13, 99, 82, 65, 86, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 51, 22], [5, 64, 29, 76, 89, 32, 73, 97, 70, 23, 55, 20, 7, 34, 75, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 57, 83]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [5, 64, 29, 76, 89, 32, 73, 97, 70, 23, 55, 20, 7, 34, 75, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 57, 83]
> Taille du cycle à casser : 29
> Nouvelle contrainte : x[5,64] + x[64,29] + x[29,76] + x[76,89] + x[89,32] + x[32,73] + x[73,97] + x[97,70] + x[70,23] + x[23,55] + x[55,20] + x[20,7] + x[7,34] + x[34,75] + x[75,35] + x[35,92] + x[92,15] + x[15,10] + x[10,63] + x[63,17] + x[17,84] + x[84,39] + x[39,78] + x[78,72] + x[72,74] + x[74,81] + x[81,57] + x[57,83] + x[83,5] ≤ 28
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 95) (12 -> 54) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 59) (19 -> 3) (20 -> 7) (21 -> 71) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 16) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 45) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 20) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 89) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 57) (76 -> 35) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 56) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 37) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 40) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 71, 26, 98, 18, 59, 85, 24, 13, 99, 32, 73, 97, 70, 23, 55, 20, 7, 34, 75, 57, 64, 29, 76, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 56, 82, 65, 86, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 89, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 83, 5, 51, 22], [11, 95, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 45, 44, 58]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [11, 95, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 45, 44, 58]
> Taille du cycle à casser : 17
> Nouvelle contrainte : x[11,95] + x[95,40] + x[40,25] + x[25,16] + x[16,31] + x[31,77] + x[77,27] + x[27,61] + x[61,49] + x[49,43] + x[43,12] + x[12,54] + x[54,42] + x[42,45] + x[45,44] + x[44,58] + x[58,11] ≤ 16
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 100) (5 -> 45) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 51) (10 -> 63) (11 -> 95) (12 -> 54) (13 -> 99) (14 -> 38) (15 -> 10) (16 -> 31) (17 -> 84) (18 -> 59) (19 -> 3) (20 -> 7) (21 -> 71) (22 -> 1) (23 -> 55) (24 -> 13) (25 -> 16) (26 -> 64) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 75) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 36) (42 -> 98) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 90) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 42) (55 -> 20) (56 -> 82) (57 -> 83) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 49) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 86) (66 -> 89) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 57) (76 -> 35) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 96) (81 -> 56) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 37) (87 -> 94) (88 -> 67) (89 -> 33) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 40) (96 -> 14) (97 -> 70) (98 -> 18) (99 -> 32) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 71, 26, 64, 29, 76, 35, 92, 15, 10, 63, 17, 84, 39, 78, 72, 74, 81, 56, 82, 65, 86, 37, 91, 2, 68, 4, 100, 8, 88, 67, 53, 19, 3, 60, 87, 94, 69, 66, 89, 33, 79, 30, 47, 52, 41, 36, 46, 93, 50, 90, 80, 96, 14, 38, 62, 48, 6, 9, 51, 22], [5, 45, 44, 58, 11, 95, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 98, 18, 59, 85, 24, 13, 99, 32, 73, 97, 70, 23, 55, 20, 7, 34, 75, 57, 83]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [5, 45, 44, 58, 11, 95, 40, 25, 16, 31, 77, 27, 61, 49, 43, 12, 54, 42, 98, 18, 59, 85, 24, 13, 99, 32, 73, 97, 70, 23, 55, 20, 7, 34, 75, 57, 83]
> Taille du cycle à casser : 37
> Nouvelle contrainte : x[5,45] + x[45,44] + x[44,58] + x[58,11] + x[11,95] + x[95,40] + x[40,25] + x[25,16] + x[16,31] + x[31,77] + x[77,27] + x[27,61] + x[61,49] + x[49,43] + x[43,12] + x[12,54] + x[54,42] + x[42,98] + x[98,18] + x[18,59] + x[59,85] + x[85,24] + x[24,13] + x[13,99] + x[99,32] + x[32,73] + x[73,97] + x[97,70] + x[70,23] + x[23,55] + x[55,20] + x[20,7] + x[7,34] + x[34,75] + x[75,57] + x[57,83] + x[83,5] ≤ 36
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 60) (4 -> 36) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 66) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 93) (21 -> 37) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 5) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 59) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 96) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 27) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 97) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 7) (78 -> 72) (79 -> 30) (80 -> 86) (81 -> 57) (82 -> 65) (83 -> 20) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 100) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 36, 46, 5, 51, 22], [3, 60, 87, 94, 69, 27, 61, 42, 18, 45, 44, 58, 11, 16, 31, 77, 7, 34, 38, 62, 48, 6, 9, 83, 20, 93, 50, 40, 25, 75, 35, 92, 15, 10, 63, 17, 95, 56, 82, 65, 96, 14, 90, 80, 86, 33, 79, 30, 47, 52, 41, 49, 43, 12, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 97, 70, 23, 54, 55, 59, 85, 24, 13, 99, 100, 8, 88, 67, 53, 19]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [1, 28, 21, 37, 91, 2, 68, 4, 36, 46, 5, 51, 22]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[1,28] + x[28,21] + x[21,37] + x[37,91] + x[91,2] + x[2,68] + x[68,4] + x[4,36] + x[36,46] + x[46,5] + x[5,51] + x[51,22] + x[22,1] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 97) (4 -> 36) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 88) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 60) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 7) (21 -> 37) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 20) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 96) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 66) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 59) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 27) (78 -> 72) (79 -> 30) (80 -> 86) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 67) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 100) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 36, 46, 93, 50, 40, 25, 75, 35, 92, 15, 10, 63, 17, 95, 56, 82, 65, 96, 14, 90, 80, 86, 33, 79, 30, 47, 52, 41, 49, 43, 12, 60, 87, 94, 69, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 59, 85, 24, 13, 99, 100, 8, 88, 67, 53, 19, 3, 97, 70, 23, 54, 55, 20, 7, 34, 38, 62, 48, 6, 9, 83, 5, 51, 22], [11, 16, 31, 77, 27, 61, 42, 18, 45, 44, 58]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [11, 16, 31, 77, 27, 61, 42, 18, 45, 44, 58]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[11,16] + x[16,31] + x[31,77] + x[77,27] + x[27,61] + x[61,42] + x[42,18] + x[18,45] + x[45,44] + x[44,58] + x[58,11] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 28) (2 -> 68) (3 -> 97) (4 -> 36) (5 -> 51) (6 -> 9) (7 -> 34) (8 -> 67) (9 -> 83) (10 -> 63) (11 -> 16) (12 -> 66) (13 -> 99) (14 -> 90) (15 -> 10) (16 -> 31) (17 -> 95) (18 -> 45) (19 -> 3) (20 -> 88) (21 -> 37) (22 -> 1) (23 -> 54) (24 -> 13) (25 -> 75) (26 -> 98) (27 -> 61) (28 -> 21) (29 -> 76) (30 -> 47) (31 -> 77) (32 -> 73) (33 -> 79) (34 -> 38) (35 -> 92) (36 -> 46) (37 -> 91) (38 -> 62) (39 -> 78) (40 -> 25) (41 -> 49) (42 -> 18) (43 -> 12) (44 -> 58) (45 -> 44) (46 -> 93) (47 -> 52) (48 -> 6) (49 -> 43) (50 -> 40) (51 -> 22) (52 -> 41) (53 -> 19) (54 -> 55) (55 -> 20) (56 -> 82) (57 -> 64) (58 -> 11) (59 -> 85) (60 -> 87) (61 -> 42) (62 -> 48) (63 -> 17) (64 -> 29) (65 -> 96) (66 -> 71) (67 -> 53) (68 -> 4) (69 -> 27) (70 -> 23) (71 -> 26) (72 -> 74) (73 -> 59) (74 -> 81) (75 -> 35) (76 -> 89) (77 -> 7) (78 -> 72) (79 -> 30) (80 -> 86) (81 -> 57) (82 -> 65) (83 -> 5) (84 -> 39) (85 -> 24) (86 -> 33) (87 -> 94) (88 -> 60) (89 -> 32) (90 -> 80) (91 -> 2) (92 -> 15) (93 -> 50) (94 -> 69) (95 -> 56) (96 -> 14) (97 -> 70) (98 -> 84) (99 -> 100) (100 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 28, 21, 37, 91, 2, 68, 4, 36, 46, 93, 50, 40, 25, 75, 35, 92, 15, 10, 63, 17, 95, 56, 82, 65, 96, 14, 90, 80, 86, 33, 79, 30, 47, 52, 41, 49, 43, 12, 66, 71, 26, 98, 84, 39, 78, 72, 74, 81, 57, 64, 29, 76, 89, 32, 73, 59, 85, 24, 13, 99, 100, 8, 67, 53, 19, 3, 97, 70, 23, 54, 55, 20, 88, 60, 87, 94, 69, 27, 61, 42, 18, 45, 44, 58, 11, 16, 31, 77, 7, 34, 38, 62, 48, 6, 9, 83, 5, 51, 22]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 103.0
> Nombre d'itération nécéssaires : 14
> Nombre de contraintes ajoutées : 13
> Ordre de parcours des drônes : 
1 -> 28 -> 21 -> 37 -> 91 -> 2 -> 68 -> 4 -> 36 -> 46 -> 93 -> 50 -> 40 -> 25 -> 75 -> 35 -> 92 -> 15 -> 10 -> 63 -> 17 -> 95 -> 56 -> 82 -> 65 -> 96 -> 14 -> 90 -> 80 -> 86 -> 33 -> 79 -> 30 -> 47 -> 52 -> 41 -> 49 -> 43 -> 12 -> 66 -> 71 -> 26 -> 98 -> 84 -> 39 -> 78 -> 72 -> 74 -> 81 -> 57 -> 64 -> 29 -> 76 -> 89 -> 32 -> 73 -> 59 -> 85 -> 24 -> 13 -> 99 -> 100 -> 8 -> 67 -> 53 -> 19 -> 3 -> 97 -> 70 -> 23 -> 54 -> 55 -> 20 -> 88 -> 60 -> 87 -> 94 -> 69 -> 27 -> 61 -> 42 -> 18 -> 45 -> 44 -> 58 -> 11 -> 16 -> 31 -> 77 -> 7 -> 34 -> 38 -> 62 -> 48 -> 6 -> 9 -> 83 -> 5 -> 51 -> 22 -> 1. 
