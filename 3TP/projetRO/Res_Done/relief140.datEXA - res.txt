Résolution exacte pour relief/relief140.dat points à visiter :
Résolution d'initiale :  
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 65) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 126) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 111) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 98) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 124) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 83) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 123) (49 -> 2) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 97) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 105) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 49) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 69) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 2, 65, 13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 123, 86], [3, 80, 78, 115, 60, 112, 18, 11, 68, 6, 44, 25, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 126, 31, 138, 50, 107], [5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 32, 30, 124, 87, 40, 61, 26, 133, 125, 91, 136, 100, 76, 90, 135, 120, 69, 77, 67, 130, 47, 34, 83], [28, 92, 102, 137, 140, 89], [57, 97]]
> Nombre de cycle(s) trouvé(s) : 5
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [57, 97]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[57,97] + x[97,57] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 27) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 136) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 77) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 133) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 12) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 28) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 53) (77 -> 67) (78 -> 115) (79 -> 3) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 1) (90 -> 135) (91 -> 66) (92 -> 102) (93 -> 47) (94 -> 56) (95 -> 34) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 17) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 37) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 133, 125, 91, 66, 106, 127, 14, 39, 79, 3, 80, 78, 115, 60, 112, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 28, 92, 102, 137, 140, 89], [2, 124, 87, 40, 61, 26, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 123, 86], [4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 136, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58], [12, 32, 30, 126, 31, 138, 50, 107, 17, 29, 116, 37, 55, 64, 114, 100, 76, 53, 93, 47], [13, 95, 34, 65]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [13, 95, 34, 65]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[13,95] + x[95,34] + x[34,65] + x[65,13] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 2) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 72) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 49) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 18) (48 -> 56) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 86) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 95) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 20) (81 -> 36) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 34) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 47) (94 -> 75) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 78) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 47, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 36, 73, 52, 86], [2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 94, 75, 103, 51, 45, 54, 91, 136, 111, 33, 46, 74, 88, 34, 65, 13, 49, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 138, 50, 107, 3, 80, 20, 37, 55, 64, 114, 100, 76, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 112, 78, 115, 60, 58, 4], [8, 72], [16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 56, 38, 21, 113, 117, 96], [22, 118]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [8, 72]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,72] + x[72,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 108) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 49) (14 -> 39) (15 -> 12) (16 -> 99) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 69) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 140) (36 -> 73) (37 -> 55) (38 -> 111) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 18) (48 -> 123) (49 -> 2) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 95) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 20) (81 -> 36) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 66) (92 -> 102) (93 -> 47) (94 -> 56) (95 -> 34) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 78) (113 -> 117) (114 -> 92) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 136) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 21) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 47, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 138, 50, 107, 3, 80, 20, 37, 55, 64, 114, 92, 102, 137, 21, 113, 117, 96, 16, 99, 81, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 136, 100, 76, 95, 34, 65, 13, 49, 2, 124, 87, 40, 61, 26, 133, 125, 91, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 140, 89, 28, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58, 4, 72, 8, 108, 23, 134, 48, 123, 86], [22, 118], [60, 112, 78, 115]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [22, 118]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,118] + x[118,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 123, 86, 2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 50, 107, 3, 80, 78, 115, 60, 112, 18, 11, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 89], [4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58], [13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]
> Taille du cycle à casser : 24
> Nouvelle contrainte : x[13,95] + x[95,66] + x[66,106] + x[106,127] + x[127,14] + x[14,39] + x[39,79] + x[79,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] + x[23,134] + x[134,48] + x[48,49] + x[49,69] + x[69,77] + x[77,67] + x[67,130] + x[130,47] + x[47,34] + x[34,65] + x[65,13] ≤ 23
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 122) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 74) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 36) (47 -> 18) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 102) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 118) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 114) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 89) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 78) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 139, 104, 70, 121, 71, 112, 78, 115, 60, 58, 4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 36, 73, 118, 22, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 18, 11, 68, 6], [2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 50, 107, 3, 80, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 86], [28, 92, 89]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [28, 92, 89]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[28,92] + x[92,89] + x[89,28] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 122) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 74) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 36) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 118) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 111, 50, 107, 3, 80, 78, 115, 60, 112, 18, 11, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 68, 6], [4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 36, 73, 118, 22, 74, 88, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 58]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 36, 73, 118, 22, 74, 88, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 58]
> Taille du cycle à casser : 65
> Nouvelle contrainte : x[4,72] + x[72,8] + x[8,122] + x[122,7] + x[7,85] + x[85,63] + x[63,109] + x[109,43] + x[43,15] + x[15,12] + x[12,32] + x[32,30] + x[30,126] + x[126,31] + x[31,33] + x[33,46] + x[46,36] + x[36,73] + x[73,118] + x[118,22] + x[22,74] + x[74,88] + x[88,70] + x[70,121] + x[121,71] + x[71,94] + x[94,56] + x[56,38] + x[38,21] + x[21,113] + x[113,117] + x[117,96] + x[96,52] + x[52,75] + x[75,138] + x[138,16] + x[16,123] + x[123,39] + x[39,79] + x[79,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] + x[23,134] + x[134,48] + x[48,49] + x[49,69] + x[69,77] + x[77,67] + x[67,130] + x[130,47] + x[47,34] + x[34,65] + x[65,13] + x[13,95] + x[95,66] + x[66,106] + x[106,127] + x[127,14] + x[14,139] + x[139,104] + x[104,58] + x[58,4] ≤ 64
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 122) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 74) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 36) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 118) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 112) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 111, 50, 107, 3, 80, 78, 115, 60, 58, 4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 36, 73, 118, 22, 74, 88, 112, 18, 11, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 68, 6], [13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]
> Taille du cycle à casser : 41
> Nouvelle contrainte : x[13,95] + x[95,66] + x[66,106] + x[106,127] + x[127,14] + x[14,139] + x[139,104] + x[104,70] + x[70,121] + x[121,71] + x[71,94] + x[94,56] + x[56,38] + x[38,21] + x[21,113] + x[113,117] + x[117,96] + x[96,52] + x[52,75] + x[75,138] + x[138,16] + x[16,123] + x[123,39] + x[39,79] + x[79,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] + x[23,134] + x[134,48] + x[48,49] + x[49,69] + x[69,77] + x[77,67] + x[67,130] + x[130,47] + x[47,34] + x[34,65] + x[65,13] ≤ 40
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 122) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 32) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 11) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 111, 33, 46, 74, 88, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 11, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 68, 6], [3, 80, 78, 115, 60, 112, 18, 32, 30, 126, 31, 138, 50, 107], [7, 85, 63, 109, 43, 15, 12, 122]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [7, 85, 63, 109, 43, 15, 12, 122]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[7,85] + x[85,63] + x[63,109] + x[109,43] + x[43,15] + x[15,12] + x[12,122] + x[122,7] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 18) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 20) (81 -> 44) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 78) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 111, 50, 107, 3, 80, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 74, 88, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 58, 4, 72, 8, 22, 118, 36, 73, 18, 11, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 44, 25, 83, 5, 62, 82, 101, 68, 6], [60, 112, 78, 115]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [60, 112, 78, 115]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[60,112] + x[112,78] + x[78,115] + x[115,60] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 122) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 111) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 74) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 36) (47 -> 34) (48 -> 123) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 118) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 49) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 68, 6], [2, 124, 87, 40, 61, 26, 133, 125, 89, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 58, 4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 36, 73, 118, 22, 74, 88, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 52, 75, 138, 16, 111, 50, 107, 3, 80, 78, 115, 60, 112, 18, 11, 86], [23, 134, 48, 123, 39, 79, 27, 110, 59, 35, 108]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [23, 134, 48, 123, 39, 79, 27, 110, 59, 35, 108]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[23,134] + x[134,48] + x[48,123] + x[123,39] + x[39,79] + x[79,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 122) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 31) (17 -> 29) (18 -> 32) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 123) (49 -> 69) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 11) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 49) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 31, 138, 50, 107, 3, 80, 78, 115, 60, 112, 18, 32, 30, 126, 49, 69, 77, 67, 130, 47, 34, 65, 13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 123, 86, 2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 11, 68, 6], [28, 92, 102, 137, 140, 89]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [28, 92, 102, 137, 140, 89]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[28,92] + x[92,102] + x[102,137] + x[137,140] + x[140,89] + x[89,28] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 49) (14 -> 39) (15 -> 12) (16 -> 92) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 69) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 123) (49 -> 2) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 95) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 47) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 47, 34, 65, 13, 49, 2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 123, 86], [3, 80, 78, 115, 60, 112, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 138, 50, 107], [16, 92, 102, 137, 140, 89, 28, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [16, 92, 102, 137, 140, 89, 28, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96]
> Taille du cycle à casser : 29
> Nouvelle contrainte : x[16,92] + x[92,102] + x[102,137] + x[137,140] + x[140,89] + x[89,28] + x[28,69] + x[69,77] + x[77,67] + x[67,130] + x[130,90] + x[90,135] + x[135,120] + x[120,97] + x[97,57] + x[57,98] + x[98,129] + x[129,41] + x[41,122] + x[122,121] + x[121,71] + x[71,94] + x[94,56] + x[56,38] + x[38,21] + x[21,113] + x[113,117] + x[117,96] + x[96,16] ≤ 28
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 111) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 18) (48 -> 123) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 89) (111 -> 50) (112 -> 59) (113 -> 117) (114 -> 49) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 139, 104, 70, 121, 71, 112, 59, 35, 108, 23, 134, 48, 123, 86, 2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 89], [3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 69, 77, 67, 130, 47, 18, 11, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 16, 111, 50, 107]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 69, 77, 67, 130, 47, 18, 11, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 16, 111, 50, 107]
> Taille du cycle à casser : 65
> Nouvelle contrainte : x[3,80] + x[80,78] + x[78,115] + x[115,60] + x[60,58] + x[58,4] + x[4,72] + x[72,8] + x[8,22] + x[22,118] + x[118,36] + x[36,73] + x[73,52] + x[52,75] + x[75,138] + x[138,62] + x[62,82] + x[82,101] + x[101,119] + x[119,9] + x[9,84] + x[84,128] + x[128,10] + x[10,105] + x[105,131] + x[131,132] + x[132,99] + x[99,81] + x[81,20] + x[20,37] + x[37,55] + x[55,64] + x[64,114] + x[114,49] + x[49,69] + x[69,77] + x[77,67] + x[67,130] + x[130,47] + x[47,18] + x[18,11] + x[11,68] + x[68,6] + x[6,44] + x[44,25] + x[25,83] + x[83,5] + x[5,28] + x[28,92] + x[92,102] + x[102,137] + x[137,140] + x[140,24] + x[24,94] + x[94,56] + x[56,38] + x[38,21] + x[21,113] + x[113,117] + x[117,96] + x[96,16] + x[16,111] + x[111,50] + x[50,107] + x[107,3] ≤ 64
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 27) (16 -> 111) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 12) (48 -> 123) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 86) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 49) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 123, 39, 79, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89], [3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 69, 77, 67, 130, 47, 12, 32, 30, 126, 31, 33, 46, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 112, 18, 11, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 16, 111, 50, 107]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 123, 39, 79, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89]
> Taille du cycle à casser : 52
> Nouvelle contrainte : x[1,19] + x[19,42] + x[42,17] + x[17,29] + x[29,116] + x[116,53] + x[53,93] + x[93,103] + x[103,51] + x[51,45] + x[45,54] + x[54,91] + x[91,136] + x[136,100] + x[100,76] + x[76,90] + x[90,135] + x[135,120] + x[120,97] + x[97,57] + x[57,98] + x[98,129] + x[129,41] + x[41,122] + x[122,7] + x[7,85] + x[85,63] + x[63,109] + x[109,43] + x[43,15] + x[15,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] + x[23,134] + x[134,48] + x[48,123] + x[123,39] + x[39,79] + x[79,86] + x[86,2] + x[2,124] + x[124,87] + x[87,40] + x[40,61] + x[61,26] + x[26,133] + x[133,125] + x[125,89] + x[89,1] ≤ 51
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 49) (14 -> 39) (15 -> 27) (16 -> 99) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 69) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 12) (48 -> 123) (49 -> 2) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 112) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 95) (77 -> 67) (78 -> 115) (79 -> 92) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 70) (89 -> 28) (90 -> 135) (91 -> 66) (92 -> 102) (93 -> 47) (94 -> 56) (95 -> 34) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 58) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 136) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 47, 12, 32, 30, 126, 31, 138, 50, 107, 3, 80, 78, 115, 60, 112, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 123, 86], [2, 124, 87, 40, 61, 26, 133, 125, 91, 66, 106, 127, 14, 39, 79, 92, 102, 137, 140, 89, 28, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 99, 81, 20, 37, 55, 64, 114, 100, 76, 95, 34, 65, 13, 49], [4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 136, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 136, 111, 33, 46, 74, 88, 70, 45, 54, 139, 104, 58]
> Taille du cycle à casser : 32
> Nouvelle contrainte : x[4,72] + x[72,8] + x[8,22] + x[22,118] + x[118,36] + x[36,73] + x[73,52] + x[52,75] + x[75,103] + x[103,51] + x[51,24] + x[24,119] + x[119,9] + x[9,84] + x[84,128] + x[128,10] + x[10,105] + x[105,131] + x[131,132] + x[132,136] + x[136,111] + x[111,33] + x[33,46] + x[46,74] + x[74,88] + x[88,70] + x[70,45] + x[45,54] + x[54,139] + x[139,104] + x[104,58] + x[58,4] ≤ 31
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 49) (14 -> 39) (15 -> 12) (16 -> 92) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 69) (29 -> 116) (30 -> 126) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 94) (48 -> 123) (49 -> 2) (50 -> 107) (51 -> 24) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 45) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 95) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 1) (87 -> 40) (88 -> 34) (89 -> 28) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 47) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 7) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 121) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 90) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 50) (139 -> 104) (140 -> 89) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 47, 94, 56, 38, 21, 113, 117, 96, 16, 92, 102, 137, 140, 89, 28, 69, 77, 67, 130, 90, 135, 120, 97, 57, 98, 129, 41, 122, 121, 71, 112, 18, 11, 68, 6, 44, 25, 83, 5, 62, 82, 101, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 138, 50, 107, 3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 95, 66, 106, 127, 14, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 123, 86], [2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 33, 46, 74, 88, 34, 65, 13, 49], [45, 54, 139, 104, 70]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [45, 54, 139, 104, 70]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[45,54] + x[54,139] + x[139,104] + x[104,70] + x[70,45] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 50) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 126) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 27) (16 -> 111) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 124) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 12) (48 -> 123) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 103) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 86) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 105) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 49) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 100) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 49, 69, 77, 67, 130, 47, 12, 32, 30, 124, 87, 40, 61, 26, 133, 125, 89], [2, 50, 107, 3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 103, 51, 45, 54, 91, 136, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 123, 39, 79, 86], [5, 28, 92, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 16, 111, 33, 46, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 112, 18, 11, 68, 6, 44, 25, 83], [9, 84, 128, 10, 126, 31, 138, 62, 82, 101, 119]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [9, 84, 128, 10, 126, 31, 138, 62, 82, 101, 119]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[9,84] + x[84,128] + x[128,10] + x[10,126] + x[126,31] + x[31,138] + x[138,62] + x[62,82] + x[82,101] + x[101,119] + x[119,9] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 50) (3 -> 80) (4 -> 72) (5 -> 62) (6 -> 1) (7 -> 85) (8 -> 122) (9 -> 84) (10 -> 126) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 27) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 74) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 77) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 124) (31 -> 138) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 44) (42 -> 133) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 36) (47 -> 12) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 86) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 28) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 118) (74 -> 88) (75 -> 103) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 3) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 56) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 105) (94 -> 75) (95 -> 66) (96 -> 52) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 17) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 33) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 22) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 16) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 133, 125, 89, 56, 38, 21, 113, 117, 96, 52, 86, 2, 50, 107, 17, 29, 116, 53, 93, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 44, 25, 83, 5, 62, 82, 101, 119, 9, 84, 128, 10, 126, 31, 138, 16, 123, 39, 79, 3, 80, 78, 115, 60, 58, 4, 72, 8, 122, 7, 85, 63, 109, 43, 15, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 28, 92, 102, 137, 140, 24, 94, 75, 103, 51, 45, 54, 91, 136, 111, 33, 46, 36, 73, 118, 22, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 112, 18, 11, 68, 6], [12, 32, 30, 124, 87, 40, 61, 26, 77, 67, 130, 47]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [12, 32, 30, 124, 87, 40, 61, 26, 77, 67, 130, 47]
> Taille du cycle à casser : 12
> Nouvelle contrainte : x[12,32] + x[32,30] + x[30,124] + x[124,87] + x[87,40] + x[40,61] + x[61,26] + x[26,77] + x[77,67] + x[67,130] + x[130,47] + x[47,12] ≤ 11
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 86) (12 -> 32) (13 -> 95) (14 -> 139) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 119) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 34) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 91) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 94) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 112) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 68) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 59) (111 -> 50) (112 -> 18) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 39) (124 -> 87) (125 -> 89) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 91, 136, 111, 50, 107, 3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 24, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 74, 88, 112, 18, 11, 86, 2, 124, 87, 40, 61, 26, 133, 125, 89], [13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [13, 95, 66, 106, 127, 14, 139, 104, 70, 121, 71, 94, 56, 38, 21, 113, 117, 96, 16, 123, 39, 79, 27, 110, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 34, 65]
> Taille du cycle à casser : 38
> Nouvelle contrainte : x[13,95] + x[95,66] + x[66,106] + x[106,127] + x[127,14] + x[14,139] + x[139,104] + x[104,70] + x[70,121] + x[121,71] + x[71,94] + x[94,56] + x[56,38] + x[38,21] + x[21,113] + x[113,117] + x[117,96] + x[96,16] + x[16,123] + x[123,39] + x[39,79] + x[79,27] + x[27,110] + x[110,59] + x[59,35] + x[35,108] + x[108,23] + x[23,134] + x[134,48] + x[48,49] + x[49,69] + x[69,77] + x[77,67] + x[67,130] + x[130,47] + x[47,34] + x[34,65] + x[65,13] ≤ 37
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 19) (2 -> 124) (3 -> 80) (4 -> 72) (5 -> 28) (6 -> 44) (7 -> 85) (8 -> 22) (9 -> 84) (10 -> 105) (11 -> 68) (12 -> 32) (13 -> 95) (14 -> 39) (15 -> 12) (16 -> 123) (17 -> 29) (18 -> 11) (19 -> 42) (20 -> 37) (21 -> 113) (22 -> 118) (23 -> 134) (24 -> 94) (25 -> 83) (26 -> 133) (27 -> 110) (28 -> 92) (29 -> 116) (30 -> 126) (31 -> 33) (32 -> 30) (33 -> 46) (34 -> 65) (35 -> 108) (36 -> 73) (37 -> 55) (38 -> 21) (39 -> 79) (40 -> 61) (41 -> 122) (42 -> 17) (43 -> 15) (44 -> 25) (45 -> 54) (46 -> 74) (47 -> 18) (48 -> 49) (49 -> 69) (50 -> 107) (51 -> 45) (52 -> 75) (53 -> 93) (54 -> 139) (55 -> 64) (56 -> 38) (57 -> 98) (58 -> 4) (59 -> 35) (60 -> 58) (61 -> 26) (62 -> 82) (63 -> 109) (64 -> 114) (65 -> 13) (66 -> 106) (67 -> 130) (68 -> 6) (69 -> 77) (70 -> 121) (71 -> 112) (72 -> 8) (73 -> 52) (74 -> 88) (75 -> 138) (76 -> 90) (77 -> 67) (78 -> 115) (79 -> 27) (80 -> 78) (81 -> 20) (82 -> 101) (83 -> 5) (84 -> 128) (85 -> 63) (86 -> 2) (87 -> 40) (88 -> 34) (89 -> 1) (90 -> 135) (91 -> 136) (92 -> 102) (93 -> 103) (94 -> 56) (95 -> 66) (96 -> 16) (97 -> 57) (98 -> 129) (99 -> 81) (100 -> 76) (101 -> 119) (102 -> 137) (103 -> 51) (104 -> 70) (105 -> 131) (106 -> 127) (107 -> 3) (108 -> 23) (109 -> 43) (110 -> 89) (111 -> 50) (112 -> 59) (113 -> 117) (114 -> 100) (115 -> 60) (116 -> 53) (117 -> 96) (118 -> 36) (119 -> 9) (120 -> 97) (121 -> 71) (122 -> 7) (123 -> 86) (124 -> 87) (125 -> 91) (126 -> 31) (127 -> 14) (128 -> 10) (129 -> 41) (130 -> 47) (131 -> 132) (132 -> 99) (133 -> 125) (134 -> 48) (135 -> 120) (136 -> 111) (137 -> 140) (138 -> 62) (139 -> 104) (140 -> 24) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 19, 42, 17, 29, 116, 53, 93, 103, 51, 45, 54, 139, 104, 70, 121, 71, 112, 59, 35, 108, 23, 134, 48, 49, 69, 77, 67, 130, 47, 18, 11, 68, 6, 44, 25, 83, 5, 28, 92, 102, 137, 140, 24, 94, 56, 38, 21, 113, 117, 96, 16, 123, 86, 2, 124, 87, 40, 61, 26, 133, 125, 91, 136, 111, 50, 107, 3, 80, 78, 115, 60, 58, 4, 72, 8, 22, 118, 36, 73, 52, 75, 138, 62, 82, 101, 119, 9, 84, 128, 10, 105, 131, 132, 99, 81, 20, 37, 55, 64, 114, 100, 76, 90, 135, 120, 97, 57, 98, 129, 41, 122, 7, 85, 63, 109, 43, 15, 12, 32, 30, 126, 31, 33, 46, 74, 88, 34, 65, 13, 95, 66, 106, 127, 14, 39, 79, 27, 110, 89]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 111.0
> Nombre d'itération nécéssaires : 21
> Nombre de contraintes ajoutées : 20
> Ordre de parcours des drônes : 
1 -> 19 -> 42 -> 17 -> 29 -> 116 -> 53 -> 93 -> 103 -> 51 -> 45 -> 54 -> 139 -> 104 -> 70 -> 121 -> 71 -> 112 -> 59 -> 35 -> 108 -> 23 -> 134 -> 48 -> 49 -> 69 -> 77 -> 67 -> 130 -> 47 -> 18 -> 11 -> 68 -> 6 -> 44 -> 25 -> 83 -> 5 -> 28 -> 92 -> 102 -> 137 -> 140 -> 24 -> 94 -> 56 -> 38 -> 21 -> 113 -> 117 -> 96 -> 16 -> 123 -> 86 -> 2 -> 124 -> 87 -> 40 -> 61 -> 26 -> 133 -> 125 -> 91 -> 136 -> 111 -> 50 -> 107 -> 3 -> 80 -> 78 -> 115 -> 60 -> 58 -> 4 -> 72 -> 8 -> 22 -> 118 -> 36 -> 73 -> 52 -> 75 -> 138 -> 62 -> 82 -> 101 -> 119 -> 9 -> 84 -> 128 -> 10 -> 105 -> 131 -> 132 -> 99 -> 81 -> 20 -> 37 -> 55 -> 64 -> 114 -> 100 -> 76 -> 90 -> 135 -> 120 -> 97 -> 57 -> 98 -> 129 -> 41 -> 122 -> 7 -> 85 -> 63 -> 109 -> 43 -> 15 -> 12 -> 32 -> 30 -> 126 -> 31 -> 33 -> 46 -> 74 -> 88 -> 34 -> 65 -> 13 -> 95 -> 66 -> 106 -> 127 -> 14 -> 39 -> 79 -> 27 -> 110 -> 89 -> 1. 
