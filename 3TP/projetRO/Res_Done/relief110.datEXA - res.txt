Résolution exacte pour relief/relief110.dat points à visiter :
Résolution d'initiale :  
> temps total = 112.0
   Permutations :
(1 -> 110) (2 -> 81) (3 -> 77) (4 -> 19) (5 -> 28) (6 -> 64) (7 -> 10) (8 -> 58) (9 -> 5) (10 -> 6) (11 -> 33) (12 -> 61) (13 -> 62) (14 -> 12) (15 -> 106) (16 -> 14) (17 -> 65) (18 -> 52) (19 -> 84) (20 -> 98) (21 -> 2) (22 -> 4) (23 -> 63) (24 -> 101) (25 -> 88) (26 -> 35) (27 -> 100) (28 -> 53) (29 -> 16) (30 -> 45) (31 -> 89) (32 -> 39) (33 -> 103) (34 -> 68) (35 -> 46) (36 -> 72) (37 -> 1) (38 -> 55) (39 -> 40) (40 -> 54) (41 -> 49) (42 -> 32) (43 -> 94) (44 -> 73) (45 -> 25) (46 -> 27) (47 -> 71) (48 -> 96) (49 -> 105) (50 -> 17) (51 -> 92) (52 -> 104) (53 -> 51) (54 -> 66) (55 -> 22) (56 -> 99) (57 -> 82) (58 -> 76) (59 -> 85) (60 -> 93) (61 -> 29) (62 -> 50) (63 -> 8) (64 -> 57) (65 -> 70) (66 -> 3) (67 -> 95) (68 -> 107) (69 -> 41) (70 -> 78) (71 -> 87) (72 -> 34) (73 -> 11) (74 -> 38) (75 -> 18) (76 -> 109) (77 -> 21) (78 -> 37) (79 -> 67) (80 -> 31) (81 -> 43) (82 -> 60) (83 -> 7) (84 -> 44) (85 -> 36) (86 -> 90) (87 -> 26) (88 -> 91) (89 -> 20) (90 -> 75) (91 -> 24) (92 -> 9) (93 -> 69) (94 -> 23) (95 -> 59) (96 -> 47) (97 -> 56) (98 -> 80) (99 -> 86) (100 -> 13) (101 -> 102) (102 -> 15) (103 -> 42) (104 -> 97) (105 -> 48) (106 -> 108) (107 -> 83) (108 -> 30) (109 -> 79) (110 -> 74) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 110, 74, 38, 55, 22, 4, 19, 84, 44, 73, 11, 33, 103, 42, 32, 39, 40, 54, 66, 3, 77, 21, 2, 81, 43, 94, 23, 63, 8, 58, 76, 109, 79, 67, 95, 59, 85, 36, 72, 34, 68, 107, 83, 7, 10, 6, 64, 57, 82, 60, 93, 69, 41, 49, 105, 48, 96, 47, 71, 87, 26, 35, 46, 27, 100, 13, 62, 50, 17, 65, 70, 78, 37], [5, 28, 53, 51, 92, 9], [12, 61, 29, 16, 14], [15, 106, 108, 30, 45, 25, 88, 91, 24, 101, 102], [18, 52, 104, 97, 56, 99, 86, 90, 75], [20, 98, 80, 31, 89]]
> Nombre de cycle(s) trouvé(s) : 6
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [12, 61, 29, 16, 14]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[12,61] + x[61,29] + x[29,16] + x[16,14] + x[14,12] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 113.0
   Permutations :
(1 -> 110) (2 -> 59) (3 -> 77) (4 -> 19) (5 -> 81) (6 -> 64) (7 -> 10) (8 -> 58) (9 -> 5) (10 -> 6) (11 -> 33) (12 -> 61) (13 -> 62) (14 -> 12) (15 -> 106) (16 -> 14) (17 -> 65) (18 -> 52) (19 -> 84) (20 -> 98) (21 -> 2) (22 -> 4) (23 -> 63) (24 -> 101) (25 -> 88) (26 -> 29) (27 -> 100) (28 -> 53) (29 -> 16) (30 -> 45) (31 -> 28) (32 -> 39) (33 -> 103) (34 -> 68) (35 -> 46) (36 -> 72) (37 -> 1) (38 -> 55) (39 -> 40) (40 -> 54) (41 -> 15) (42 -> 32) (43 -> 94) (44 -> 73) (45 -> 30) (46 -> 27) (47 -> 71) (48 -> 96) (49 -> 105) (50 -> 17) (51 -> 92) (52 -> 104) (53 -> 108) (54 -> 66) (55 -> 22) (56 -> 99) (57 -> 82) (58 -> 76) (59 -> 85) (60 -> 93) (61 -> 75) (62 -> 50) (63 -> 8) (64 -> 57) (65 -> 70) (66 -> 3) (67 -> 95) (68 -> 107) (69 -> 41) (70 -> 78) (71 -> 87) (72 -> 79) (73 -> 11) (74 -> 38) (75 -> 18) (76 -> 109) (77 -> 21) (78 -> 37) (79 -> 67) (80 -> 31) (81 -> 43) (82 -> 60) (83 -> 7) (84 -> 44) (85 -> 36) (86 -> 90) (87 -> 26) (88 -> 91) (89 -> 20) (90 -> 49) (91 -> 24) (92 -> 9) (93 -> 69) (94 -> 23) (95 -> 25) (96 -> 47) (97 -> 56) (98 -> 80) (99 -> 86) (100 -> 13) (101 -> 102) (102 -> 34) (103 -> 42) (104 -> 97) (105 -> 48) (106 -> 89) (107 -> 83) (108 -> 35) (109 -> 51) (110 -> 74) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 110, 74, 38, 55, 22, 4, 19, 84, 44, 73, 11, 33, 103, 42, 32, 39, 40, 54, 66, 3, 77, 21, 2, 59, 85, 36, 72, 79, 67, 95, 25, 88, 91, 24, 101, 102, 34, 68, 107, 83, 7, 10, 6, 64, 57, 82, 60, 93, 69, 41, 15, 106, 89, 20, 98, 80, 31, 28, 53, 108, 35, 46, 27, 100, 13, 62, 50, 17, 65, 70, 78, 37], [5, 81, 43, 94, 23, 63, 8, 58, 76, 109, 51, 92, 9], [12, 61, 75, 18, 52, 104, 97, 56, 99, 86, 90, 49, 105, 48, 96, 47, 71, 87, 26, 29, 16, 14], [30, 45]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [30, 45]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,45] + x[45,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 113.0
   Permutations :
(1 -> 110) (2 -> 81) (3 -> 77) (4 -> 19) (5 -> 28) (6 -> 64) (7 -> 10) (8 -> 58) (9 -> 5) (10 -> 6) (11 -> 33) (12 -> 61) (13 -> 62) (14 -> 12) (15 -> 106) (16 -> 14) (17 -> 65) (18 -> 52) (19 -> 84) (20 -> 98) (21 -> 2) (22 -> 16) (23 -> 63) (24 -> 40) (25 -> 88) (26 -> 29) (27 -> 100) (28 -> 53) (29 -> 54) (30 -> 45) (31 -> 89) (32 -> 39) (33 -> 103) (34 -> 68) (35 -> 46) (36 -> 72) (37 -> 1) (38 -> 55) (39 -> 30) (40 -> 43) (41 -> 4) (42 -> 32) (43 -> 94) (44 -> 73) (45 -> 25) (46 -> 27) (47 -> 71) (48 -> 96) (49 -> 105) (50 -> 17) (51 -> 92) (52 -> 104) (53 -> 101) (54 -> 66) (55 -> 22) (56 -> 99) (57 -> 82) (58 -> 76) (59 -> 85) (60 -> 93) (61 -> 75) (62 -> 50) (63 -> 8) (64 -> 57) (65 -> 70) (66 -> 3) (67 -> 95) (68 -> 107) (69 -> 41) (70 -> 78) (71 -> 87) (72 -> 34) (73 -> 11) (74 -> 38) (75 -> 18) (76 -> 109) (77 -> 21) (78 -> 37) (79 -> 67) (80 -> 31) (81 -> 51) (82 -> 60) (83 -> 7) (84 -> 44) (85 -> 36) (86 -> 90) (87 -> 26) (88 -> 91) (89 -> 20) (90 -> 49) (91 -> 24) (92 -> 9) (93 -> 69) (94 -> 23) (95 -> 59) (96 -> 47) (97 -> 56) (98 -> 80) (99 -> 86) (100 -> 13) (101 -> 102) (102 -> 15) (103 -> 42) (104 -> 97) (105 -> 48) (106 -> 108) (107 -> 83) (108 -> 35) (109 -> 79) (110 -> 74) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 110, 74, 38, 55, 22, 16, 14, 12, 61, 75, 18, 52, 104, 97, 56, 99, 86, 90, 49, 105, 48, 96, 47, 71, 87, 26, 29, 54, 66, 3, 77, 21, 2, 81, 51, 92, 9, 5, 28, 53, 101, 102, 15, 106, 108, 35, 46, 27, 100, 13, 62, 50, 17, 65, 70, 78, 37], [4, 19, 84, 44, 73, 11, 33, 103, 42, 32, 39, 30, 45, 25, 88, 91, 24, 40, 43, 94, 23, 63, 8, 58, 76, 109, 79, 67, 95, 59, 85, 36, 72, 34, 68, 107, 83, 7, 10, 6, 64, 57, 82, 60, 93, 69, 41], [20, 98, 80, 31, 89]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [20, 98, 80, 31, 89]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[20,98] + x[98,80] + x[80,31] + x[31,89] + x[89,20] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 113.0
   Permutations :
(1 -> 110) (2 -> 81) (3 -> 77) (4 -> 19) (5 -> 80) (6 -> 64) (7 -> 10) (8 -> 58) (9 -> 5) (10 -> 6) (11 -> 33) (12 -> 61) (13 -> 62) (14 -> 12) (15 -> 106) (16 -> 14) (17 -> 65) (18 -> 52) (19 -> 84) (20 -> 98) (21 -> 2) (22 -> 16) (23 -> 63) (24 -> 40) (25 -> 88) (26 -> 29) (27 -> 100) (28 -> 53) (29 -> 54) (30 -> 45) (31 -> 28) (32 -> 39) (33 -> 103) (34 -> 68) (35 -> 46) (36 -> 72) (37 -> 1) (38 -> 55) (39 -> 30) (40 -> 43) (41 -> 4) (42 -> 32) (43 -> 94) (44 -> 73) (45 -> 25) (46 -> 27) (47 -> 71) (48 -> 96) (49 -> 105) (50 -> 17) (51 -> 92) (52 -> 104) (53 -> 108) (54 -> 66) (55 -> 22) (56 -> 99) (57 -> 82) (58 -> 76) (59 -> 85) (60 -> 93) (61 -> 75) (62 -> 50) (63 -> 8) (64 -> 57) (65 -> 70) (66 -> 3) (67 -> 95) (68 -> 107) (69 -> 41) (70 -> 78) (71 -> 87) (72 -> 34) (73 -> 11) (74 -> 38) (75 -> 18) (76 -> 109) (77 -> 21) (78 -> 37) (79 -> 67) (80 -> 31) (81 -> 51) (82 -> 60) (83 -> 7) (84 -> 44) (85 -> 36) (86 -> 90) (87 -> 26) (88 -> 91) (89 -> 20) (90 -> 49) (91 -> 24) (92 -> 9) (93 -> 69) (94 -> 23) (95 -> 59) (96 -> 47) (97 -> 56) (98 -> 101) (99 -> 86) (100 -> 13) (101 -> 102) (102 -> 15) (103 -> 42) (104 -> 97) (105 -> 48) (106 -> 89) (107 -> 83) (108 -> 35) (109 -> 79) (110 -> 74) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 110, 74, 38, 55, 22, 16, 14, 12, 61, 75, 18, 52, 104, 97, 56, 99, 86, 90, 49, 105, 48, 96, 47, 71, 87, 26, 29, 54, 66, 3, 77, 21, 2, 81, 51, 92, 9, 5, 80, 31, 28, 53, 108, 35, 46, 27, 100, 13, 62, 50, 17, 65, 70, 78, 37], [4, 19, 84, 44, 73, 11, 33, 103, 42, 32, 39, 30, 45, 25, 88, 91, 24, 40, 43, 94, 23, 63, 8, 58, 76, 109, 79, 67, 95, 59, 85, 36, 72, 34, 68, 107, 83, 7, 10, 6, 64, 57, 82, 60, 93, 69, 41], [15, 106, 89, 20, 98, 101, 102]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [15, 106, 89, 20, 98, 101, 102]
> Taille du cycle à casser : 7
> Nouvelle contrainte : x[15,106] + x[106,89] + x[89,20] + x[20,98] + x[98,101] + x[101,102] + x[102,15] ≤ 6
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 113.0
   Permutations :
(1 -> 110) (2 -> 81) (3 -> 77) (4 -> 19) (5 -> 14) (6 -> 64) (7 -> 10) (8 -> 58) (9 -> 5) (10 -> 6) (11 -> 33) (12 -> 61) (13 -> 62) (14 -> 12) (15 -> 32) (16 -> 106) (17 -> 65) (18 -> 52) (19 -> 84) (20 -> 98) (21 -> 2) (22 -> 4) (23 -> 63) (24 -> 101) (25 -> 88) (26 -> 35) (27 -> 100) (28 -> 53) (29 -> 16) (30 -> 45) (31 -> 28) (32 -> 39) (33 -> 103) (34 -> 68) (35 -> 46) (36 -> 72) (37 -> 1) (38 -> 55) (39 -> 40) (40 -> 54) (41 -> 49) (42 -> 67) (43 -> 94) (44 -> 73) (45 -> 25) (46 -> 27) (47 -> 71) (48 -> 96) (49 -> 105) (50 -> 17) (51 -> 92) (52 -> 104) (53 -> 108) (54 -> 66) (55 -> 22) (56 -> 107) (57 -> 82) (58 -> 76) (59 -> 85) (60 -> 93) (61 -> 29) (62 -> 50) (63 -> 8) (64 -> 57) (65 -> 70) (66 -> 3) (67 -> 95) (68 -> 51) (69 -> 41) (70 -> 78) (71 -> 87) (72 -> 34) (73 -> 11) (74 -> 38) (75 -> 18) (76 -> 109) (77 -> 21) (78 -> 37) (79 -> 99) (80 -> 31) (81 -> 43) (82 -> 60) (83 -> 7) (84 -> 44) (85 -> 36) (86 -> 90) (87 -> 26) (88 -> 91) (89 -> 20) (90 -> 75) (91 -> 24) (92 -> 9) (93 -> 69) (94 -> 23) (95 -> 59) (96 -> 47) (97 -> 56) (98 -> 80) (99 -> 86) (100 -> 13) (101 -> 102) (102 -> 15) (103 -> 42) (104 -> 97) (105 -> 48) (106 -> 89) (107 -> 83) (108 -> 30) (109 -> 79) (110 -> 74) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 110, 74, 38, 55, 22, 4, 19, 84, 44, 73, 11, 33, 103, 42, 67, 95, 59, 85, 36, 72, 34, 68, 51, 92, 9, 5, 14, 12, 61, 29, 16, 106, 89, 20, 98, 80, 31, 28, 53, 108, 30, 45, 25, 88, 91, 24, 101, 102, 15, 32, 39, 40, 54, 66, 3, 77, 21, 2, 81, 43, 94, 23, 63, 8, 58, 76, 109, 79, 99, 86, 90, 75, 18, 52, 104, 97, 56, 107, 83, 7, 10, 6, 64, 57, 82, 60, 93, 69, 41, 49, 105, 48, 96, 47, 71, 87, 26, 35, 46, 27, 100, 13, 62, 50, 17, 65, 70, 78, 37]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 113.0
> Nombre d'itération nécéssaires : 5
> Nombre de contraintes ajoutées : 4
> Ordre de parcours des drônes : 
1 -> 110 -> 74 -> 38 -> 55 -> 22 -> 4 -> 19 -> 84 -> 44 -> 73 -> 11 -> 33 -> 103 -> 42 -> 67 -> 95 -> 59 -> 85 -> 36 -> 72 -> 34 -> 68 -> 51 -> 92 -> 9 -> 5 -> 14 -> 12 -> 61 -> 29 -> 16 -> 106 -> 89 -> 20 -> 98 -> 80 -> 31 -> 28 -> 53 -> 108 -> 30 -> 45 -> 25 -> 88 -> 91 -> 24 -> 101 -> 102 -> 15 -> 32 -> 39 -> 40 -> 54 -> 66 -> 3 -> 77 -> 21 -> 2 -> 81 -> 43 -> 94 -> 23 -> 63 -> 8 -> 58 -> 76 -> 109 -> 79 -> 99 -> 86 -> 90 -> 75 -> 18 -> 52 -> 104 -> 97 -> 56 -> 107 -> 83 -> 7 -> 10 -> 6 -> 64 -> 57 -> 82 -> 60 -> 93 -> 69 -> 41 -> 49 -> 105 -> 48 -> 96 -> 47 -> 71 -> 87 -> 26 -> 35 -> 46 -> 27 -> 100 -> 13 -> 62 -> 50 -> 17 -> 65 -> 70 -> 78 -> 37 -> 1. 
