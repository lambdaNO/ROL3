Résolution exacte pour plat/plat120.dat points à visiter :
Résolution d'initiale :  
> temps total = 92.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 27) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 96) (69 -> 74) (70 -> 95) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 69) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 37) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 70) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 86) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32], [2, 104], [3, 20], [4, 106], [5, 91], [6, 117], [7, 62], [8, 64], [9, 120], [10, 76], [11, 27], [12, 88], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [23, 110], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [36, 45], [37, 83], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 100], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [59, 80], [60, 89], [61, 84], [63, 115], [67, 118], [68, 96], [69, 74], [70, 95], [72, 109], [73, 113], [75, 105], [81, 111], [86, 108], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 60
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 32]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,32] + x[32,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 92.0
   Permutations :
(1 -> 10) (2 -> 104) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 86) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 96) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 36) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 76, 73, 113, 34, 94, 36, 67, 118, 32], [2, 104], [3, 20], [4, 106], [5, 91], [6, 117], [7, 62], [8, 64], [9, 120], [11, 45], [12, 88], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [23, 110], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [35, 47], [37, 74], [38, 86, 50, 100, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [59, 80], [60, 89], [61, 84], [63, 115], [68, 96], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 54

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 104]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,104] + x[104,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 93.0
   Permutations :
(1 -> 32) (2 -> 100) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 96) (69 -> 27) (70 -> 95) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 80) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 36, 45, 11, 104, 2, 100, 50, 86, 108, 70, 95, 83, 80, 59, 110, 23], [3, 20], [4, 106], [5, 91], [6, 117], [7, 62], [8, 64], [9, 120], [10, 76], [12, 88], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [60, 89], [61, 84], [63, 115], [68, 96], [72, 109], [73, 113], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 51

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [3, 20]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,20] + x[20,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 94.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 2) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 96) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 11) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 2, 104, 11, 45, 36, 67, 118, 32], [4, 106], [5, 91], [6, 117], [7, 62], [8, 64], [9, 120], [10, 76], [12, 88], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54, 100, 50, 86], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [59, 80], [60, 89], [61, 84], [63, 115], [68, 96], [70, 108], [72, 109], [73, 113], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 53

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [4, 106]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,106] + x[106,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 56) (5 -> 18) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 113) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 86) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 96) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 60) (90 -> 79) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 44) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 11) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 89, 60, 91, 5, 18, 13, 113, 73, 76, 10, 106, 4, 56, 90, 79, 57, 12, 88, 68, 96, 44, 78, 2, 104, 11, 45, 36, 67, 118, 32], [6, 117], [7, 62], [8, 64], [9, 120], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 86, 50, 100, 54], [39, 40], [41, 65], [42, 43], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 42

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [6, 117]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,117] + x[117,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 2) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 88) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 11) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 6) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 2, 104, 11, 45, 36, 67, 118, 32], [4, 106, 10, 76, 73, 113, 6, 117, 96, 68, 88, 12, 57, 79, 90, 56], [5, 91], [7, 62], [8, 64], [9, 120], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54, 100, 50, 86], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [60, 89], [61, 84], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 46

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [5, 91]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,91] + x[91,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 96.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 117) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 86) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 88) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 44) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 11) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 6) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 56, 4, 106, 10, 76, 73, 113, 6, 117, 96, 44, 78, 2, 104, 11, 45, 36, 67, 118, 32], [7, 62], [8, 64], [9, 120], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 86, 50, 100, 54], [39, 40], [41, 65], [42, 43], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 42

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [7, 62]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,62] + x[62,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 100.0
   Permutations :
(1 -> 23) (2 -> 67) (3 -> 89) (4 -> 61) (5 -> 68) (6 -> 113) (7 -> 118) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 96) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 14) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 89, 60, 91, 5, 68, 96, 117, 6, 113, 73, 76, 10, 106, 4, 61, 84, 62, 7, 118, 32], [2, 67, 36, 45, 11, 104], [8, 64], [9, 120], [12, 88], [13, 18], [14, 92], [15, 102], [16, 119], [17, 66], [19, 116], [21, 103], [22, 31], [24, 33], [25, 114], [26, 107], [27, 69], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54, 100, 50, 86], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [59, 80], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 45

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [8, 64]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,64] + x[64,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 101.0
   Permutations :
(1 -> 23) (2 -> 100) (3 -> 89) (4 -> 56) (5 -> 68) (6 -> 117) (7 -> 118) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 11) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 20) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 8) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 48) (102 -> 6) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 8, 64, 21, 103, 14, 92, 15, 102, 6, 117, 96, 27, 69, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 118, 32], [2, 100, 54, 38, 11, 45, 36, 67, 104], [4, 56, 76, 10, 106], [9, 120], [13, 18], [16, 119], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 86], [52, 112], [53, 85], [55, 93], [58, 77], [61, 84], [63, 115], [70, 108], [72, 109], [73, 113], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 39

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [9, 120]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,120] + x[120,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 102) (7 -> 62) (8 -> 64) (9 -> 100) (10 -> 76) (11 -> 27) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 8) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 96) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 2) (101 -> 48) (102 -> 7) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 89, 60, 91, 5, 68, 96, 117, 6, 102, 7, 62, 84, 61, 4, 106, 10, 76, 73, 113, 34, 94, 36, 45, 11, 27, 69, 120, 9, 100, 2, 104, 67, 118, 32], [8, 64, 21], [12, 88], [13, 18], [14, 103], [15, 92], [16, 119], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 86], [52, 112], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [59, 80], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 41

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [12, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,88] + x[88,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 56) (5 -> 68) (6 -> 102) (7 -> 118) (8 -> 21) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 57) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 64) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 2) (101 -> 48) (102 -> 6) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 118, 32], [2, 104, 67, 36, 45, 11, 27, 69, 120, 9, 100], [4, 56, 76, 10, 106], [6, 102], [8, 21, 64], [13, 18], [14, 103], [15, 92], [16, 119], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 86], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [70, 108], [72, 109], [73, 113], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 45

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [6, 102]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,102] + x[102,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 103.0
   Permutations :
(1 -> 32) (2 -> 100) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 102) (7 -> 62) (8 -> 21) (9 -> 120) (10 -> 76) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 110) (21 -> 64) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 56) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 7) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 36, 45, 11, 104, 2, 100, 50, 86, 108, 70, 9, 120, 69, 27, 96, 117, 6, 102, 7, 62, 84, 61, 4, 106, 10, 76, 56, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89, 3, 20, 110, 23], [8, 21, 64], [13, 18], [14, 103], [15, 92], [16, 119], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [63, 115], [72, 109], [73, 113], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 38

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [13, 18]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,18] + x[18,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 104.0
   Permutations :
(1 -> 32) (2 -> 100) (3 -> 20) (4 -> 106) (5 -> 68) (6 -> 102) (7 -> 62) (8 -> 21) (9 -> 120) (10 -> 91) (11 -> 104) (12 -> 57) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 119) (17 -> 66) (18 -> 5) (19 -> 116) (20 -> 110) (21 -> 64) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 7) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 36, 45, 11, 104, 2, 100, 9, 120, 69, 27, 96, 117, 6, 102, 7, 62, 84, 61, 4, 106, 10, 91, 60, 89, 3, 20, 110, 23], [5, 68, 88, 12, 57, 79, 90, 56, 76, 73, 113, 13, 18], [8, 21, 64], [14, 103], [15, 92], [16, 119], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 86], [52, 112], [53, 85], [55, 93], [58, 77], [59, 80], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 39

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [14, 103]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,103] + x[103,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 104.0
   Permutations :
(1 -> 10) (2 -> 100) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 117) (7 -> 118) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 5) (19 -> 116) (20 -> 110) (21 -> 103) (22 -> 31) (23 -> 82) (24 -> 33) (25 -> 49) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 114) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 8) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 6) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 61, 84, 62, 7, 118, 32], [2, 100, 9, 120, 69, 27, 11, 45, 36, 67, 104], [3, 20, 110, 59, 80, 8, 64, 21, 103, 14, 92, 15, 102, 6, 117, 96, 68, 88, 12, 57, 79, 90, 56, 76, 73, 113, 13, 18, 5, 91, 60, 89], [16, 119], [17, 66], [19, 116], [22, 31], [23, 82], [24, 33], [25, 49, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [50, 86], [52, 112], [53, 85], [55, 93], [58, 77], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 36

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [16, 119]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,119] + x[119,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 10) (2 -> 104) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 117) (7 -> 118) (8 -> 64) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 57) (13 -> 18) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 5) (19 -> 116) (20 -> 110) (21 -> 103) (22 -> 31) (23 -> 82) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 114) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 8) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 68) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 2) (101 -> 48) (102 -> 6) (103 -> 16) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 61, 84, 62, 7, 118, 32], [2, 104, 67, 36, 45, 11, 27, 69, 120, 9, 100], [3, 20, 110, 59, 80, 8, 64, 21, 103, 16, 119, 52, 112, 92, 15, 102, 6, 117, 96, 68, 88, 12, 57, 79, 90, 56, 76, 73, 113, 13, 18, 5, 91, 60, 89], [14, 25], [17, 66], [19, 116], [22, 31], [23, 82], [24, 33], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 114], [50, 86], [53, 85], [55, 93], [58, 77], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 35

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [14, 25]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,25] + x[25,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 32) (2 -> 100) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 30) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 92) (15 -> 102) (16 -> 97) (17 -> 66) (18 -> 5) (19 -> 116) (20 -> 110) (21 -> 103) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 8) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 96) (69 -> 27) (70 -> 9) (71 -> 73) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 7) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 7, 62, 90, 79, 57, 12, 88, 68, 96, 117, 6, 30, 71, 73, 113, 13, 18, 5, 91, 60, 89, 3, 20, 110, 23], [2, 100, 50, 86, 108, 70, 9, 120, 69, 27, 11, 45, 36, 67, 104], [4, 56, 76, 10, 106], [8, 64, 21, 103, 14, 92, 112, 52, 119, 16, 97, 46], [15, 102], [17, 66], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [48, 101], [49, 82], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [15, 102]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,102] + x[102,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 105.0
   Permutations :
(1 -> 10) (2 -> 104) (3 -> 89) (4 -> 61) (5 -> 18) (6 -> 102) (7 -> 118) (8 -> 21) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 64) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 96) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 56) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 60) (90 -> 79) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 2) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 61, 84, 62, 7, 118, 32], [2, 104, 67, 36, 45, 11, 27, 69, 120, 9, 100], [3, 89, 60, 91, 5, 18, 13, 113, 73, 76, 56, 90, 79, 57, 12, 88, 68, 96, 117, 6, 102, 15, 92, 112, 52, 119, 16, 103, 14, 25, 114, 49, 82, 23, 110, 20], [8, 21, 64], [17, 66], [19, 116], [22, 31], [24, 33], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [50, 86], [53, 85], [55, 93], [58, 77], [59, 80], [63, 115], [70, 108], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [17, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,66] + x[66,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 108.0
   Permutations :
(1 -> 10) (2 -> 100) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 5) (19 -> 116) (20 -> 110) (21 -> 64) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 96) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 7) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 56, 76, 73, 113, 13, 18, 5, 91, 60, 89, 3, 20, 110, 23], [2, 100, 9, 120, 69, 27, 11, 45, 36, 67, 104], [6, 66, 17, 70, 108, 14, 103, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 79, 57, 12, 88, 68, 96, 117], [19, 116], [22, 31], [24, 33], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [32, 118], [34, 94], [35, 47], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [48, 101], [49, 82], [50, 86], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [19, 116]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,116] + x[116,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 109.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 117) (7 -> 102) (8 -> 64) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 110) (21 -> 103) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 8) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 6) (67 -> 2) (68 -> 5) (69 -> 120) (70 -> 17) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 83) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 12) (96 -> 19) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 11) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 2, 104, 11, 27, 69, 120, 9, 100, 50, 86, 108, 70, 17, 66, 6, 117, 96, 19, 116, 18, 13, 113, 73, 76, 10, 106, 4, 61, 84, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 103, 14, 25, 114, 49, 82, 23], [3, 20, 110, 59, 80, 83, 95, 12, 88, 68, 5, 91, 60, 89], [22, 31], [24, 33], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [36, 45], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [48, 101], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [22, 31]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,31] + x[31,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 111.0
   Permutations :
(1 -> 10) (2 -> 78) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 108) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 96) (20 -> 110) (21 -> 103) (22 -> 31) (23 -> 82) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 8) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 86) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 56, 76, 73, 113, 13, 18, 116, 19, 96, 117, 6, 66, 17, 70, 9, 120, 69, 27, 11, 104, 2, 78, 44, 32], [3, 20, 110, 23, 82, 49, 114, 25, 14, 108, 86, 50, 100, 22, 31, 8, 64, 21, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89], [24, 33], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [36, 45], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [46, 97], [48, 101], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [67, 118], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [24, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,33] + x[33,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 10) (2 -> 78) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 31) (9 -> 120) (10 -> 106) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 96) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 110) (24 -> 21) (25 -> 114) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 5) (69 -> 27) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 106, 4, 56, 76, 73, 113, 13, 18, 116, 19, 96, 117, 6, 66, 17, 70, 108, 14, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 21, 64, 8, 31, 22, 100, 9, 120, 69, 27, 11, 104, 2, 78, 44, 32], [23, 110], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [36, 45], [37, 74], [38, 54], [39, 40], [42, 43], [46, 97], [48, 101], [49, 82], [50, 86], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [67, 118], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 30

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [23, 110]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,110] + x[110,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 64) (9 -> 100) (10 -> 76) (11 -> 27) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 96) (20 -> 110) (21 -> 24) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 8) (32 -> 118) (33 -> 83) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 2) (68 -> 5) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 12) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 11) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 2, 104, 11, 27, 69, 120, 9, 100, 22, 31, 8, 64, 21, 24, 33, 83, 95, 12, 88, 68, 5, 91, 60, 89, 3, 20, 110, 23], [4, 106, 10, 76, 73, 113, 13, 18, 116, 19, 96, 117, 6, 66, 17, 70, 108, 14, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 56], [25, 114], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [35, 47], [36, 45], [37, 74], [38, 54], [39, 40], [41, 65], [42, 43], [44, 78], [46, 97], [48, 101], [49, 82], [50, 86], [53, 85], [55, 93], [57, 79], [58, 77], [59, 80], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 31

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [25, 114]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,114] + x[114,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 113.0
   Permutations :
(1 -> 32) (2 -> 67) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 102) (7 -> 62) (8 -> 31) (9 -> 70) (10 -> 1) (11 -> 104) (12 -> 88) (13 -> 18) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 116) (19 -> 96) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 110) (24 -> 21) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 117) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 76) (67 -> 36) (68 -> 5) (69 -> 120) (70 -> 17) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 83) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 12) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 47) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 7) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 7, 62, 90, 56, 4, 106, 10], [2, 67, 36, 45, 11, 104], [3, 20, 65, 41, 33, 24, 21, 64, 8, 31, 22, 100, 50, 86, 108, 47, 35, 117, 6, 102, 15, 92, 112, 52, 119, 16, 103, 14, 25, 114, 49, 82, 23, 110, 59, 80, 83, 95, 12, 88, 68, 5, 91, 60, 89], [9, 70, 17, 66, 76, 73, 113, 13, 18, 116, 19, 96, 27, 69, 120], [26, 107], [28, 51], [29, 99], [30, 71], [34, 94], [37, 74], [38, 54], [39, 40], [42, 43], [44, 78], [46, 97], [48, 101], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [26, 107]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,107] + x[107,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 115.0
   Permutations :
(1 -> 32) (2 -> 44) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 102) (8 -> 31) (9 -> 120) (10 -> 1) (11 -> 104) (12 -> 57) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 110) (24 -> 21) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 27) (70 -> 95) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 107) (75 -> 105) (76 -> 56) (77 -> 58) (78 -> 3) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 23) (83 -> 37) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 36, 45, 11, 104, 2, 44, 78, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 35, 47, 108, 14, 25, 114, 49, 82, 23, 110, 20, 65, 41, 33, 24, 21, 64, 8, 31, 22, 100, 9, 120, 69, 27, 96, 117, 6, 66, 17, 70, 95, 83, 37, 74, 107, 26, 48, 101, 19, 116, 18, 13, 113, 73, 76, 56, 4, 106, 10], [28, 51], [29, 99], [30, 71], [34, 94], [38, 54], [39, 40], [42, 43], [46, 97], [50, 86], [53, 85], [55, 93], [58, 77], [59, 80], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [28, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,51] + x[51,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 116.0
   Permutations :
(1 -> 32) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 31) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 1) (24 -> 21) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 11) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 80) (35 -> 47) (36 -> 94) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 103) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 113) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 12) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 74) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 104, 2, 78, 44, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 56, 4, 106, 10, 76, 73, 113, 13, 18, 116, 19, 101, 48, 26, 107, 74, 37, 83, 95, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 21, 64, 8, 31, 22, 100, 50, 86, 108, 14, 25, 114, 49, 82, 51, 28, 11, 45, 36, 94, 34, 80, 59, 110, 23], [6, 66, 17, 70, 9, 120, 69, 27, 96, 117], [29, 99], [30, 71], [35, 47], [38, 54], [39, 40], [42, 43], [46, 97], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [29, 99]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[29,99] + x[99,29] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 56) (5 -> 18) (6 -> 117) (7 -> 102) (8 -> 64) (9 -> 100) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 101) (20 -> 3) (21 -> 24) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 11) (29 -> 1) (30 -> 71) (31 -> 74) (32 -> 118) (33 -> 41) (34 -> 94) (35 -> 47) (36 -> 99) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 6) (67 -> 2) (68 -> 96) (69 -> 120) (70 -> 17) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 8) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 12) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 116) (108 -> 70) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 35) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 8, 64, 21, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 18, 13, 113, 73, 76, 10, 106, 4, 56, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 14, 25, 114, 49, 82, 51, 28, 11, 45, 36, 99, 29], [2, 104, 67], [6, 117, 35, 47, 108, 70, 17, 66], [9, 100, 22, 31, 74, 37, 83, 95, 12, 88, 68, 96, 27, 69, 120], [19, 101, 48, 26, 107, 116], [30, 71], [32, 118], [34, 94], [38, 54], [39, 40], [42, 43], [44, 78], [46, 97], [50, 86], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [30, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,71] + x[71,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 30) (7 -> 102) (8 -> 64) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 110) (21 -> 24) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 48) (27 -> 69) (28 -> 12) (29 -> 99) (30 -> 71) (31 -> 8) (32 -> 118) (33 -> 74) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 32) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 5) (69 -> 120) (70 -> 17) (71 -> 72) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 62) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 70) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 36) (100 -> 22) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 27, 69, 120, 9, 100, 22, 31, 8, 64, 21, 24, 33, 74, 37, 83, 95, 70, 17, 66, 6, 30, 71, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 73, 76, 10, 106, 4, 56, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 35, 47, 108, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89, 3, 20, 110, 23], [2, 78, 44, 32, 118, 67, 104], [34, 94], [38, 54], [39, 40], [41, 65], [42, 43], [46, 97], [50, 86], [53, 85], [55, 93], [57, 79], [58, 77], [59, 80], [61, 84], [63, 115], [75, 105], [81, 111], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [34, 94]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,94] + x[94,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 29) (2 -> 104) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 30) (7 -> 102) (8 -> 31) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 1) (24 -> 21) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 12) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 44) (33 -> 24) (34 -> 80) (35 -> 47) (36 -> 94) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 118) (68 -> 5) (69 -> 27) (70 -> 17) (71 -> 72) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 62) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 36) (100 -> 9) (101 -> 19) (102 -> 15) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 32) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 94, 34, 80, 59, 110, 23], [2, 104, 67, 118, 32, 44, 78], [3, 20, 65, 41, 33, 24, 21, 64, 8, 31, 22, 100, 9, 120, 69, 27, 96, 117, 35, 47, 108, 70, 17, 66, 6, 30, 71, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 73, 76, 10, 106, 4, 56, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89], [11, 45], [37, 74], [38, 54], [39, 40], [42, 43], [46, 97], [50, 86], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [11, 45]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,45] + x[45,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 119.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 62) (8 -> 64) (9 -> 100) (10 -> 76) (11 -> 45) (12 -> 28) (13 -> 18) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 24) (22 -> 31) (23 -> 113) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 1) (30 -> 6) (31 -> 8) (32 -> 118) (33 -> 41) (34 -> 80) (35 -> 117) (36 -> 94) (37 -> 99) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 26) (49 -> 114) (50 -> 86) (51 -> 82) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 2) (68 -> 88) (69 -> 120) (70 -> 108) (71 -> 30) (72 -> 109) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 11) (105 -> 75) (106 -> 10) (107 -> 74) (108 -> 47) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 67) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 2, 104, 11, 45, 36, 94, 34, 80, 59, 110, 23, 113, 13, 18, 116, 19, 101, 48, 26, 107, 74, 37, 99, 29], [3, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 49, 114, 25, 14, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 108, 47, 35, 117, 96, 27, 69, 120, 9, 100, 22, 31, 8, 64, 21, 24, 33, 41, 65, 20], [38, 54], [39, 40], [42, 43], [44, 78], [46, 97], [50, 86], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [38, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[38,54] + x[54,38] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 119.0
   Permutations :
(1 -> 29) (2 -> 104) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 80) (9 -> 120) (10 -> 76) (11 -> 38) (12 -> 88) (13 -> 113) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 100) (23 -> 82) (24 -> 21) (25 -> 49) (26 -> 48) (27 -> 96) (28 -> 12) (29 -> 99) (30 -> 6) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 118) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 71) (74 -> 107) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 37) (100 -> 2) (101 -> 19) (102 -> 7) (103 -> 16) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 25) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 32) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 38, 54, 31, 22, 100, 2, 104, 67, 118, 32], [3, 20, 65, 41, 33, 24, 21, 64, 8, 80, 59, 110, 23, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89], [4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 96, 117, 35, 47, 108, 14, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61], [25, 49, 114], [39, 40], [42, 43], [44, 78], [46, 97], [50, 86], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [39, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,40] + x[40,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 29) (2 -> 67) (3 -> 94) (4 -> 61) (5 -> 91) (6 -> 66) (7 -> 102) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 38) (12 -> 88) (13 -> 18) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 24) (22 -> 31) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 12) (29 -> 99) (30 -> 6) (31 -> 8) (32 -> 118) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 80) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 104) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 71) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 60) (90 -> 56) (91 -> 10) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 36) (100 -> 22) (101 -> 48) (102 -> 15) (103 -> 39) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 109) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 35) (118 -> 32) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 38, 54, 100, 22, 31, 8, 64, 21, 24, 33, 41, 65, 20, 3, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 96, 117, 35, 47, 108, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 10, 106, 4, 61, 84, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 39, 40, 80, 59, 110, 23], [2, 67, 104], [32, 118], [37, 74], [42, 43], [44, 78], [46, 97], [50, 86], [53, 85], [55, 93], [56, 90], [57, 79], [58, 77], [60, 89], [63, 115], [73, 76], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [32, 118]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[32,118] + x[118,32] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 32) (2 -> 44) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 80) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 108) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 65) (21 -> 64) (22 -> 31) (23 -> 82) (24 -> 21) (25 -> 49) (26 -> 107) (27 -> 11) (28 -> 12) (29 -> 1) (30 -> 6) (31 -> 54) (32 -> 118) (33 -> 24) (34 -> 113) (35 -> 47) (36 -> 94) (37 -> 99) (38 -> 86) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 26) (49 -> 114) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 40) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 7) (103 -> 16) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 74) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 104, 2, 44, 78, 40, 39, 103, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 56, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 11, 45, 36, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 74, 37, 99, 29], [3, 20, 65, 41, 33, 24, 21, 64, 8, 80, 59, 110, 23, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89], [14, 108], [22, 31, 54, 38, 86, 50, 100], [25, 49, 114], [35, 47], [42, 43], [46, 97], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [14, 108]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,108] + x[108,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 30) (7 -> 118) (8 -> 80) (9 -> 70) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 31) (23 -> 82) (24 -> 21) (25 -> 40) (26 -> 48) (27 -> 69) (28 -> 12) (29 -> 99) (30 -> 71) (31 -> 54) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 86) (39 -> 102) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 42) (44 -> 32) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 5) (69 -> 120) (70 -> 17) (71 -> 72) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 62) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 73) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 36) (100 -> 22) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 27, 69, 120, 9, 70, 17, 66, 6, 30, 71, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 73, 76, 10, 106, 4, 56, 90, 62, 7, 118, 67, 104, 2, 78, 44, 32], [3, 20, 65, 41, 33, 24, 21, 64, 8, 80, 59, 110, 23, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89], [14, 25, 40, 39, 102, 15, 92, 112, 52, 119, 16, 103, 35, 47, 108], [22, 31, 54, 38, 86, 50, 100], [37, 74], [42, 43], [46, 97], [49, 114], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [37, 74]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[37,74] + x[74,37] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 29) (2 -> 104) (3 -> 89) (4 -> 56) (5 -> 68) (6 -> 30) (7 -> 118) (8 -> 64) (9 -> 70) (10 -> 106) (11 -> 27) (12 -> 28) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 24) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 40) (26 -> 48) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 54) (32 -> 1) (33 -> 41) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 86) (39 -> 102) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 82) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 6) (67 -> 2) (68 -> 88) (69 -> 120) (70 -> 17) (71 -> 73) (72 -> 109) (73 -> 76) (74 -> 107) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 8) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 37) (100 -> 22) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 27, 69, 120, 9, 70, 17, 66, 6, 30, 71, 73, 76, 10, 106, 4, 56, 90, 62, 7, 118, 32], [2, 104, 67], [3, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 23, 110, 59, 80, 8, 64, 21, 24, 33, 41, 65, 20], [14, 25, 40, 39, 102, 15, 92, 112, 52, 119, 16, 103, 35, 47, 108], [22, 31, 54, 38, 86, 50, 100], [42, 43], [44, 78], [46, 97], [49, 114], [53, 85], [55, 93], [57, 79], [58, 77], [61, 84], [63, 115], [72, 109], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [42, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[42,43] + x[43,42] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 32) (2 -> 100) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 28) (13 -> 18) (14 -> 108) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 1) (30 -> 6) (31 -> 22) (32 -> 118) (33 -> 74) (34 -> 113) (35 -> 103) (36 -> 94) (37 -> 99) (38 -> 54) (39 -> 40) (40 -> 25) (41 -> 65) (42 -> 93) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 26) (49 -> 114) (50 -> 86) (51 -> 82) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 24) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 43) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 7) (103 -> 39) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 109) (108 -> 47) (109 -> 72) (110 -> 20) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 67, 104, 2, 100, 50, 86, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 56, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 11, 45, 36, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 43, 42, 93, 55, 24, 33, 74, 37, 99, 29], [3, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 23, 110, 20], [14, 108, 47, 35, 103, 39, 40, 25], [41, 65], [44, 78], [49, 114], [53, 85], [57, 79], [58, 77], [59, 80], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [41, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[41,65] + x[65,41] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 32) (2 -> 67) (3 -> 20) (4 -> 106) (5 -> 91) (6 -> 66) (7 -> 62) (8 -> 80) (9 -> 120) (10 -> 76) (11 -> 38) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 31) (23 -> 82) (24 -> 55) (25 -> 40) (26 -> 48) (27 -> 96) (28 -> 12) (29 -> 1) (30 -> 6) (31 -> 74) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 99) (38 -> 54) (39 -> 102) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 5) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 109) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 112) (93 -> 43) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 19) (102 -> 15) (103 -> 21) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 7) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 7, 62, 90, 56, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 96, 117, 35, 47, 108, 14, 25, 40, 39, 102, 15, 92, 112, 52, 119, 16, 103, 21, 64, 8, 80, 59, 110, 23, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 38, 54, 100, 22, 31, 74, 37, 99, 29], [2, 67, 104], [44, 78], [46, 97], [49, 114], [50, 86], [53, 85], [57, 79], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [44, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,78] + x[78,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 62) (8 -> 80) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 64) (22 -> 31) (23 -> 82) (24 -> 33) (25 -> 40) (26 -> 107) (27 -> 96) (28 -> 11) (29 -> 1) (30 -> 6) (31 -> 74) (32 -> 44) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 94) (37 -> 99) (38 -> 54) (39 -> 102) (40 -> 39) (41 -> 65) (42 -> 93) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 26) (49 -> 114) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 100) (55 -> 24) (56 -> 38) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 20) (66 -> 17) (67 -> 118) (68 -> 88) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 43) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 22) (101 -> 48) (102 -> 15) (103 -> 21) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 109) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 35) (118 -> 7) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 44, 78, 2, 104, 67, 118, 7, 62, 84, 61, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 96, 117, 35, 47, 108, 14, 25, 40, 39, 102, 15, 92, 112, 52, 119, 16, 103, 21, 64, 8, 80, 59, 110, 23, 82, 51, 28, 11, 45, 36, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 43, 42, 93, 55, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 56, 38, 54, 100, 22, 31, 74, 37, 99, 29], [46, 97], [49, 114], [50, 86], [53, 85], [58, 77], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [46, 97]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[46,97] + x[97,46] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 102) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 18) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 103) (22 -> 100) (23 -> 1) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 11) (29 -> 99) (30 -> 6) (31 -> 22) (32 -> 118) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 94) (37 -> 74) (38 -> 56) (39 -> 40) (40 -> 80) (41 -> 65) (42 -> 93) (43 -> 42) (44 -> 32) (45 -> 36) (46 -> 8) (47 -> 108) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 24) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 43) (73 -> 71) (74 -> 31) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 37) (100 -> 54) (101 -> 48) (102 -> 15) (103 -> 39) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 109) (108 -> 14) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 35) (118 -> 67) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 31, 22, 100, 54, 38, 56, 4, 106, 10, 76, 73, 71, 30, 6, 66, 17, 70, 9, 120, 69, 27, 96, 117, 35, 47, 108, 14, 25, 114, 49, 82, 51, 28, 11, 45, 36, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 43, 42, 93, 55, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 103, 39, 40, 80, 59, 110, 23], [2, 78, 44, 32, 118, 67, 104], [50, 86], [53, 85], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [50, 86]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[50,86] + x[86,50] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 89) (4 -> 61) (5 -> 68) (6 -> 30) (7 -> 118) (8 -> 64) (9 -> 70) (10 -> 106) (11 -> 27) (12 -> 28) (13 -> 113) (14 -> 108) (15 -> 92) (16 -> 97) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 103) (22 -> 100) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 109) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 41) (34 -> 94) (35 -> 117) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 102) (40 -> 39) (41 -> 65) (42 -> 93) (43 -> 42) (44 -> 32) (45 -> 11) (46 -> 8) (47 -> 35) (48 -> 101) (49 -> 25) (50 -> 86) (51 -> 82) (52 -> 119) (53 -> 85) (54 -> 31) (55 -> 24) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 6) (67 -> 104) (68 -> 88) (69 -> 120) (70 -> 17) (71 -> 73) (72 -> 43) (73 -> 76) (74 -> 107) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 36) (95 -> 83) (96 -> 19) (97 -> 46) (98 -> 87) (99 -> 37) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 47) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 107, 26, 109, 72, 43, 42, 93, 55, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 23, 110, 59, 80, 40, 39, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 103, 14, 108, 47, 35, 117, 96, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 27, 69, 120, 9, 70, 17, 66, 6, 30, 71, 73, 76, 10, 106, 4, 61, 84, 62, 7, 118, 67, 104, 2, 78, 44, 32], [22, 100, 50, 86, 38, 54, 31], [25, 114, 49], [48, 101], [53, 85], [56, 90], [57, 79], [58, 77], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [48, 101]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[48,101] + x[101,48] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 29) (2 -> 104) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 30) (7 -> 102) (8 -> 46) (9 -> 70) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 103) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 1) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 69) (28 -> 12) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 44) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 80) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 35) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 118) (68 -> 5) (69 -> 120) (70 -> 17) (71 -> 73) (72 -> 109) (73 -> 76) (74 -> 31) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 112) (93 -> 43) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 90) (98 -> 87) (99 -> 37) (100 -> 50) (101 -> 19) (102 -> 15) (103 -> 39) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 31, 22, 21, 64, 8, 46, 97, 90, 56, 38, 54, 100, 50, 86, 108, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 27, 69, 120, 9, 70, 17, 66, 6, 30, 71, 73, 76, 10, 106, 4, 61, 84, 62, 7, 102, 15, 92, 112, 52, 119, 16, 103, 39, 40, 80, 59, 110, 23], [2, 104, 67, 118, 32, 44, 78], [35, 47], [53, 85], [57, 79], [58, 77], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [35, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[35,47] + x[47,35] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 30) (7 -> 102) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 27) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 12) (29 -> 1) (30 -> 71) (31 -> 54) (32 -> 44) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 99) (38 -> 86) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 8) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 6) (67 -> 118) (68 -> 5) (69 -> 74) (70 -> 17) (71 -> 73) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 62) (91 -> 60) (92 -> 112) (93 -> 43) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 19) (102 -> 15) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 70) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 32) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 103, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 27, 96, 117, 35, 47, 108, 70, 17, 66, 6, 30, 71, 73, 76, 10, 106, 4, 56, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 54, 38, 86, 50, 100, 9, 120, 69, 74, 37, 99, 29], [2, 104, 67, 118, 32, 44, 78], [53, 85], [57, 79], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [53, 85]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,85] + x[85,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 32) (2 -> 78) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 66) (7 -> 62) (8 -> 64) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 28) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 107) (27 -> 11) (28 -> 51) (29 -> 1) (30 -> 85) (31 -> 74) (32 -> 118) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 67) (37 -> 99) (38 -> 54) (39 -> 102) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 93) (44 -> 96) (45 -> 36) (46 -> 8) (47 -> 108) (48 -> 26) (49 -> 25) (50 -> 86) (51 -> 82) (52 -> 119) (53 -> 94) (54 -> 100) (55 -> 24) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 9) (71 -> 30) (72 -> 42) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 38) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 109) (108 -> 14) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 7) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 7, 62, 90, 56, 4, 106, 10, 76, 73, 71, 30, 85, 53, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 42, 43, 93, 55, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 23, 110, 59, 80, 40, 39, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 74, 37, 99, 29], [2, 78, 44, 96, 117, 6, 66, 17, 70, 9, 120, 69, 27, 11, 45, 36, 67, 104], [14, 103, 35, 47, 108], [25, 114, 49], [38, 54, 100, 50, 86], [57, 79], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [57, 79]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[57,79] + x[79,57] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 89) (4 -> 56) (5 -> 68) (6 -> 66) (7 -> 102) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 28) (12 -> 57) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 55) (25 -> 40) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 1) (30 -> 71) (31 -> 74) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 117) (36 -> 45) (37 -> 99) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 8) (47 -> 35) (48 -> 101) (49 -> 114) (50 -> 86) (51 -> 82) (52 -> 119) (53 -> 85) (54 -> 100) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 27) (70 -> 9) (71 -> 73) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 108) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 43) (94 -> 3) (95 -> 83) (96 -> 44) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 19) (102 -> 15) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 47) (109 -> 107) (110 -> 20) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 6) (118 -> 53) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 53, 85, 30, 71, 73, 76, 10, 106, 4, 56, 38, 54, 100, 50, 86, 108, 47, 35, 117, 6, 66, 17, 70, 9, 120, 69, 27, 96, 44, 78, 2, 104, 67, 36, 45, 11, 28, 51, 82, 23, 110, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 74, 37, 99, 29], [14, 25, 40, 39, 103], [49, 114], [58, 77], [59, 80], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [49, 114]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[49,114] + x[114,49] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 23) (2 -> 78) (3 -> 20) (4 -> 56) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 11) (29 -> 1) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 99) (37 -> 83) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 93) (56 -> 38) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 90) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 5) (69 -> 74) (70 -> 17) (71 -> 73) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 43) (94 -> 53) (95 -> 70) (96 -> 27) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 19) (102 -> 7) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 103, 14, 25, 114, 49, 82, 51, 28, 11, 45, 36, 99, 29], [2, 78, 44, 32, 118, 67, 104], [3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 53, 85, 30, 71, 73, 76, 10, 106, 4, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89], [6, 117, 35, 47, 108, 86, 50, 100, 9, 120, 69, 74, 37, 83, 95, 70, 17, 66], [27, 96], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [27, 96]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,96] + x[96,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 117) (7 -> 118) (8 -> 64) (9 -> 70) (10 -> 76) (11 -> 28) (12 -> 57) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 97) (17 -> 66) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 1) (30 -> 85) (31 -> 74) (32 -> 44) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 45) (37 -> 99) (38 -> 56) (39 -> 102) (40 -> 39) (41 -> 65) (42 -> 93) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 8) (47 -> 108) (48 -> 26) (49 -> 114) (50 -> 100) (51 -> 82) (52 -> 119) (53 -> 94) (54 -> 38) (55 -> 24) (56 -> 4) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 20) (66 -> 6) (67 -> 36) (68 -> 88) (69 -> 120) (70 -> 17) (71 -> 30) (72 -> 43) (73 -> 71) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 62) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 48) (102 -> 15) (103 -> 35) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 109) (108 -> 86) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 74, 37, 99, 29], [2, 104, 67, 36, 45, 11, 28, 51, 82, 49, 114, 25, 14, 103, 35, 47, 108, 86, 50, 100, 54, 38, 56, 4, 106, 10, 76, 73, 71, 30, 85, 53, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 43, 42, 93, 55, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 62, 7, 118, 32, 44, 78], [6, 117, 96, 27, 69, 120, 9, 70, 17, 66], [58, 77], [61, 84], [63, 115], [75, 105], [81, 111], [83, 95], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 45 Cassage de contrainte 
> Cycle à casser : [58, 77]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[58,77] + x[77,58] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 68) (6 -> 117) (7 -> 62) (8 -> 46) (9 -> 70) (10 -> 76) (11 -> 58) (12 -> 28) (13 -> 113) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 32) (45 -> 11) (46 -> 97) (47 -> 3) (48 -> 101) (49 -> 89) (50 -> 86) (51 -> 82) (52 -> 112) (53 -> 118) (54 -> 100) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 88) (69 -> 120) (70 -> 17) (71 -> 30) (72 -> 109) (73 -> 71) (74 -> 31) (75 -> 105) (76 -> 73) (77 -> 95) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 37) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 43) (94 -> 36) (95 -> 83) (96 -> 27) (97 -> 16) (98 -> 87) (99 -> 57) (100 -> 50) (101 -> 19) (102 -> 7) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 96) (118 -> 67) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 57, 79, 90, 56, 38, 54, 100, 50, 86, 108, 14, 25, 114, 49, 89, 60, 91, 5, 68, 88, 12, 28, 51, 82, 23, 110, 59, 80, 40, 39, 103, 35, 47, 3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 36, 45, 11, 58, 77, 95, 83, 37, 74, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61, 4, 106, 10, 76, 73, 71, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32], [6, 117, 96, 27, 69, 120, 9, 70, 17, 66], [63, 115], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 46 Cassage de contrainte 
> Cycle à casser : [63, 115]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[63,115] + x[115,63] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 23) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 18) (6 -> 102) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 91) (11 -> 45) (12 -> 57) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 101) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 107) (27 -> 96) (28 -> 12) (29 -> 1) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 74) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 83) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 93) (43 -> 42) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 26) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 24) (56 -> 38) (57 -> 79) (58 -> 11) (59 -> 80) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 43) (94 -> 3) (95 -> 77) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 7) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 116) (108 -> 86) (109 -> 72) (110 -> 59) (111 -> 81) (112 -> 99) (113 -> 34) (114 -> 49) (115 -> 70) (116 -> 19) (117 -> 35) (118 -> 53) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 103, 14, 25, 114, 49, 82, 51, 28, 12, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 99, 29], [2, 78, 44, 32, 118, 53, 85, 30, 71, 63, 115, 70, 17, 66, 6, 102, 7, 62, 84, 61, 4, 106, 10, 91, 5, 18, 13, 113, 34, 94, 3, 20, 65, 41, 33, 74, 37, 83, 95, 77, 58, 11, 45, 36, 67, 104], [9, 120, 69, 27, 96, 117, 35, 47, 108, 86, 50, 100], [15, 92], [19, 101, 48, 26, 107, 116], [24, 55], [42, 93, 43], [60, 89], [68, 88], [72, 109], [73, 76], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 47 Cassage de contrainte 
> Cycle à casser : [15, 92]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,92] + x[92,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 18) (6 -> 117) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 91) (11 -> 45) (12 -> 28) (13 -> 113) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 1) (24 -> 55) (25 -> 14) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 118) (33 -> 74) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 80) (41 -> 33) (42 -> 43) (43 -> 93) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 82) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 24) (56 -> 38) (57 -> 79) (58 -> 11) (59 -> 110) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 42) (94 -> 3) (95 -> 77) (96 -> 68) (97 -> 16) (98 -> 87) (99 -> 57) (100 -> 9) (101 -> 19) (102 -> 7) (103 -> 39) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 86) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 25) (115 -> 70) (116 -> 107) (117 -> 35) (118 -> 53) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61, 4, 106, 10, 91, 5, 18, 13, 113, 34, 94, 3, 20, 65, 41, 33, 74, 37, 83, 95, 77, 58, 11, 45, 36, 67, 104, 2, 78, 44, 32, 118, 53, 85, 30, 71, 63, 115, 70, 17, 66, 6, 117, 35, 47, 108, 86, 50, 100, 9, 120, 69, 27, 96, 68, 88, 12, 28, 51, 82, 49, 114, 25, 14, 103, 39, 40, 80, 59, 110, 23], [19, 116, 107, 26, 48, 101], [24, 55], [42, 43, 93], [60, 89], [72, 109], [73, 76], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 48 Cassage de contrainte 
> Cycle à casser : [24, 55]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,55] + x[55,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 20) (4 -> 106) (5 -> 68) (6 -> 117) (7 -> 102) (8 -> 64) (9 -> 100) (10 -> 62) (11 -> 45) (12 -> 57) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 69) (28 -> 11) (29 -> 1) (30 -> 71) (31 -> 74) (32 -> 44) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 99) (37 -> 83) (38 -> 56) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 72) (44 -> 78) (45 -> 36) (46 -> 8) (47 -> 3) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 93) (56 -> 4) (57 -> 79) (58 -> 89) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 21) (65 -> 41) (66 -> 6) (67 -> 118) (68 -> 88) (69 -> 120) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 73) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 51) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 108) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 54) (91 -> 5) (92 -> 112) (93 -> 42) (94 -> 53) (95 -> 77) (96 -> 27) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 50) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 34) (114 -> 49) (115 -> 70) (116 -> 18) (117 -> 96) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 103, 35, 47, 3, 20, 65, 41, 33, 24, 55, 93, 42, 43, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 53, 85, 30, 71, 63, 115, 70, 17, 66, 6, 117, 96, 27, 69, 120, 9, 100, 50, 86, 108, 14, 25, 114, 49, 82, 51, 28, 11, 45, 36, 99, 29], [2, 104, 67, 118, 32, 44, 78], [4, 106, 10, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 74, 37, 83, 95, 77, 58, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 54, 38, 56], [61, 84], [73, 76], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 49 Cassage de contrainte 
> Cycle à casser : [61, 84]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[61,84] + x[84,61] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 68) (6 -> 30) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 91) (11 -> 28) (12 -> 57) (13 -> 113) (14 -> 108) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 55) (25 -> 49) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 22) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 56) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 72) (44 -> 32) (45 -> 11) (46 -> 97) (47 -> 3) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 82) (52 -> 112) (53 -> 118) (54 -> 38) (55 -> 93) (56 -> 76) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 6) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 71) (74 -> 31) (75 -> 105) (76 -> 10) (77 -> 95) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 37) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 54) (91 -> 5) (92 -> 15) (93 -> 42) (94 -> 73) (95 -> 83) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 36) (100 -> 9) (101 -> 19) (102 -> 7) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 58) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 25) (115 -> 70) (116 -> 18) (117 -> 35) (118 -> 67) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 28, 51, 82, 23, 110, 59, 80, 40, 39, 103, 14, 108, 86, 50, 100, 9, 120, 69, 27, 96, 117, 35, 47, 3, 20, 65, 41, 33, 24, 55, 93, 42, 43, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94, 73, 71, 63, 115, 70, 17, 66, 6, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32], [4, 106, 58, 77, 95, 83, 37, 74, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61], [5, 68, 88, 12, 57, 79, 90, 54, 38, 56, 76, 10, 91], [25, 49, 114], [60, 89], [75, 105], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 50 Cassage de contrainte 
> Cycle à casser : [60, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,89] + x[89,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 23) (2 -> 104) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 66) (7 -> 98) (8 -> 46) (9 -> 120) (10 -> 106) (11 -> 58) (12 -> 88) (13 -> 113) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 12) (29 -> 1) (30 -> 85) (31 -> 22) (32 -> 44) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 56) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 11) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 118) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 99) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 71) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 36) (68 -> 5) (69 -> 27) (70 -> 115) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 31) (75 -> 105) (76 -> 10) (77 -> 95) (78 -> 2) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 51) (83 -> 37) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 34) (88 -> 68) (89 -> 3) (90 -> 79) (91 -> 60) (92 -> 15) (93 -> 43) (94 -> 9) (95 -> 83) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 54) (101 -> 19) (102 -> 6) (103 -> 14) (104 -> 67) (105 -> 75) (106 -> 4) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 73) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 35) (118 -> 32) (119 -> 52) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 23, 110, 59, 80, 40, 39, 103, 14, 25, 114, 49, 82, 51, 28, 12, 88, 68, 5, 91, 60, 89, 3, 20, 65, 41, 33, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 73, 76, 10, 106, 4, 61, 84, 62, 7, 98, 87, 34, 94, 9, 120, 69, 27, 96, 117, 35, 47, 108, 86, 50, 100, 54, 38, 56, 90, 79, 57, 99, 29], [2, 104, 67, 36, 45, 11, 58, 77, 95, 83, 37, 74, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 6, 66, 17, 70, 115, 63, 71, 30, 85, 53, 118, 32, 44, 78], [75, 105], [81, 111]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 51 Cassage de contrainte 
> Cycle à casser : [75, 105]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[75,105] + x[105,75] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 61) (5 -> 91) (6 -> 102) (7 -> 98) (8 -> 64) (9 -> 100) (10 -> 106) (11 -> 27) (12 -> 28) (13 -> 113) (14 -> 25) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 5) (19 -> 116) (20 -> 65) (21 -> 22) (22 -> 31) (23 -> 110) (24 -> 55) (25 -> 114) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 54) (32 -> 1) (33 -> 24) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 74) (38 -> 56) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 72) (44 -> 32) (45 -> 11) (46 -> 8) (47 -> 3) (48 -> 101) (49 -> 82) (50 -> 86) (51 -> 75) (52 -> 119) (53 -> 118) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 71) (64 -> 21) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 120) (70 -> 115) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 69) (75 -> 105) (76 -> 10) (77 -> 95) (78 -> 44) (79 -> 57) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 37) (84 -> 62) (85 -> 53) (86 -> 108) (87 -> 34) (88 -> 68) (89 -> 58) (90 -> 79) (91 -> 60) (92 -> 112) (93 -> 42) (94 -> 73) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 36) (100 -> 50) (101 -> 19) (102 -> 15) (103 -> 35) (104 -> 2) (105 -> 66) (106 -> 4) (107 -> 26) (108 -> 14) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 18) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 27, 96, 117, 6, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 54, 38, 56, 90, 79, 57, 12, 28, 51, 75, 105, 66, 17, 70, 115, 63, 71, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32], [3, 20, 65, 41, 33, 24, 55, 93, 42, 43, 72, 109, 107, 26, 48, 101, 19, 116, 18, 5, 91, 60, 89, 58, 77, 95, 83, 37, 74, 69, 120, 9, 100, 50, 86, 108, 14, 25, 114, 49, 82, 23, 110, 59, 80, 40, 39, 103, 35, 47], [4, 61, 84, 62, 7, 98, 87, 34, 94, 73, 76, 10, 106], [13, 113], [68, 88], [81, 111]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 52 Cassage de contrainte 
> Cycle à casser : [13, 113]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,113] + x[113,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 94) (4 -> 61) (5 -> 68) (6 -> 117) (7 -> 102) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 27) (12 -> 28) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 22) (22 -> 31) (23 -> 82) (24 -> 33) (25 -> 14) (26 -> 107) (27 -> 96) (28 -> 51) (29 -> 1) (30 -> 6) (31 -> 54) (32 -> 118) (33 -> 41) (34 -> 113) (35 -> 47) (36 -> 45) (37 -> 83) (38 -> 56) (39 -> 40) (40 -> 80) (41 -> 65) (42 -> 43) (43 -> 93) (44 -> 78) (45 -> 11) (46 -> 8) (47 -> 108) (48 -> 26) (49 -> 114) (50 -> 100) (51 -> 75) (52 -> 119) (53 -> 85) (54 -> 38) (55 -> 24) (56 -> 90) (57 -> 99) (58 -> 89) (59 -> 110) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 71) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 36) (68 -> 88) (69 -> 74) (70 -> 115) (71 -> 73) (72 -> 42) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 2) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 95) (84 -> 62) (85 -> 30) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 79) (91 -> 5) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 77) (96 -> 44) (97 -> 46) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 48) (102 -> 15) (103 -> 39) (104 -> 67) (105 -> 66) (106 -> 4) (107 -> 109) (108 -> 86) (109 -> 72) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 35) (118 -> 53) (119 -> 16) (120 -> 69) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 118, 53, 85, 30, 6, 117, 35, 47, 108, 86, 50, 100, 9, 120, 69, 74, 37, 83, 95, 77, 58, 89, 60, 91, 5, 68, 88, 12, 28, 51, 75, 105, 66, 17, 70, 115, 63, 71, 73, 76, 10, 106, 4, 61, 84, 62, 7, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 54, 38, 56, 90, 79, 57, 99, 29], [2, 104, 67, 36, 45, 11, 27, 96, 44, 78], [3, 94, 34, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 42, 43, 93, 55, 24, 33, 41, 65, 20], [14, 103, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25], [81, 111], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 53 Cassage de contrainte 
> Cycle à casser : [81, 111]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[81,111] + x[111,81] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 61) (5 -> 68) (6 -> 113) (7 -> 98) (8 -> 46) (9 -> 100) (10 -> 106) (11 -> 28) (12 -> 57) (13 -> 18) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 81) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 22) (32 -> 1) (33 -> 74) (34 -> 94) (35 -> 47) (36 -> 45) (37 -> 83) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 93) (44 -> 32) (45 -> 11) (46 -> 97) (47 -> 3) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 75) (52 -> 112) (53 -> 118) (54 -> 31) (55 -> 24) (56 -> 38) (57 -> 79) (58 -> 89) (59 -> 80) (60 -> 91) (61 -> 84) (62 -> 7) (63 -> 71) (64 -> 8) (65 -> 41) (66 -> 17) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 115) (71 -> 30) (72 -> 42) (73 -> 76) (74 -> 37) (75 -> 105) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 53) (86 -> 108) (87 -> 34) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 73) (95 -> 77) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 36) (100 -> 50) (101 -> 48) (102 -> 6) (103 -> 35) (104 -> 2) (105 -> 66) (106 -> 4) (107 -> 109) (108 -> 14) (109 -> 72) (110 -> 59) (111 -> 120) (112 -> 92) (113 -> 13) (114 -> 49) (115 -> 63) (116 -> 19) (117 -> 96) (118 -> 67) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 36, 45, 11, 28, 51, 75, 105, 66, 17, 70, 115, 63, 71, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32], [3, 20, 65, 41, 33, 74, 37, 83, 95, 77, 58, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 6, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 42, 43, 93, 55, 24, 81, 111, 120, 9, 100, 50, 86, 108, 14, 25, 114, 49, 82, 23, 110, 59, 80, 40, 39, 103, 35, 47], [4, 61, 84, 62, 7, 98, 87, 34, 94, 73, 76, 10, 106], [27, 69], [96, 117]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 54 Cassage de contrainte 
> Cycle à casser : [27, 69]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,69] + x[69,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 89) (4 -> 106) (5 -> 68) (6 -> 30) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 113) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 33) (25 -> 114) (26 -> 109) (27 -> 96) (28 -> 11) (29 -> 99) (30 -> 85) (31 -> 22) (32 -> 1) (33 -> 41) (34 -> 87) (35 -> 47) (36 -> 94) (37 -> 74) (38 -> 54) (39 -> 103) (40 -> 39) (41 -> 65) (42 -> 43) (43 -> 72) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 82) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 118) (54 -> 31) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 77) (59 -> 80) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 20) (66 -> 105) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 17) (71 -> 63) (72 -> 42) (73 -> 71) (74 -> 69) (75 -> 51) (76 -> 10) (77 -> 48) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 24) (82 -> 23) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 117) (97 -> 16) (98 -> 7) (99 -> 37) (100 -> 9) (101 -> 19) (102 -> 6) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 58) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 59) (111 -> 81) (112 -> 92) (113 -> 73) (114 -> 49) (115 -> 70) (116 -> 18) (117 -> 35) (118 -> 67) (119 -> 52) (120 -> 111) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 69, 27, 96, 117, 35, 47, 108, 86, 50, 100, 9, 120, 111, 81, 24, 33, 41, 65, 20, 3, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 6, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32], [4, 106, 58, 77, 48, 101, 19, 116, 18, 13, 113, 73, 71, 63, 115, 70, 17, 66, 105, 75, 51, 28, 11, 45, 36, 94, 34, 87, 98, 7, 62, 84, 61], [10, 76], [14, 25, 114, 49, 82, 23, 110, 59, 80, 40, 39, 103], [26, 109, 107], [42, 43, 72], [55, 93], [83, 95]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 55 Cassage de contrainte 
> Cycle à casser : [10, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,76] + x[76,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 94) (4 -> 61) (5 -> 91) (6 -> 117) (7 -> 118) (8 -> 46) (9 -> 100) (10 -> 106) (11 -> 45) (12 -> 88) (13 -> 18) (14 -> 25) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 116) (19 -> 101) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 110) (24 -> 81) (25 -> 114) (26 -> 107) (27 -> 69) (28 -> 12) (29 -> 99) (30 -> 71) (31 -> 22) (32 -> 1) (33 -> 41) (34 -> 113) (35 -> 103) (36 -> 67) (37 -> 83) (38 -> 54) (39 -> 13) (40 -> 39) (41 -> 33) (42 -> 43) (43 -> 93) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 35) (48 -> 26) (49 -> 82) (50 -> 86) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 24) (56 -> 38) (57 -> 79) (58 -> 11) (59 -> 80) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 115) (64 -> 8) (65 -> 20) (66 -> 105) (67 -> 104) (68 -> 5) (69 -> 74) (70 -> 17) (71 -> 63) (72 -> 42) (73 -> 76) (74 -> 37) (75 -> 51) (76 -> 10) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 40) (81 -> 111) (82 -> 23) (83 -> 95) (84 -> 62) (85 -> 30) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 55) (94 -> 34) (95 -> 77) (96 -> 27) (97 -> 16) (98 -> 87) (99 -> 57) (100 -> 50) (101 -> 48) (102 -> 6) (103 -> 14) (104 -> 2) (105 -> 75) (106 -> 4) (107 -> 109) (108 -> 47) (109 -> 72) (110 -> 59) (111 -> 120) (112 -> 92) (113 -> 73) (114 -> 49) (115 -> 70) (116 -> 19) (117 -> 96) (118 -> 53) (119 -> 52) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 6, 117, 96, 27, 69, 74, 37, 83, 95, 77, 58, 11, 45, 36, 67, 104, 2, 78, 44, 32], [3, 94, 34, 113, 73, 76, 10, 106, 4, 61, 84, 62, 7, 118, 53, 85, 30, 71, 63, 115, 70, 17, 66, 105, 75, 51, 28, 12, 88, 68, 5, 91, 60, 89], [9, 100, 50, 86, 108, 47, 35, 103, 14, 25, 114, 49, 82, 23, 110, 59, 80, 40, 39, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 42, 43, 93, 55, 24, 81, 111, 120], [20, 65], [33, 41], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 56 Cassage de contrainte 
> Cycle à casser : [20, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,65] + x[65,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 104) (3 -> 94) (4 -> 106) (5 -> 91) (6 -> 102) (7 -> 62) (8 -> 64) (9 -> 100) (10 -> 76) (11 -> 28) (12 -> 88) (13 -> 18) (14 -> 103) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 116) (19 -> 101) (20 -> 3) (21 -> 22) (22 -> 31) (23 -> 82) (24 -> 81) (25 -> 14) (26 -> 107) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 54) (32 -> 1) (33 -> 41) (34 -> 87) (35 -> 117) (36 -> 45) (37 -> 74) (38 -> 56) (39 -> 40) (40 -> 80) (41 -> 65) (42 -> 43) (43 -> 93) (44 -> 78) (45 -> 11) (46 -> 8) (47 -> 35) (48 -> 26) (49 -> 114) (50 -> 86) (51 -> 75) (52 -> 119) (53 -> 118) (54 -> 38) (55 -> 24) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 71) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 36) (68 -> 5) (69 -> 27) (70 -> 115) (71 -> 30) (72 -> 42) (73 -> 113) (74 -> 69) (75 -> 105) (76 -> 73) (77 -> 95) (78 -> 2) (79 -> 57) (80 -> 59) (81 -> 111) (82 -> 49) (83 -> 33) (84 -> 61) (85 -> 53) (86 -> 108) (87 -> 98) (88 -> 68) (89 -> 58) (90 -> 79) (91 -> 60) (92 -> 112) (93 -> 55) (94 -> 34) (95 -> 83) (96 -> 44) (97 -> 46) (98 -> 7) (99 -> 37) (100 -> 50) (101 -> 48) (102 -> 15) (103 -> 39) (104 -> 67) (105 -> 66) (106 -> 10) (107 -> 109) (108 -> 47) (109 -> 72) (110 -> 23) (111 -> 120) (112 -> 52) (113 -> 13) (114 -> 25) (115 -> 63) (116 -> 19) (117 -> 6) (118 -> 32) (119 -> 16) (120 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 69, 27, 96, 44, 78, 2, 104, 67, 36, 45, 11, 28, 51, 75, 105, 66, 17, 70, 115, 63, 71, 30, 85, 53, 118, 32], [3, 94, 34, 87, 98, 7, 62, 84, 61, 4, 106, 10, 76, 73, 113, 13, 18, 116, 19, 101, 48, 26, 107, 109, 72, 42, 43, 93, 55, 24, 81, 111, 120, 9, 100, 50, 86, 108, 47, 35, 117, 6, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 54, 38, 56, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89, 58, 77, 95, 83, 33, 41, 65, 20], [14, 103, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 57 Cassage de contrainte 
> Cycle à casser : [14, 103, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25]
> Taille du cycle à casser : 12
> Nouvelle contrainte : x[14,103] + x[103,39] + x[39,40] + x[40,80] + x[80,59] + x[59,110] + x[110,23] + x[23,82] + x[82,49] + x[49,114] + x[114,25] + x[25,14] ≤ 11
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 32) (2 -> 104) (3 -> 94) (4 -> 106) (5 -> 91) (6 -> 117) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 39) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 5) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 82) (24 -> 55) (25 -> 14) (26 -> 48) (27 -> 69) (28 -> 12) (29 -> 1) (30 -> 6) (31 -> 22) (32 -> 44) (33 -> 74) (34 -> 113) (35 -> 47) (36 -> 99) (37 -> 83) (38 -> 54) (39 -> 40) (40 -> 80) (41 -> 33) (42 -> 72) (43 -> 42) (44 -> 78) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 85) (54 -> 31) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 11) (59 -> 110) (60 -> 89) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 105) (67 -> 118) (68 -> 88) (69 -> 20) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 71) (74 -> 37) (75 -> 51) (76 -> 73) (77 -> 58) (78 -> 2) (79 -> 90) (80 -> 59) (81 -> 24) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 30) (86 -> 50) (87 -> 98) (88 -> 68) (89 -> 3) (90 -> 56) (91 -> 60) (92 -> 15) (93 -> 43) (94 -> 34) (95 -> 77) (96 -> 27) (97 -> 16) (98 -> 87) (99 -> 29) (100 -> 9) (101 -> 19) (102 -> 7) (103 -> 35) (104 -> 67) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 13) (114 -> 25) (115 -> 70) (116 -> 18) (117 -> 96) (118 -> 53) (119 -> 52) (120 -> 111) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 32, 44, 78, 2, 104, 67, 118, 53, 85, 30, 6, 117, 96, 27, 69, 20, 65, 41, 33, 74, 37, 83, 95, 77, 58, 11, 45, 36, 99, 29], [3, 94, 34, 113, 13, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25, 14, 103, 35, 47, 108, 86, 50, 100, 9, 120, 111, 81, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 5, 91, 60, 89], [4, 106, 10, 76, 73, 71, 63, 115, 70, 17, 66, 105, 75, 51, 28, 12, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 7, 62, 84, 61], [68, 88], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 58 Cassage de contrainte 
> Cycle à casser : [68, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[68,88] + x[88,68] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 20) (4 -> 106) (5 -> 68) (6 -> 30) (7 -> 62) (8 -> 46) (9 -> 120) (10 -> 76) (11 -> 45) (12 -> 57) (13 -> 113) (14 -> 103) (15 -> 102) (16 -> 119) (17 -> 66) (18 -> 13) (19 -> 116) (20 -> 65) (21 -> 64) (22 -> 21) (23 -> 82) (24 -> 55) (25 -> 14) (26 -> 48) (27 -> 96) (28 -> 11) (29 -> 99) (30 -> 85) (31 -> 22) (32 -> 1) (33 -> 83) (34 -> 94) (35 -> 47) (36 -> 67) (37 -> 74) (38 -> 54) (39 -> 40) (40 -> 80) (41 -> 33) (42 -> 43) (43 -> 72) (44 -> 32) (45 -> 36) (46 -> 97) (47 -> 108) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 28) (52 -> 112) (53 -> 118) (54 -> 31) (55 -> 93) (56 -> 38) (57 -> 79) (58 -> 89) (59 -> 110) (60 -> 91) (61 -> 4) (62 -> 84) (63 -> 115) (64 -> 8) (65 -> 41) (66 -> 105) (67 -> 104) (68 -> 88) (69 -> 27) (70 -> 17) (71 -> 63) (72 -> 109) (73 -> 71) (74 -> 69) (75 -> 51) (76 -> 73) (77 -> 58) (78 -> 44) (79 -> 90) (80 -> 59) (81 -> 24) (82 -> 49) (83 -> 95) (84 -> 61) (85 -> 53) (86 -> 50) (87 -> 98) (88 -> 12) (89 -> 60) (90 -> 56) (91 -> 5) (92 -> 15) (93 -> 42) (94 -> 3) (95 -> 77) (96 -> 117) (97 -> 16) (98 -> 87) (99 -> 37) (100 -> 9) (101 -> 19) (102 -> 39) (103 -> 35) (104 -> 2) (105 -> 75) (106 -> 10) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 92) (113 -> 34) (114 -> 25) (115 -> 70) (116 -> 18) (117 -> 6) (118 -> 7) (119 -> 52) (120 -> 111) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 69, 27, 96, 117, 6, 30, 85, 53, 118, 7, 62, 84, 61, 4, 106, 10, 76, 73, 71, 63, 115, 70, 17, 66, 105, 75, 51, 28, 11, 45, 36, 67, 104, 2, 78, 44, 32], [3, 20, 65, 41, 33, 83, 95, 77, 58, 89, 60, 91, 5, 68, 88, 12, 57, 79, 90, 56, 38, 54, 31, 22, 21, 64, 8, 46, 97, 16, 119, 52, 112, 92, 15, 102, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25, 14, 103, 35, 47, 108, 86, 50, 100, 9, 120, 111, 81, 24, 55, 93, 42, 43, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 34, 94], [87, 98]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 59 Cassage de contrainte 
> Cycle à casser : [87, 98]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[87,98] + x[98,87] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 29) (2 -> 78) (3 -> 47) (4 -> 61) (5 -> 91) (6 -> 102) (7 -> 98) (8 -> 64) (9 -> 120) (10 -> 106) (11 -> 28) (12 -> 88) (13 -> 113) (14 -> 108) (15 -> 92) (16 -> 97) (17 -> 70) (18 -> 13) (19 -> 116) (20 -> 3) (21 -> 22) (22 -> 31) (23 -> 82) (24 -> 55) (25 -> 14) (26 -> 48) (27 -> 96) (28 -> 51) (29 -> 99) (30 -> 85) (31 -> 54) (32 -> 1) (33 -> 41) (34 -> 94) (35 -> 103) (36 -> 45) (37 -> 74) (38 -> 56) (39 -> 40) (40 -> 80) (41 -> 65) (42 -> 72) (43 -> 42) (44 -> 32) (45 -> 11) (46 -> 8) (47 -> 35) (48 -> 101) (49 -> 114) (50 -> 100) (51 -> 75) (52 -> 119) (53 -> 118) (54 -> 38) (55 -> 93) (56 -> 90) (57 -> 12) (58 -> 77) (59 -> 110) (60 -> 89) (61 -> 84) (62 -> 7) (63 -> 71) (64 -> 21) (65 -> 20) (66 -> 17) (67 -> 104) (68 -> 5) (69 -> 27) (70 -> 115) (71 -> 30) (72 -> 109) (73 -> 76) (74 -> 69) (75 -> 105) (76 -> 10) (77 -> 95) (78 -> 44) (79 -> 57) (80 -> 59) (81 -> 24) (82 -> 49) (83 -> 33) (84 -> 62) (85 -> 53) (86 -> 50) (87 -> 34) (88 -> 68) (89 -> 58) (90 -> 79) (91 -> 60) (92 -> 112) (93 -> 43) (94 -> 36) (95 -> 83) (96 -> 117) (97 -> 46) (98 -> 87) (99 -> 37) (100 -> 9) (101 -> 19) (102 -> 15) (103 -> 39) (104 -> 2) (105 -> 66) (106 -> 4) (107 -> 26) (108 -> 86) (109 -> 107) (110 -> 23) (111 -> 81) (112 -> 52) (113 -> 73) (114 -> 25) (115 -> 63) (116 -> 18) (117 -> 6) (118 -> 67) (119 -> 16) (120 -> 111) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 29, 99, 37, 74, 69, 27, 96, 117, 6, 102, 15, 92, 112, 52, 119, 16, 97, 46, 8, 64, 21, 22, 31, 54, 38, 56, 90, 79, 57, 12, 88, 68, 5, 91, 60, 89, 58, 77, 95, 83, 33, 41, 65, 20, 3, 47, 35, 103, 39, 40, 80, 59, 110, 23, 82, 49, 114, 25, 14, 108, 86, 50, 100, 9, 120, 111, 81, 24, 55, 93, 43, 42, 72, 109, 107, 26, 48, 101, 19, 116, 18, 13, 113, 73, 76, 10, 106, 4, 61, 84, 62, 7, 98, 87, 34, 94, 36, 45, 11, 28, 51, 75, 105, 66, 17, 70, 115, 63, 71, 30, 85, 53, 118, 67, 104, 2, 78, 44, 32]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 138.0
> Nombre d'itération nécéssaires : 60
> Nombre de contraintes ajoutées : 59
> Ordre de parcours des drônes : 
1 -> 29 -> 99 -> 37 -> 74 -> 69 -> 27 -> 96 -> 117 -> 6 -> 102 -> 15 -> 92 -> 112 -> 52 -> 119 -> 16 -> 97 -> 46 -> 8 -> 64 -> 21 -> 22 -> 31 -> 54 -> 38 -> 56 -> 90 -> 79 -> 57 -> 12 -> 88 -> 68 -> 5 -> 91 -> 60 -> 89 -> 58 -> 77 -> 95 -> 83 -> 33 -> 41 -> 65 -> 20 -> 3 -> 47 -> 35 -> 103 -> 39 -> 40 -> 80 -> 59 -> 110 -> 23 -> 82 -> 49 -> 114 -> 25 -> 14 -> 108 -> 86 -> 50 -> 100 -> 9 -> 120 -> 111 -> 81 -> 24 -> 55 -> 93 -> 43 -> 42 -> 72 -> 109 -> 107 -> 26 -> 48 -> 101 -> 19 -> 116 -> 18 -> 13 -> 113 -> 73 -> 76 -> 10 -> 106 -> 4 -> 61 -> 84 -> 62 -> 7 -> 98 -> 87 -> 34 -> 94 -> 36 -> 45 -> 11 -> 28 -> 51 -> 75 -> 105 -> 66 -> 17 -> 70 -> 115 -> 63 -> 71 -> 30 -> 85 -> 53 -> 118 -> 67 -> 104 -> 2 -> 78 -> 44 -> 32 -> 1. 
