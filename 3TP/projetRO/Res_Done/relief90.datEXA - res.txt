Résolution exacte pour relief/relief90.dat points à visiter :
Résolution d'initiale :  
> temps total = 116.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 52) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 3) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 73) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 8) (34 -> 10) (35 -> 36) (36 -> 12) (37 -> 42) (38 -> 68) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 37) (45 -> 38) (46 -> 6) (47 -> 55) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 49) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 70) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 83) (79 -> 9) (80 -> 65) (81 -> 15) (82 -> 19) (83 -> 78) (84 -> 90) (85 -> 69) (86 -> 79) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 37, 42, 54, 28, 85, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 52, 31, 48, 27, 73, 70, 29, 32, 63, 56, 87, 62, 22, 11, 75, 45, 38, 68, 47, 55, 43, 81, 15, 33, 8, 72, 35, 36, 12, 7, 2, 21, 82, 19, 17], [3, 80, 65, 71, 51, 66, 64, 46, 6, 77, 86, 79, 9, 25, 24, 13], [26, 41, 76, 67, 57, 74, 84, 90, 61, 49], [78, 83]]
> Nombre de cycle(s) trouvé(s) : 4
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [78, 83]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[78,83] + x[83,78] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 117.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 65) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 3) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 42) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 70) (34 -> 10) (35 -> 73) (36 -> 12) (37 -> 68) (38 -> 78) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 37) (45 -> 38) (46 -> 6) (47 -> 90) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 49) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 79) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 83) (79 -> 9) (80 -> 8) (81 -> 15) (82 -> 19) (83 -> 55) (84 -> 52) (85 -> 69) (86 -> 36) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 37, 68, 47, 90, 61, 49, 26, 41, 76, 67, 57, 74, 84, 52, 31, 48, 27, 42, 54, 28, 85, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 65, 71, 51, 66, 64, 46, 6, 77, 86, 36, 12, 7, 2, 21, 82, 19, 17], [3, 80, 8, 72, 35, 73, 79, 9, 25, 24, 13], [11, 75, 45, 38, 78, 83, 55, 43, 81, 15, 33, 70, 29, 32, 63, 56, 87, 62, 22]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [3, 80, 8, 72, 35, 73, 79, 9, 25, 24, 13]
> Taille du cycle à casser : 11
> Nouvelle contrainte : x[3,80] + x[80,8] + x[8,72] + x[72,35] + x[35,73] + x[73,79] + x[79,9] + x[9,25] + x[25,24] + x[24,13] + x[13,3] ≤ 10
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 52) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 61) (12 -> 7) (13 -> 3) (14 -> 60) (15 -> 63) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 42) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 36) (33 -> 8) (34 -> 10) (35 -> 73) (36 -> 12) (37 -> 68) (38 -> 78) (39 -> 33) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 37) (45 -> 38) (46 -> 6) (47 -> 90) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 49) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 14) (72 -> 35) (73 -> 70) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 83) (79 -> 9) (80 -> 65) (81 -> 15) (82 -> 19) (83 -> 55) (84 -> 58) (85 -> 69) (86 -> 79) (87 -> 62) (88 -> 5) (89 -> 75) (90 -> 51) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 33, 8, 72, 35, 73, 70, 29, 32, 36, 12, 7, 2, 21, 82, 19, 17], [3, 80, 65, 71, 14, 60, 44, 37, 68, 47, 90, 51, 66, 64, 46, 6, 77, 86, 79, 9, 25, 24, 13], [5, 52, 31, 48, 27, 42, 54, 28, 85, 69, 53, 50, 16, 40, 30, 89, 75, 45, 38, 78, 83, 55, 43, 81, 15, 63, 56, 87, 62, 22, 11, 61, 49, 26, 41, 76, 67, 57, 74, 84, 58, 23, 34, 10, 88]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [1, 20, 4, 59, 18, 39, 33, 8, 72, 35, 73, 70, 29, 32, 36, 12, 7, 2, 21, 82, 19, 17]
> Taille du cycle à casser : 22
> Nouvelle contrainte : x[1,20] + x[20,4] + x[4,59] + x[59,18] + x[18,39] + x[39,33] + x[33,8] + x[8,72] + x[72,35] + x[35,73] + x[73,70] + x[70,29] + x[29,32] + x[32,36] + x[36,12] + x[12,7] + x[7,2] + x[2,21] + x[21,82] + x[82,19] + x[19,17] + x[17,1] ≤ 21
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 65) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 3) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 73) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 70) (34 -> 10) (35 -> 36) (36 -> 12) (37 -> 42) (38 -> 68) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 37) (45 -> 38) (46 -> 6) (47 -> 90) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 78) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 69) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 83) (79 -> 9) (80 -> 8) (81 -> 15) (82 -> 19) (83 -> 55) (84 -> 52) (85 -> 49) (86 -> 79) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 37, 42, 54, 28, 85, 49, 26, 41, 76, 67, 57, 74, 84, 52, 31, 48, 27, 73, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 65, 71, 51, 66, 64, 46, 6, 77, 86, 79, 9, 25, 24, 13, 3, 80, 8, 72, 35, 36, 12, 7, 2, 21, 82, 19, 17], [11, 75, 45, 38, 68, 47, 90, 61, 78, 83, 55, 43, 81, 15, 33, 70, 29, 32, 63, 56, 87, 62, 22]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [11, 75, 45, 38, 68, 47, 90, 61, 78, 83, 55, 43, 81, 15, 33, 70, 29, 32, 63, 56, 87, 62, 22]
> Taille du cycle à casser : 23
> Nouvelle contrainte : x[11,75] + x[75,45] + x[45,38] + x[38,68] + x[68,47] + x[47,90] + x[90,61] + x[61,78] + x[78,83] + x[83,55] + x[55,43] + x[43,81] + x[81,15] + x[15,33] + x[33,70] + x[70,29] + x[29,32] + x[32,63] + x[63,56] + x[56,87] + x[87,62] + x[62,22] + x[22,11] ≤ 22
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 65) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 37) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 52) (26 -> 41) (27 -> 73) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 70) (34 -> 10) (35 -> 24) (36 -> 12) (37 -> 42) (38 -> 68) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 83) (45 -> 38) (46 -> 6) (47 -> 55) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 49) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 79) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 3) (79 -> 9) (80 -> 8) (81 -> 15) (82 -> 19) (83 -> 78) (84 -> 90) (85 -> 69) (86 -> 36) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 83, 78, 3, 80, 8, 72, 35, 24, 13, 37, 42, 54, 28, 85, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 65, 71, 51, 66, 64, 46, 6, 77, 86, 36, 12, 7, 2, 21, 82, 19, 17], [9, 25, 52, 31, 48, 27, 73, 79], [11, 75, 45, 38, 68, 47, 55, 43, 81, 15, 33, 70, 29, 32, 63, 56, 87, 62, 22], [26, 41, 76, 67, 57, 74, 84, 90, 61, 49]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [9, 25, 52, 31, 48, 27, 73, 79]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[9,25] + x[25,52] + x[52,31] + x[31,48] + x[48,27] + x[27,73] + x[73,79] + x[79,9] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 52) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 37) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 73) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 8) (34 -> 10) (35 -> 36) (36 -> 12) (37 -> 42) (38 -> 68) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 83) (45 -> 38) (46 -> 6) (47 -> 55) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 49) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 70) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 3) (79 -> 9) (80 -> 65) (81 -> 15) (82 -> 19) (83 -> 78) (84 -> 90) (85 -> 69) (86 -> 79) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 83, 78, 3, 80, 65, 71, 51, 66, 64, 46, 6, 77, 86, 79, 9, 25, 24, 13, 37, 42, 54, 28, 85, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 52, 31, 48, 27, 73, 70, 29, 32, 63, 56, 87, 62, 22, 11, 75, 45, 38, 68, 47, 55, 43, 81, 15, 33, 8, 72, 35, 36, 12, 7, 2, 21, 82, 19, 17], [26, 41, 76, 67, 57, 74, 84, 90, 61, 49]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [26, 41, 76, 67, 57, 74, 84, 90, 61, 49]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[26,41] + x[41,76] + x[76,67] + x[67,57] + x[57,74] + x[74,84] + x[84,90] + x[90,61] + x[61,49] + x[49,26] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 20) (2 -> 21) (3 -> 80) (4 -> 59) (5 -> 65) (6 -> 77) (7 -> 2) (8 -> 72) (9 -> 25) (10 -> 88) (11 -> 75) (12 -> 7) (13 -> 3) (14 -> 60) (15 -> 33) (16 -> 40) (17 -> 1) (18 -> 39) (19 -> 17) (20 -> 4) (21 -> 82) (22 -> 11) (23 -> 34) (24 -> 13) (25 -> 24) (26 -> 41) (27 -> 73) (28 -> 85) (29 -> 32) (30 -> 89) (31 -> 48) (32 -> 63) (33 -> 69) (34 -> 10) (35 -> 36) (36 -> 12) (37 -> 42) (38 -> 68) (39 -> 14) (40 -> 30) (41 -> 76) (42 -> 54) (43 -> 81) (44 -> 37) (45 -> 38) (46 -> 6) (47 -> 90) (48 -> 27) (49 -> 26) (50 -> 16) (51 -> 66) (52 -> 31) (53 -> 50) (54 -> 28) (55 -> 43) (56 -> 87) (57 -> 74) (58 -> 23) (59 -> 18) (60 -> 44) (61 -> 78) (62 -> 22) (63 -> 56) (64 -> 46) (65 -> 71) (66 -> 64) (67 -> 57) (68 -> 47) (69 -> 53) (70 -> 29) (71 -> 51) (72 -> 35) (73 -> 70) (74 -> 84) (75 -> 45) (76 -> 67) (77 -> 86) (78 -> 83) (79 -> 9) (80 -> 8) (81 -> 15) (82 -> 19) (83 -> 55) (84 -> 52) (85 -> 49) (86 -> 79) (87 -> 62) (88 -> 5) (89 -> 58) (90 -> 61) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 20, 4, 59, 18, 39, 14, 60, 44, 37, 42, 54, 28, 85, 49, 26, 41, 76, 67, 57, 74, 84, 52, 31, 48, 27, 73, 70, 29, 32, 63, 56, 87, 62, 22, 11, 75, 45, 38, 68, 47, 90, 61, 78, 83, 55, 43, 81, 15, 33, 69, 53, 50, 16, 40, 30, 89, 58, 23, 34, 10, 88, 5, 65, 71, 51, 66, 64, 46, 6, 77, 86, 79, 9, 25, 24, 13, 3, 80, 8, 72, 35, 36, 12, 7, 2, 21, 82, 19, 17]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 118.0
> Nombre d'itération nécéssaires : 7
> Nombre de contraintes ajoutées : 6
> Ordre de parcours des drônes : 
1 -> 20 -> 4 -> 59 -> 18 -> 39 -> 14 -> 60 -> 44 -> 37 -> 42 -> 54 -> 28 -> 85 -> 49 -> 26 -> 41 -> 76 -> 67 -> 57 -> 74 -> 84 -> 52 -> 31 -> 48 -> 27 -> 73 -> 70 -> 29 -> 32 -> 63 -> 56 -> 87 -> 62 -> 22 -> 11 -> 75 -> 45 -> 38 -> 68 -> 47 -> 90 -> 61 -> 78 -> 83 -> 55 -> 43 -> 81 -> 15 -> 33 -> 69 -> 53 -> 50 -> 16 -> 40 -> 30 -> 89 -> 58 -> 23 -> 34 -> 10 -> 88 -> 5 -> 65 -> 71 -> 51 -> 66 -> 64 -> 46 -> 6 -> 77 -> 86 -> 79 -> 9 -> 25 -> 24 -> 13 -> 3 -> 80 -> 8 -> 72 -> 35 -> 36 -> 12 -> 7 -> 2 -> 21 -> 82 -> 19 -> 17 -> 1. 
