Résolution exacte pour plat/plat100.dat points à visiter :
Résolution d'initiale :  
> temps total = 128.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 32) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 58) (23 -> 78) (24 -> 13) (25 -> 17) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 73) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 40) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 14) (75 -> 12) (76 -> 28) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46], [2, 100, 85, 95, 74, 14, 22, 58, 8, 76, 28, 37, 88, 65], [3, 96], [4, 33], [5, 92], [6, 84], [7, 93], [9, 31], [10, 97], [11, 52], [12, 75], [13, 24], [15, 34], [16, 18], [17, 32, 50, 40, 73, 25], [19, 57], [20, 81], [21, 42], [23, 78], [26, 54], [27, 89], [29, 66], [30, 36], [35, 47], [38, 63], [39, 71], [41, 56], [43, 44], [45, 68], [48, 80], [49, 62], [51, 83], [53, 60], [55, 90], [59, 98], [61, 64], [67, 94], [69, 77], [70, 82], [72, 86], [79, 91], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 42
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 46]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,46] + x[46,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 77) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 25) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 46) (26 -> 54) (27 -> 89) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 73) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 40) (74 -> 95) (75 -> 12) (76 -> 30) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 85) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 77, 69, 74, 95, 85, 100, 2, 65, 88, 37, 28, 76, 30, 36, 43, 44, 17, 25, 46], [3, 96], [4, 33], [5, 92], [6, 84], [7, 93], [8, 58], [9, 31], [10, 97], [11, 52], [12, 75], [13, 24], [14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [23, 78], [26, 54], [27, 89], [29, 66], [32, 50], [35, 47], [38, 63], [39, 71], [40, 73], [41, 56], [45, 68], [48, 80], [49, 62], [51, 83], [53, 60], [55, 90], [59, 98], [61, 64], [67, 94], [70, 82], [72, 86], [79, 91], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 41

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [3, 96]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,96] + x[96,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 85) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 30) (77 -> 1) (78 -> 65) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 79) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 86, 72, 23, 78, 65, 88, 37, 28, 76, 30, 36, 43, 44, 17, 3, 96, 79, 91, 27, 89, 9, 31, 41, 56, 53, 60, 85, 95, 74, 69, 77], [2, 100], [4, 33], [5, 92], [6, 84], [7, 93], [8, 58], [10, 97], [11, 52], [12, 75], [13, 24], [14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [32, 50], [35, 47], [38, 63], [39, 71], [45, 68], [48, 80], [49, 62], [51, 83], [55, 90], [59, 98], [61, 64], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 33

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [2, 100]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,100] + x[100,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 66) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 50) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 40) (74 -> 95) (75 -> 12) (76 -> 28) (77 -> 69) (78 -> 23) (79 -> 96) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 50, 32, 17, 44, 43, 36, 30, 76, 28, 37, 88, 65, 2, 100, 85, 60, 53, 56, 41, 31, 9, 89, 27, 91, 79, 96, 3], [4, 33], [5, 92], [6, 84], [7, 93], [8, 58], [10, 97], [11, 52], [12, 75], [13, 24], [14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [23, 78], [26, 54], [29, 66], [35, 47], [38, 63], [39, 71], [45, 68], [48, 80], [49, 62], [51, 83], [55, 90], [59, 98], [61, 64], [67, 94], [69, 77], [70, 82], [72, 86], [74, 95], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 35

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [4, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,33] + x[33,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 21) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 30) (77 -> 1) (78 -> 4) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 86, 72, 23, 78, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17, 3, 96, 52, 11, 21, 42, 88, 65, 2, 100, 85, 95, 74, 69, 77], [5, 92], [6, 84], [7, 93], [9, 31], [10, 97], [12, 75], [13, 24], [14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [26, 54], [27, 89], [28, 37], [29, 66], [32, 50], [35, 47], [38, 63], [39, 71, 48, 80], [41, 56], [45, 68], [49, 62], [51, 83], [53, 60], [55, 90], [59, 98], [61, 64], [67, 94], [70, 82], [79, 91], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 33

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [5, 92]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,92] + x[92,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 77) (2 -> 65) (3 -> 96) (4 -> 78) (5 -> 43) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 72) (24 -> 13) (25 -> 46) (26 -> 54) (27 -> 89) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 73) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 85) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 93) (96 -> 79) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 77, 69, 74, 95, 93, 7, 61, 64, 92, 5, 43, 44, 17, 3, 96, 79, 91, 27, 89, 9, 31, 41, 56, 53, 60, 85, 100, 2, 65, 88, 37, 28, 76, 8, 58, 33, 4, 78, 23, 72, 86, 40, 73, 25, 46], [6, 84], [10, 97], [11, 52], [12, 75], [13, 24], [14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71], [45, 68], [48, 80], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 28

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [6, 84]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,84] + x[84,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 17) (4 -> 33) (5 -> 92) (6 -> 22) (7 -> 93) (8 -> 76) (9 -> 89) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 5) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 28) (77 -> 1) (78 -> 4) (79 -> 96) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 86, 72, 23, 78, 4, 33, 58, 8, 76, 28, 37, 88, 65, 2, 100, 85, 60, 53, 56, 41, 31, 9, 89, 27, 91, 79, 96, 3, 17, 44, 43, 5, 92, 64, 61, 7, 93, 95, 74, 69, 77], [6, 22, 14, 84], [10, 97], [11, 52], [12, 75], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [10, 97]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,97] + x[97,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 17) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 5) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 97) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 28) (77 -> 1) (78 -> 65) (79 -> 93) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 53, 56, 41, 31, 9, 89, 27, 91, 79, 93, 95, 74, 69, 77], [3, 17, 44, 43, 5, 92, 64, 35, 47, 97, 10, 4, 33, 58, 8, 76, 28, 37, 88, 42, 21, 11, 52, 96], [6, 84, 14, 22], [7, 61], [12, 75], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [26, 54], [29, 66], [30, 36], [32, 50], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [7, 61]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,61] + x[61,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 140.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 96) (4 -> 10) (5 -> 43) (6 -> 22) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 88) (12 -> 75) (13 -> 24) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 61) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 1) (78 -> 4) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 86, 72, 23, 78, 4, 10, 97, 47, 35, 64, 92, 5, 43, 44, 17, 3, 96, 52, 11, 88, 65, 2, 100, 85, 95, 74, 69, 77], [6, 22, 14, 84], [7, 93, 79, 91, 27, 89, 90, 55, 61], [8, 76], [9, 31], [12, 75], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [28, 37], [29, 66], [30, 36], [32, 50], [33, 58], [38, 63], [39, 71, 48, 80], [41, 56], [45, 68], [49, 62], [51, 83], [53, 60], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [8, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,76] + x[76,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 140.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 17) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 4) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 25) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 43) (45 -> 68) (46 -> 99) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 69) (75 -> 12) (76 -> 28) (77 -> 1) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 5) (86 -> 72) (87 -> 97) (88 -> 11) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 99, 87, 97, 10, 4, 33, 58, 8, 76, 28, 37, 88, 11, 52, 96, 3, 17, 25, 73, 40, 86, 72, 23, 78, 65, 2, 100, 85, 5, 92, 64, 61, 7, 93, 95, 74, 69, 77], [6, 84, 14, 22], [9, 31], [12, 75], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [27, 89], [29, 66], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71, 48, 80], [41, 56], [43, 44], [45, 68], [49, 62], [51, 83], [53, 60], [55, 90], [59, 98], [67, 94], [70, 82], [79, 91]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [9, 31]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,31] + x[31,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 140.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 33) (5 -> 43) (6 -> 84) (7 -> 61) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 25) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 99) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 40) (74 -> 95) (75 -> 12) (76 -> 28) (77 -> 69) (78 -> 65) (79 -> 93) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 11) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 99, 87, 97, 10, 4, 33, 58, 8, 76, 28, 37, 88, 11, 52, 96, 3], [2, 100, 85, 60, 53, 56, 41, 31, 9, 89, 27, 91, 79, 93, 7, 61, 64, 92, 5, 43, 44, 17, 25, 73, 40, 86, 72, 23, 78, 65], [6, 84, 14, 22], [12, 75], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [69, 77], [70, 82], [74, 95]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [12, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,75] + x[75,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 143.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 96) (4 -> 10) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 50) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 40) (74 -> 69) (75 -> 5) (76 -> 8) (77 -> 1) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 55) (91 -> 27) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 79) (97 -> 12) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 50, 32, 17, 3, 96, 79, 91, 27, 89, 9, 31, 41, 56, 53, 60, 85, 100, 2, 65, 88, 37, 28, 76, 8, 58, 33, 4, 10, 97, 12, 75, 5, 92, 64, 61, 7, 93, 95, 74, 69, 77], [6, 84, 14, 22], [11, 52], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [21, 42], [23, 78], [26, 54], [29, 66], [30, 36], [35, 47], [38, 63], [39, 71, 48, 80], [43, 44], [45, 68], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [70, 82], [72, 86], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [11, 52]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,52] + x[52,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 143.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 21) (12 -> 43) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 32) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 40) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 27) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 87) (98 -> 59) (99 -> 46) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 21, 42, 88, 37, 28, 76, 8, 58, 33, 4, 10, 97, 87, 99, 46], [2, 100, 85, 60, 53, 56, 41, 31, 9, 89, 27, 91, 79, 93, 7, 61, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 40, 86, 72, 23, 78, 65], [6, 84, 14, 22], [13, 24], [15, 34], [16, 18], [19, 57], [20, 81], [25, 73], [26, 54], [29, 66], [30, 36], [35, 47], [38, 63], [39, 71], [45, 68], [48, 80], [49, 62], [51, 83], [55, 90], [59, 98], [67, 94], [69, 77], [70, 82], [74, 95]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [13, 24]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,24] + x[24,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 145.0
   Permutations :
(1 -> 75) (2 -> 65) (3 -> 17) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 10) (13 -> 55) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 25) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 61) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 28) (77 -> 69) (78 -> 4) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 5) (91 -> 27) (92 -> 64) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 46) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 75, 12, 10, 97, 87, 99, 46], [2, 65, 78, 4, 33, 58, 8, 76, 28, 37, 88, 42, 21, 11, 52, 96, 3, 17, 25, 73, 24, 13, 55, 90, 5, 92, 64, 61, 7, 93, 79, 91, 27, 89, 9, 31, 41, 56, 53, 60, 85, 100], [6, 84, 14, 22], [15, 34], [16, 18], [19, 57], [20, 81], [23, 72], [26, 54], [29, 66], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71], [40, 86], [43, 44], [45, 68], [48, 80], [49, 62], [51, 83], [59, 98], [67, 94], [69, 77], [70, 82], [74, 95]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [15, 34]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,34] + x[34,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 96) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 88) (12 -> 43) (13 -> 55) (14 -> 84) (15 -> 61) (16 -> 18) (17 -> 3) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 89) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 34) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 1) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 40) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 40, 86, 72, 23, 78, 65, 2, 100, 85, 95, 74, 69, 77], [3, 96, 52, 11, 88, 37, 28, 76, 8, 58, 33, 4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17], [6, 22, 14, 84], [7, 93, 79, 91, 27, 89, 9, 31, 34, 15, 61], [16, 18], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [32, 50], [38, 63], [39, 71, 48, 80], [41, 56], [45, 68], [49, 62], [51, 83], [53, 60], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [16, 18]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,18] + x[18,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 9) (12 -> 43) (13 -> 24) (14 -> 84) (15 -> 61) (16 -> 28) (17 -> 32) (18 -> 16) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 72) (24 -> 63) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 60) (39 -> 71) (40 -> 73) (41 -> 31) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 13) (56 -> 53) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 9, 89, 90, 55, 13, 24, 63, 38, 60, 85, 100, 2, 65, 78, 23, 72, 86, 40, 73, 25, 46], [4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 34, 15, 61, 7, 93, 79, 91, 27, 18, 16, 28, 76, 8, 58, 33], [6, 22, 14, 84], [19, 57], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [31, 41], [37, 88], [39, 71, 48, 80], [45, 68], [49, 62], [51, 83], [53, 56], [59, 98], [67, 94], [69, 77], [70, 82], [74, 95], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [19, 57]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,57] + x[57,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 11) (10 -> 97) (11 -> 52) (12 -> 43) (13 -> 55) (14 -> 84) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 96) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 27) (90 -> 89) (91 -> 51) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 27, 18, 16, 57, 19, 70, 82, 28, 76, 8, 58, 33, 4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 34, 15, 61, 7, 93, 79, 91, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 53, 56, 41, 31, 9, 11, 52, 96, 3], [6, 22, 14, 84], [20, 81], [21, 42], [26, 54], [29, 66], [30, 36], [37, 88], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [59, 98], [67, 94], [69, 77], [74, 95], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [20, 81]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,81] + x[81,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 43) (13 -> 55) (14 -> 84) (15 -> 61) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 66) (30 -> 76) (31 -> 34) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 56) (42 -> 21) (43 -> 36) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 11) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 85) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 34, 15, 61, 7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 88, 11, 52, 96, 3], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 36, 30, 76, 8, 58, 33], [6, 22, 14, 84], [17, 44], [21, 42], [26, 54], [29, 66], [32, 50], [38, 63], [39, 71, 48, 80], [41, 56], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [17, 44]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,44] + x[44,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 43) (13 -> 55) (14 -> 84) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 37) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 11) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 41, 56, 37, 88, 11, 52, 96, 3], [2, 100, 85, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 34, 15, 61, 7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 76, 8, 58, 33], [6, 22, 14, 84], [21, 42], [26, 54], [29, 66], [30, 36], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [21, 42]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,42] + x[42,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 151.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 93) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 21) (12 -> 43) (13 -> 24) (14 -> 84) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 56) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 31) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 13) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 85) (96 -> 52) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 21, 42, 88, 37, 56, 41, 31, 9, 89, 90, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 34, 15, 61, 7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 76, 8, 58, 33], [6, 22, 14, 84], [26, 54], [29, 66], [30, 36], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [26, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,54] + x[54,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 154.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 43) (13 -> 55) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 37) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 41, 56, 53, 60, 85, 100, 2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 76, 8, 58, 33, 4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 43, 44, 17, 32, 50, 34, 15, 61, 7, 26, 54, 37, 88, 42, 21, 11, 52, 96, 3], [6, 84, 14, 22], [29, 66], [30, 36], [38, 63], [39, 71, 48, 80], [45, 68], [49, 62], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [29, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[29,66] + x[66,29] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 158.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 96) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 21) (12 -> 1) (13 -> 55) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 3) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 7) (27 -> 18) (28 -> 76) (29 -> 66) (30 -> 36) (31 -> 34) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 54) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 56) (42 -> 88) (43 -> 44) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 17) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 85) (96 -> 52) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 34, 15, 61, 64, 92, 5, 75, 12], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [3, 96, 52, 11, 21, 42, 88, 37, 54, 26, 7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 76, 8, 58, 33, 4, 10, 97, 87, 99, 29, 66, 17], [6, 84, 14, 22], [30, 36], [32, 50], [35, 47], [38, 63], [39, 71], [41, 56], [43, 44], [45, 68], [48, 80], [49, 62], [53, 60], [59, 98], [67, 94]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [30, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,36] + x[36,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 31) (10 -> 4) (11 -> 21) (12 -> 1) (13 -> 55) (14 -> 22) (15 -> 61) (16 -> 18) (17 -> 3) (18 -> 27) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 97) (30 -> 36) (31 -> 34) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 56) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 66) (55 -> 90) (56 -> 41) (57 -> 16) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 48) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 30) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 39) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 89) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 34, 15, 61, 64, 92, 5, 75, 12], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [3, 96, 52, 11, 21, 42, 88, 37, 28, 82, 70, 19, 57, 16, 18, 27, 91, 79, 93, 7, 26, 54, 66, 29, 97, 10, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17], [6, 84, 14, 22], [32, 50], [35, 47], [38, 63], [39, 71, 48, 80], [41, 56], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [32, 50]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[32,50] + x[50,32] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 61) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 77) (13 -> 55) (14 -> 84) (15 -> 34) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 11) (22 -> 14) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 7) (27 -> 18) (28 -> 37) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 80) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 29) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 15) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 54) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 41, 56, 29, 66, 54, 26, 7, 61, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 33, 4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 88, 42, 21, 11, 52, 96, 3], [6, 22, 14, 84], [38, 63], [39, 80, 48, 71], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [69, 74], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [38, 63]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[38,63] + x[63,38] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 55) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 57) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 56) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 37) (55 -> 90) (56 -> 53) (57 -> 16) (58 -> 33) (59 -> 98) (60 -> 38) (61 -> 15) (62 -> 49) (63 -> 24) (64 -> 61) (65 -> 88) (66 -> 11) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 48) (72 -> 86) (73 -> 40) (74 -> 95) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 39) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 79) (92 -> 64) (93 -> 7) (94 -> 67) (95 -> 85) (96 -> 3) (97 -> 29) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100, 2, 65, 88, 42, 21, 12, 75, 5, 92, 64, 61, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 33, 4, 10, 97, 29, 66, 11, 52, 96, 3], [6, 84, 14, 22], [7, 26, 54, 37, 28, 82, 70, 19, 57, 16, 18, 27, 91, 79, 93], [9, 31, 41, 56, 53, 60, 38, 63, 24, 13, 55, 90, 89], [23, 78], [35, 47], [39, 71, 48, 80], [45, 68], [49, 62], [59, 98], [67, 94], [72, 86], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [23, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,78] + x[78,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 161.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 97) (11 -> 21) (12 -> 10) (13 -> 24) (14 -> 84) (15 -> 61) (16 -> 18) (17 -> 66) (18 -> 27) (19 -> 57) (20 -> 51) (21 -> 42) (22 -> 14) (23 -> 78) (24 -> 63) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 56) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 32) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 37) (55 -> 13) (56 -> 41) (57 -> 16) (58 -> 8) (59 -> 98) (60 -> 53) (61 -> 64) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 19) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 12) (76 -> 30) (77 -> 81) (78 -> 4) (79 -> 93) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 6) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 90) (90 -> 55) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 87) (98 -> 59) (99 -> 46) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 21, 42, 88, 65, 2, 100, 85, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17, 66, 29, 56, 41, 31, 9, 89, 90, 55, 13, 24, 63, 38, 32, 50, 34, 15, 61, 64, 92, 5, 75, 12, 10, 97, 87, 99, 46], [6, 22, 14, 84], [7, 26, 54, 37, 28, 82, 70, 19, 57, 16, 18, 27, 91, 79, 93], [25, 73], [35, 47], [39, 71, 48, 80], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [25, 73]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,73] + x[73,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 161.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 33) (5 -> 75) (6 -> 84) (7 -> 93) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 21) (12 -> 10) (13 -> 52) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 7) (27 -> 18) (28 -> 37) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 54) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 56) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 26) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 38) (61 -> 64) (62 -> 49) (63 -> 55) (64 -> 92) (65 -> 2) (66 -> 11) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 30) (77 -> 81) (78 -> 4) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 52, 96, 3], [2, 100, 85, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17, 32, 50, 34, 15, 61, 64, 92, 5, 75, 12, 10, 97, 87, 99, 29, 66, 11, 21, 42, 88, 65], [6, 84, 14, 22], [7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 54, 26], [9, 31, 41, 56, 53, 60, 38, 63, 55, 90, 89], [35, 47], [39, 71, 48, 80], [45, 68], [49, 62], [59, 98], [67, 94]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [35, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[35,47] + x[47,35] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 75) (2 -> 65) (3 -> 17) (4 -> 78) (5 -> 13) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 10) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 61) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 15) (30 -> 76) (31 -> 41) (32 -> 38) (33 -> 4) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 80) (40 -> 83) (41 -> 56) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 66) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 92) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 75, 12, 10, 97, 47, 35, 64, 92, 5, 13, 24, 73, 25, 46], [2, 65, 88, 42, 21, 11, 52, 96, 3, 17, 44, 43, 36, 30, 76, 8, 58, 33, 4, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 93, 79, 91, 27, 18, 16, 57, 19, 61, 7, 26, 54, 66, 29, 15, 34, 50, 32, 38, 63, 55, 90, 89, 9, 31, 41, 56, 53, 60, 85, 100], [6, 84, 14, 22], [28, 37], [39, 80, 48, 71], [45, 68], [49, 62], [59, 98], [67, 94], [70, 82], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [28, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,37] + x[37,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 78) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 10) (13 -> 55) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 56) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 43) (37 -> 88) (38 -> 63) (39 -> 80) (40 -> 83) (41 -> 33) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 71) (49 -> 62) (50 -> 34) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 66) (55 -> 90) (56 -> 53) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 58) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 30) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 41, 33, 4, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 88, 42, 21, 11, 52, 96, 3], [2, 65], [5, 75, 12, 10, 97, 47, 35, 64, 92], [6, 84, 14, 22], [7, 26, 54, 66, 29, 56, 53, 60, 38, 63, 58, 8, 76, 30, 36, 43, 44, 17, 32, 50, 34, 15, 61], [39, 80, 48, 71], [45, 68], [49, 62], [59, 98], [67, 94], [85, 100], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [2, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,65] + x[65,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 12) (2 -> 65) (3 -> 17) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 9) (9 -> 89) (10 -> 4) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 11) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 56) (30 -> 76) (31 -> 41) (32 -> 50) (33 -> 58) (34 -> 15) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 32) (39 -> 80) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 97) (48 -> 71) (49 -> 62) (50 -> 34) (51 -> 20) (52 -> 96) (53 -> 60) (54 -> 66) (55 -> 13) (56 -> 53) (57 -> 19) (58 -> 63) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 35) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 39) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 64) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 12, 75, 5, 92, 64, 35, 47, 97, 10, 4, 33, 58, 63, 38, 32, 50, 34, 15, 61, 7, 26, 54, 66, 29, 56, 53, 60, 85, 100, 2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 88, 42, 21, 11, 52, 96, 3, 17, 44, 43, 36, 30, 76, 8, 9, 89, 90, 55, 13, 24, 73, 25, 46], [6, 84, 14, 22], [31, 41], [39, 80], [45, 68], [48, 71], [49, 62], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [31, 41]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[31,41] + x[41,31] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 21) (12 -> 10) (13 -> 24) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 56) (27 -> 18) (28 -> 37) (29 -> 66) (30 -> 76) (31 -> 9) (32 -> 50) (33 -> 41) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 54) (38 -> 32) (39 -> 80) (40 -> 86) (41 -> 31) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 71) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 13) (56 -> 29) (57 -> 19) (58 -> 63) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 17) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 4) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 65) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 21, 42, 88, 65, 2, 100, 85, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 4, 33, 41, 31, 9, 89, 90, 55, 13, 24, 73, 25, 46], [5, 75, 12, 10, 97, 47, 35, 64, 92], [6, 84, 14, 22], [7, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 54, 26, 56, 29, 66, 17, 44, 43, 36, 30, 76, 8, 58, 63, 38, 32, 50, 34, 15, 61], [39, 80], [45, 68], [48, 71], [49, 62], [53, 60], [59, 98], [67, 94], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [39, 80]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,80] + x[80,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 70) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 56) (30 -> 36) (31 -> 9) (32 -> 50) (33 -> 41) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 88) (38 -> 63) (39 -> 80) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 97) (48 -> 71) (49 -> 62) (50 -> 34) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 18) (55 -> 13) (56 -> 53) (57 -> 19) (58 -> 8) (59 -> 98) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 58) (64 -> 35) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 5) (76 -> 30) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 64) (93 -> 79) (94 -> 67) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 56, 53, 60, 38, 63, 58, 8, 76, 30, 36, 43, 44, 17, 32, 50, 34, 15, 61, 7, 26, 54, 18, 16, 57, 19, 70, 82, 28, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 97, 10, 4, 33, 41, 31, 9, 89, 90, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [6, 84, 14, 22], [27, 91], [39, 80, 48, 71], [45, 68], [49, 62], [59, 98], [67, 94], [79, 93], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [27, 91]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,91] + x[91,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 63) (2 -> 100) (3 -> 17) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 52) (12 -> 77) (13 -> 24) (14 -> 22) (15 -> 61) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 11) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 56) (30 -> 76) (31 -> 9) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 32) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 66) (55 -> 13) (56 -> 41) (57 -> 19) (58 -> 33) (59 -> 98) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 90) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 47) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 63, 38, 32, 50, 34, 15, 61, 7, 26, 54, 66, 29, 56, 41, 31, 9, 89, 90, 55, 13, 24, 73, 25, 46], [2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 57, 19, 70, 82, 28, 37, 88, 42, 21, 11, 52, 96, 3, 17, 44, 43, 36, 30, 76, 8, 58, 33, 4, 10, 97, 47, 35, 64, 92, 5, 75, 12, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [6, 84, 14, 22], [39, 71, 48, 80], [45, 68], [49, 62], [53, 60], [59, 98], [67, 94], [69, 74], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [45, 68]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[45,68] + x[68,45] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 165.0
   Permutations :
(1 -> 77) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 31) (10 -> 12) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 3) (18 -> 27) (19 -> 61) (20 -> 51) (21 -> 11) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 97) (30 -> 36) (31 -> 41) (32 -> 38) (33 -> 58) (34 -> 50) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 80) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 13) (53 -> 60) (54 -> 37) (55 -> 90) (56 -> 53) (57 -> 16) (58 -> 8) (59 -> 98) (60 -> 68) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 30) (77 -> 81) (78 -> 4) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 14) (85 -> 100) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17, 3, 96, 52, 13, 24, 73, 25, 46], [2, 65, 88, 42, 21, 11, 66, 29, 97, 10, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 85, 100], [6, 84, 14, 22], [7, 26, 54, 37, 28, 82, 70, 19, 61], [9, 31, 41, 56, 53, 60, 68, 45, 15, 34, 50, 32, 38, 63, 55, 90, 89], [39, 80, 48, 71], [49, 62], [59, 98], [67, 94], [69, 74], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [49, 62]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[49,62] + x[62,49] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 166.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 77) (13 -> 55) (14 -> 22) (15 -> 45) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 70) (20 -> 51) (21 -> 11) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 7) (27 -> 18) (28 -> 37) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 30) (37 -> 88) (38 -> 32) (39 -> 71) (40 -> 86) (41 -> 33) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 34) (51 -> 83) (52 -> 96) (53 -> 56) (54 -> 26) (55 -> 90) (56 -> 49) (57 -> 47) (58 -> 63) (59 -> 98) (60 -> 53) (61 -> 19) (62 -> 54) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 17) (67 -> 94) (68 -> 60) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 89, 9, 31, 41, 33, 4, 10, 97, 87, 99, 29, 66, 17, 44, 43, 36, 30, 76, 8, 58, 63, 38, 32, 50, 34, 15, 45, 68, 60, 53, 56, 49, 62, 54, 26, 7, 61, 19, 70, 82, 28, 37, 88, 42, 21, 11, 52, 96, 3], [2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 57, 47, 35, 64, 92, 5, 75, 12, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [6, 84, 14, 22], [39, 71, 48, 80], [59, 98], [67, 94], [69, 74]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [59, 98]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[59,98] + x[98,59] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 167.0
   Permutations :
(1 -> 77) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 22) (15 -> 34) (16 -> 28) (17 -> 3) (18 -> 16) (19 -> 61) (20 -> 51) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 37) (29 -> 99) (30 -> 36) (31 -> 9) (32 -> 38) (33 -> 58) (34 -> 50) (35 -> 47) (36 -> 43) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 80) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 41) (57 -> 19) (58 -> 8) (59 -> 68) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 30) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 27) (92 -> 64) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 28, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 19, 61, 7, 26, 54, 62, 49, 56, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 38, 63, 55, 13, 24, 73, 25, 46], [3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 58, 8, 76, 30, 36, 43, 44, 17], [6, 84, 14, 22], [39, 71, 48, 80], [53, 60], [67, 94], [69, 74], [70, 82]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [53, 60]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,60] + x[60,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 168.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 21) (12 -> 77) (13 -> 52) (14 -> 22) (15 -> 34) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 61) (20 -> 51) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 82) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 60) (39 -> 80) (40 -> 86) (41 -> 33) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 25) (47 -> 35) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 89) (54 -> 62) (55 -> 90) (56 -> 29) (57 -> 47) (58 -> 63) (59 -> 68) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 2) (66 -> 11) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 55) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 98) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 52, 96, 3], [2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 57, 47, 35, 64, 92, 5, 75, 12, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [4, 10, 97, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 63, 38, 60, 53, 89, 9, 31, 41, 33], [6, 84, 14, 22], [7, 26, 54, 62, 49, 56, 29, 66, 11, 21, 42, 88, 37, 28, 82, 70, 19, 61], [39, 80, 48, 71], [55, 90], [67, 94], [69, 74], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [55, 90]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[55,90] + x[90,55] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 168.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 21) (13 -> 55) (14 -> 22) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 57) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 16) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 60) (39 -> 71) (40 -> 83) (41 -> 33) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 96) (53 -> 89) (54 -> 62) (55 -> 90) (56 -> 26) (57 -> 47) (58 -> 63) (59 -> 68) (60 -> 53) (61 -> 19) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 11) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 39) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 98) (91 -> 79) (92 -> 5) (93 -> 7) (94 -> 67) (95 -> 85) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 63, 38, 60, 53, 89, 9, 31, 41, 33, 4, 10, 97, 87, 99, 29, 66, 11, 52, 96, 3], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [5, 75, 12, 21, 42, 88, 37, 28, 16, 18, 27, 91, 79, 93, 7, 61, 19, 57, 47, 35, 64, 92], [6, 84, 14, 22], [26, 54, 62, 49, 56], [39, 71, 48, 80], [67, 94], [70, 82]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [67, 94]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[67,94] + x[94,67] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 84) (7 -> 93) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 21) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 61) (20 -> 81) (21 -> 42) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 18) (28 -> 82) (29 -> 97) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 80) (40 -> 83) (41 -> 31) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 35) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 26) (57 -> 47) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 12) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 90) (90 -> 98) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 53) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 38, 63, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [5, 75, 12, 21, 42, 88, 37, 28, 82, 70, 19, 61, 7, 93, 79, 91, 27, 18, 16, 57, 47, 35, 64, 92], [26, 54, 62, 49, 56], [39, 80, 48, 71], [87, 99]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [87, 99]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[87,99] + x[99,87] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 46) (2 -> 100) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 84) (7 -> 26) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 21) (12 -> 77) (13 -> 55) (14 -> 67) (15 -> 34) (16 -> 57) (17 -> 44) (18 -> 16) (19 -> 61) (20 -> 51) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 82) (29 -> 66) (30 -> 76) (31 -> 41) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 80) (40 -> 86) (41 -> 33) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 25) (47 -> 35) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 96) (53 -> 60) (54 -> 62) (55 -> 90) (56 -> 53) (57 -> 47) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 52) (64 -> 92) (65 -> 2) (66 -> 11) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 23) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 91) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 98) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 31) (95 -> 93) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 31, 41, 33, 4, 10, 97, 87, 99, 29, 66, 11, 21, 42, 88, 37, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 60, 38, 63, 52, 96, 3], [2, 100, 85, 95, 93, 79, 91, 27, 18, 16, 57, 47, 35, 64, 92, 5, 75, 12, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [9, 89], [39, 80, 48, 71], [69, 74]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [9, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,89] + x[89,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 99) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 80) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 26) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 7) (94 -> 53) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 38, 63, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 7, 61, 19, 70, 82, 28, 37, 88, 42, 21, 12, 75], [26, 54, 62, 49, 56], [39, 71], [48, 80]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [39, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,71] + x[71,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 21) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 57) (20 -> 51) (21 -> 42) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 7) (27 -> 91) (28 -> 16) (29 -> 99) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 64) (36 -> 30) (37 -> 28) (38 -> 63) (39 -> 71) (40 -> 86) (41 -> 31) (42 -> 88) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 35) (48 -> 80) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 13) (56 -> 49) (57 -> 47) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 54) (63 -> 55) (64 -> 92) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 12) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 37) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 5) (93 -> 95) (94 -> 53) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 56, 49, 62, 54, 26, 7, 61, 19, 57, 47, 35, 64, 92, 5, 75, 12, 21, 42, 88, 37, 28, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 38, 63, 55, 13, 24, 73, 25, 46], [39, 71, 48, 80], [70, 82]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [70, 82]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[70,82] + x[82,70] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 37) (29 -> 99) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 80) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 26) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 48) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 39) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 7) (94 -> 53) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 38, 63, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 7, 61, 19, 70, 82, 28, 37, 88, 42, 21, 12, 75], [26, 54, 62, 49, 56], [39, 71, 48, 80]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [39, 71, 48, 80]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[39,71] + x[71,48] + x[48,80] + x[80,39] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 75) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 31) (10 -> 97) (11 -> 52) (12 -> 21) (13 -> 55) (14 -> 84) (15 -> 45) (16 -> 57) (17 -> 32) (18 -> 16) (19 -> 61) (20 -> 81) (21 -> 42) (22 -> 58) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 82) (29 -> 66) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 64) (36 -> 43) (37 -> 28) (38 -> 60) (39 -> 80) (40 -> 83) (41 -> 33) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 25) (47 -> 35) (48 -> 71) (49 -> 56) (50 -> 34) (51 -> 20) (52 -> 96) (53 -> 94) (54 -> 62) (55 -> 63) (56 -> 53) (57 -> 47) (58 -> 8) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 92) (65 -> 78) (66 -> 11) (67 -> 14) (68 -> 59) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 86) (73 -> 24) (74 -> 95) (75 -> 12) (76 -> 30) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 48) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 37) (89 -> 9) (90 -> 89) (91 -> 27) (92 -> 5) (93 -> 79) (94 -> 67) (95 -> 93) (96 -> 3) (97 -> 87) (98 -> 90) (99 -> 29) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 63, 38, 60, 85, 100, 2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 93, 79, 91, 27, 18, 16, 57, 47, 35, 64, 92, 5, 75, 12, 21, 42, 88, 37, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 94, 67, 14, 84, 6, 22, 58, 8, 76, 30, 36, 43, 44, 17, 32, 50, 34, 15, 45, 68, 59, 98, 90, 89, 9, 31, 41, 33, 4, 10, 97, 87, 99, 29, 66, 11, 52, 96, 3], [39, 80, 48, 71]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [39, 80, 48, 71]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[39,80] + x[80,48] + x[48,71] + x[71,39] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 172.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 76) (29 -> 99) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 26) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 82) (71 -> 39) (72 -> 86) (73 -> 25) (74 -> 95) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 7) (94 -> 53) (95 -> 85) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 7, 61, 19, 70, 82, 28, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 38, 63, 55, 13, 24, 73, 25, 46], [2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 95, 85, 100], [26, 54, 62, 49, 56]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 45 Cassage de contrainte 
> Cycle à casser : [26, 54, 62, 49, 56]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[26,54] + x[54,62] + x[62,49] + x[49,56] + x[56,26] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 172.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 61) (20 -> 51) (21 -> 12) (22 -> 58) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 99) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 94) (54 -> 62) (55 -> 13) (56 -> 53) (57 -> 16) (58 -> 8) (59 -> 68) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 14) (68 -> 45) (69 -> 77) (70 -> 19) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 28) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 38, 63, 55, 13, 24, 73, 25, 46], [6, 22, 58, 8, 76, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 94, 67, 14, 84]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 46 Cassage de contrainte 
> Cycle à casser : [6, 22, 58, 8, 76, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 94, 67, 14, 84]
> Taille du cycle à casser : 21
> Nouvelle contrainte : x[6,22] + x[22,58] + x[58,8] + x[8,76] + x[76,28] + x[28,82] + x[82,70] + x[70,19] + x[19,61] + x[61,7] + x[7,26] + x[26,54] + x[54,62] + x[62,49] + x[49,56] + x[56,53] + x[53,94] + x[94,67] + x[67,14] + x[14,84] + x[84,6] ≤ 20
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 172.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 51) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 7) (27 -> 91) (28 -> 76) (29 -> 99) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 13) (56 -> 49) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 54) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 53) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 38, 63, 55, 13, 24, 73, 25, 46], [6, 84, 14, 67, 94, 53, 56, 49, 62, 54, 26, 7, 61, 19, 70, 82, 28, 76, 8, 58, 22]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 47 Cassage de contrainte 
> Cycle à casser : [6, 84, 14, 67, 94, 53, 56, 49, 62, 54, 26, 7, 61, 19, 70, 82, 28, 76, 8, 58, 22]
> Taille du cycle à casser : 21
> Nouvelle contrainte : x[6,84] + x[84,14] + x[14,67] + x[67,94] + x[94,53] + x[53,56] + x[56,49] + x[49,62] + x[62,54] + x[54,26] + x[26,7] + x[7,61] + x[61,19] + x[19,70] + x[70,82] + x[82,28] + x[28,76] + x[76,8] + x[8,58] + x[58,22] + x[22,6] ≤ 20
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 172.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 51) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 56) (27 -> 91) (28 -> 76) (29 -> 99) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 13) (56 -> 49) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 19) (62 -> 54) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 95) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 7) (94 -> 53) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 7, 61, 19, 70, 82, 28, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 38, 63, 55, 13, 24, 73, 25, 46], [2, 100, 85, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [26, 56, 49, 62, 54]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 48 Cassage de contrainte 
> Cycle à casser : [26, 56, 49, 62, 54]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[26,56] + x[56,49] + x[49,62] + x[62,54] + x[54,26] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 1) (4 -> 10) (5 -> 92) (6 -> 22) (7 -> 26) (8 -> 58) (9 -> 89) (10 -> 97) (11 -> 52) (12 -> 75) (13 -> 55) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 81) (21 -> 12) (22 -> 14) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 91) (28 -> 76) (29 -> 66) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 4) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 60) (39 -> 37) (40 -> 83) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 25) (47 -> 57) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 96) (53 -> 94) (54 -> 62) (55 -> 61) (56 -> 41) (57 -> 16) (58 -> 63) (59 -> 68) (60 -> 53) (61 -> 7) (62 -> 49) (63 -> 38) (64 -> 35) (65 -> 78) (66 -> 11) (67 -> 33) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 39) (72 -> 86) (73 -> 24) (74 -> 82) (75 -> 5) (76 -> 8) (77 -> 69) (78 -> 23) (79 -> 93) (80 -> 48) (81 -> 77) (82 -> 28) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 99) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 85) (96 -> 3) (97 -> 87) (98 -> 59) (99 -> 29) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 61, 7, 26, 54, 62, 49, 56, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 85, 100, 2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 82, 28, 76, 8, 58, 63, 38, 60, 53, 94, 67, 33, 4, 10, 97, 87, 99, 29, 66, 11, 52, 96, 3], [6, 22, 14, 84], [19, 70]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 49 Cassage de contrainte 
> Cycle à casser : [19, 70]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,70] + x[70,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 46) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 75) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 21) (13 -> 55) (14 -> 84) (15 -> 34) (16 -> 57) (17 -> 3) (18 -> 16) (19 -> 61) (20 -> 81) (21 -> 42) (22 -> 14) (23 -> 72) (24 -> 13) (25 -> 73) (26 -> 54) (27 -> 18) (28 -> 82) (29 -> 99) (30 -> 36) (31 -> 9) (32 -> 38) (33 -> 67) (34 -> 50) (35 -> 64) (36 -> 43) (37 -> 39) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 31) (42 -> 88) (43 -> 44) (44 -> 17) (45 -> 15) (46 -> 25) (47 -> 35) (48 -> 80) (49 -> 56) (50 -> 32) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 90) (56 -> 41) (57 -> 47) (58 -> 8) (59 -> 68) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 58) (64 -> 92) (65 -> 78) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 74) (70 -> 19) (71 -> 48) (72 -> 86) (73 -> 24) (74 -> 69) (75 -> 12) (76 -> 28) (77 -> 1) (78 -> 23) (79 -> 91) (80 -> 30) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 6) (85 -> 100) (86 -> 40) (87 -> 97) (88 -> 37) (89 -> 27) (90 -> 98) (91 -> 79) (92 -> 5) (93 -> 95) (94 -> 53) (95 -> 93) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 46, 25, 73, 24, 13, 55, 90, 98, 59, 68, 45, 15, 34, 50, 32, 38, 63, 58, 8, 76, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 41, 31, 9, 89, 27, 18, 16, 57, 47, 35, 64, 92, 5, 75, 12, 21, 42, 88, 37, 39, 71, 48, 80, 30, 36, 43, 44, 17, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 67, 94, 53, 60, 85, 100, 2, 65, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77], [6, 22, 14, 84], [69, 74], [79, 91], [93, 95]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 50 Cassage de contrainte 
> Cycle à casser : [69, 74]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[69,74] + x[74,69] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 12) (11 -> 21) (12 -> 75) (13 -> 24) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 66) (18 -> 27) (19 -> 61) (20 -> 51) (21 -> 42) (22 -> 58) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 99) (30 -> 36) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 43) (37 -> 28) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 88) (43 -> 44) (44 -> 80) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 94) (54 -> 62) (55 -> 13) (56 -> 53) (57 -> 16) (58 -> 8) (59 -> 68) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 14) (68 -> 45) (69 -> 77) (70 -> 19) (71 -> 48) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 30) (77 -> 81) (78 -> 4) (79 -> 93) (80 -> 39) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 65) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 21, 42, 88, 65, 2, 100, 85, 60, 38, 63, 55, 13, 24, 73, 25, 46], [4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 66, 29, 99, 87, 97, 10, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78], [6, 22, 58, 8, 76, 30, 36, 43, 44, 80, 39, 37, 28, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 94, 67, 14, 84], [48, 71]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 51 Cassage de contrainte 
> Cycle à casser : [48, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[48,71] + x[71,48] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 78) (5 -> 92) (6 -> 84) (7 -> 26) (8 -> 76) (9 -> 8) (10 -> 38) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 45) (16 -> 18) (17 -> 32) (18 -> 27) (19 -> 61) (20 -> 81) (21 -> 12) (22 -> 6) (23 -> 72) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 89) (28 -> 37) (29 -> 99) (30 -> 36) (31 -> 41) (32 -> 50) (33 -> 4) (34 -> 15) (35 -> 47) (36 -> 43) (37 -> 39) (38 -> 63) (39 -> 71) (40 -> 83) (41 -> 33) (42 -> 21) (43 -> 44) (44 -> 17) (45 -> 68) (46 -> 1) (47 -> 57) (48 -> 80) (49 -> 56) (50 -> 34) (51 -> 20) (52 -> 11) (53 -> 60) (54 -> 62) (55 -> 13) (56 -> 53) (57 -> 16) (58 -> 22) (59 -> 98) (60 -> 85) (61 -> 7) (62 -> 49) (63 -> 58) (64 -> 35) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 59) (69 -> 74) (70 -> 19) (71 -> 48) (72 -> 86) (73 -> 25) (74 -> 82) (75 -> 5) (76 -> 28) (77 -> 69) (78 -> 23) (79 -> 91) (80 -> 30) (81 -> 77) (82 -> 70) (83 -> 51) (84 -> 14) (85 -> 100) (86 -> 40) (87 -> 97) (88 -> 42) (89 -> 9) (90 -> 55) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 31) (95 -> 93) (96 -> 52) (97 -> 10) (98 -> 90) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 38, 63, 58, 22, 6, 84, 14, 67, 94, 31, 41, 33, 4, 78, 23, 72, 86, 40, 83, 51, 20, 81, 77, 69, 74, 82, 70, 19, 61, 7, 26, 54, 62, 49, 56, 53, 60, 85, 100, 2, 65, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 89, 9, 8, 76, 28, 37, 39, 71, 48, 80, 30, 36, 43, 44, 17, 32, 50, 34, 15, 45, 68, 59, 98, 90, 55, 13, 24, 73, 25, 46], [79, 91], [93, 95]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 52 Cassage de contrainte 
> Cycle à casser : [79, 91]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[79,91] + x[91,79] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 3) (2 -> 65) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 58) (9 -> 89) (10 -> 38) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 51) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 7) (27 -> 91) (28 -> 37) (29 -> 99) (30 -> 76) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 31) (35 -> 47) (36 -> 30) (37 -> 39) (38 -> 63) (39 -> 80) (40 -> 86) (41 -> 56) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 60) (54 -> 26) (55 -> 13) (56 -> 49) (57 -> 16) (58 -> 22) (59 -> 68) (60 -> 85) (61 -> 19) (62 -> 54) (63 -> 55) (64 -> 35) (65 -> 88) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 50) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 8) (77 -> 81) (78 -> 4) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 100) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 53) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 38, 63, 55, 13, 24, 73, 25, 46], [2, 65, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 4, 33, 41, 56, 49, 62, 54, 26, 7, 61, 19, 70, 82, 28, 37, 39, 80, 48, 71, 50, 32, 17, 44, 43, 36, 30, 76, 8, 58, 22, 6, 84, 14, 67, 94, 53, 60, 85, 100], [9, 89, 90, 98, 59, 68, 45, 15, 34, 31]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 53 Cassage de contrainte 
> Cycle à casser : [9, 89, 90, 98, 59, 68, 45, 15, 34, 31]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[9,89] + x[89,90] + x[90,98] + x[98,59] + x[59,68] + x[68,45] + x[45,15] + x[15,34] + x[34,31] + x[31,9] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 22) (7 -> 26) (8 -> 76) (9 -> 89) (10 -> 4) (11 -> 52) (12 -> 75) (13 -> 24) (14 -> 84) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 57) (20 -> 51) (21 -> 12) (22 -> 58) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 54) (27 -> 91) (28 -> 82) (29 -> 66) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 97) (48 -> 71) (49 -> 56) (50 -> 32) (51 -> 83) (52 -> 13) (53 -> 94) (54 -> 62) (55 -> 61) (56 -> 53) (57 -> 16) (58 -> 8) (59 -> 68) (60 -> 38) (61 -> 7) (62 -> 49) (63 -> 55) (64 -> 35) (65 -> 2) (66 -> 11) (67 -> 14) (68 -> 45) (69 -> 77) (70 -> 19) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 28) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 70) (83 -> 40) (84 -> 6) (85 -> 60) (86 -> 72) (87 -> 99) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 67) (95 -> 74) (96 -> 87) (97 -> 10) (98 -> 59) (99 -> 29) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 87, 99, 29, 66, 11, 52, 13, 24, 73, 25, 46], [2, 100, 85, 60, 38, 63, 55, 61, 7, 26, 54, 62, 49, 56, 53, 94, 67, 14, 84, 6, 22, 58, 8, 76, 28, 82, 70, 19, 57, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65], [4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 97, 10]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 54 Cassage de contrainte 
> Cycle à casser : [1, 3, 96, 87, 99, 29, 66, 11, 52, 13, 24, 73, 25, 46]
> Taille du cycle à casser : 14
> Nouvelle contrainte : x[1,3] + x[3,96] + x[96,87] + x[87,99] + x[99,29] + x[29,66] + x[66,11] + x[11,52] + x[52,13] + x[13,24] + x[24,73] + x[73,25] + x[25,46] + x[46,1] ≤ 13
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 3) (2 -> 100) (3 -> 96) (4 -> 33) (5 -> 92) (6 -> 84) (7 -> 61) (8 -> 16) (9 -> 89) (10 -> 4) (11 -> 66) (12 -> 75) (13 -> 24) (14 -> 67) (15 -> 34) (16 -> 18) (17 -> 44) (18 -> 27) (19 -> 70) (20 -> 51) (21 -> 12) (22 -> 6) (23 -> 78) (24 -> 73) (25 -> 46) (26 -> 7) (27 -> 91) (28 -> 76) (29 -> 99) (30 -> 80) (31 -> 9) (32 -> 17) (33 -> 41) (34 -> 50) (35 -> 47) (36 -> 30) (37 -> 88) (38 -> 63) (39 -> 37) (40 -> 86) (41 -> 31) (42 -> 21) (43 -> 36) (44 -> 43) (45 -> 15) (46 -> 1) (47 -> 57) (48 -> 71) (49 -> 62) (50 -> 32) (51 -> 83) (52 -> 11) (53 -> 56) (54 -> 26) (55 -> 13) (56 -> 49) (57 -> 19) (58 -> 22) (59 -> 68) (60 -> 38) (61 -> 55) (62 -> 54) (63 -> 58) (64 -> 35) (65 -> 2) (66 -> 29) (67 -> 94) (68 -> 45) (69 -> 77) (70 -> 82) (71 -> 39) (72 -> 23) (73 -> 25) (74 -> 69) (75 -> 5) (76 -> 8) (77 -> 81) (78 -> 65) (79 -> 93) (80 -> 48) (81 -> 20) (82 -> 28) (83 -> 40) (84 -> 14) (85 -> 60) (86 -> 72) (87 -> 97) (88 -> 42) (89 -> 90) (90 -> 98) (91 -> 79) (92 -> 64) (93 -> 95) (94 -> 53) (95 -> 74) (96 -> 52) (97 -> 10) (98 -> 59) (99 -> 87) (100 -> 85) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 96, 52, 11, 66, 29, 99, 87, 97, 10, 4, 33, 41, 31, 9, 89, 90, 98, 59, 68, 45, 15, 34, 50, 32, 17, 44, 43, 36, 30, 80, 48, 71, 39, 37, 88, 42, 21, 12, 75, 5, 92, 64, 35, 47, 57, 19, 70, 82, 28, 76, 8, 16, 18, 27, 91, 79, 93, 95, 74, 69, 77, 81, 20, 51, 83, 40, 86, 72, 23, 78, 65, 2, 100, 85, 60, 38, 63, 58, 22, 6, 84, 14, 67, 94, 53, 56, 49, 62, 54, 26, 7, 61, 55, 13, 24, 73, 25, 46]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 173.0
> Nombre d'itération nécéssaires : 55
> Nombre de contraintes ajoutées : 54
> Ordre de parcours des drônes : 
1 -> 3 -> 96 -> 52 -> 11 -> 66 -> 29 -> 99 -> 87 -> 97 -> 10 -> 4 -> 33 -> 41 -> 31 -> 9 -> 89 -> 90 -> 98 -> 59 -> 68 -> 45 -> 15 -> 34 -> 50 -> 32 -> 17 -> 44 -> 43 -> 36 -> 30 -> 80 -> 48 -> 71 -> 39 -> 37 -> 88 -> 42 -> 21 -> 12 -> 75 -> 5 -> 92 -> 64 -> 35 -> 47 -> 57 -> 19 -> 70 -> 82 -> 28 -> 76 -> 8 -> 16 -> 18 -> 27 -> 91 -> 79 -> 93 -> 95 -> 74 -> 69 -> 77 -> 81 -> 20 -> 51 -> 83 -> 40 -> 86 -> 72 -> 23 -> 78 -> 65 -> 2 -> 100 -> 85 -> 60 -> 38 -> 63 -> 58 -> 22 -> 6 -> 84 -> 14 -> 67 -> 94 -> 53 -> 56 -> 49 -> 62 -> 54 -> 26 -> 7 -> 61 -> 55 -> 13 -> 24 -> 73 -> 25 -> 46 -> 1. 
