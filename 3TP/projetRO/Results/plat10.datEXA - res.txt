Résolution exacte pour plat/plat10.dat points à visiter :
Résolution d'initiale :  
> temps total = 158.0
   Permutations :
(1 -> 3) (2 -> 9) (3 -> 1) (4 -> 10) (5 -> 8) (6 -> 7) (7 -> 6) (8 -> 5) (9 -> 2) (10 -> 4) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3], [2, 9], [4, 10], [5, 8], [6, 7]]
> Nombre de cycle(s) trouvé(s) : 5
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 3]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,3] + x[3,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 162.0
   Permutations :
(1 -> 3) (2 -> 9) (3 -> 7) (4 -> 10) (5 -> 8) (6 -> 4) (7 -> 6) (8 -> 5) (9 -> 1) (10 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 7, 6, 4, 10, 2, 9], [5, 8]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [5, 8]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,8] + x[8,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 170.0
   Permutations :
(1 -> 3) (2 -> 9) (3 -> 5) (4 -> 10) (5 -> 8) (6 -> 4) (7 -> 6) (8 -> 7) (9 -> 1) (10 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 3, 5, 8, 7, 6, 4, 10, 2, 9]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 170.0
> Nombre d'itération nécéssaires : 3
> Nombre de contraintes ajoutées : 2
> Ordre de parcours des drônes : 
1 -> 3 -> 5 -> 8 -> 7 -> 6 -> 4 -> 10 -> 2 -> 9 -> 1. 
