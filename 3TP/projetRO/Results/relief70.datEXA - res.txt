Résolution exacte pour relief/relief70.dat points à visiter :
Résolution d'initiale :  
> temps total = 112.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 2) (4 -> 45) (5 -> 52) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 44) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 58) (18 -> 26) (19 -> 50) (20 -> 32) (21 -> 5) (22 -> 48) (23 -> 21) (24 -> 31) (25 -> 23) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 34) (31 -> 18) (32 -> 1) (33 -> 47) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 14) (40 -> 60) (41 -> 12) (42 -> 65) (43 -> 54) (44 -> 9) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 17) (55 -> 27) (56 -> 59) (57 -> 61) (58 -> 49) (59 -> 11) (60 -> 37) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 38, 42, 65, 8, 4, 45, 53, 43, 54, 17, 58, 49, 68, 66, 10, 35, 15, 28, 57, 61, 7, 19, 50, 36, 22, 48, 3, 2, 40, 60, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32], [5, 52, 51, 69, 6, 46, 55, 27, 30, 34, 33, 47, 41, 12, 25, 23, 21], [9, 44], [14, 39], [18, 26, 67, 24, 31]]
> Nombre de cycle(s) trouvé(s) : 5
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [9, 44]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,44] + x[44,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 112.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 2) (4 -> 45) (5 -> 52) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 44) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 31) (18 -> 26) (19 -> 50) (20 -> 32) (21 -> 58) (22 -> 48) (23 -> 21) (24 -> 60) (25 -> 38) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 34) (31 -> 18) (32 -> 1) (33 -> 17) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 14) (40 -> 9) (41 -> 12) (42 -> 65) (43 -> 47) (44 -> 23) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 5) (55 -> 27) (56 -> 59) (57 -> 61) (58 -> 49) (59 -> 11) (60 -> 37) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 54) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 54, 5, 52, 51, 69, 6, 46, 55, 27, 30, 34, 33, 17, 31, 18, 26, 67, 24, 60, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32], [2, 40, 9, 44, 23, 21, 58, 49, 68, 66, 10, 35, 15, 28, 57, 61, 7, 19, 50, 36, 22, 48, 3], [4, 45, 53, 43, 47, 41, 12, 25, 38, 42, 65, 8], [14, 39]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [14, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,39] + x[39,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 114.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 2) (4 -> 45) (5 -> 17) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 44) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 31) (18 -> 26) (19 -> 50) (20 -> 32) (21 -> 58) (22 -> 48) (23 -> 21) (24 -> 60) (25 -> 38) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 34) (31 -> 18) (32 -> 14) (33 -> 61) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 52) (40 -> 9) (41 -> 12) (42 -> 65) (43 -> 47) (44 -> 23) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 5) (55 -> 27) (56 -> 59) (57 -> 1) (58 -> 49) (59 -> 11) (60 -> 37) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 54) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 54, 5, 17, 31, 18, 26, 67, 24, 60, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32, 14, 39, 52, 51, 69, 6, 46, 55, 27, 30, 34, 33, 61, 7, 19, 50, 36, 22, 48, 3, 2, 40, 9, 44, 23, 21, 58, 49, 68, 66, 10, 35, 15, 28, 57], [4, 45, 53, 43, 47, 41, 12, 25, 38, 42, 65, 8]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [4, 45, 53, 43, 47, 41, 12, 25, 38, 42, 65, 8]
> Taille du cycle à casser : 12
> Nouvelle contrainte : x[4,45] + x[45,53] + x[53,43] + x[43,47] + x[47,41] + x[41,12] + x[12,25] + x[25,38] + x[38,42] + x[42,65] + x[65,8] + x[8,4] ≤ 11
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 114.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 2) (4 -> 45) (5 -> 17) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 37) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 58) (18 -> 26) (19 -> 50) (20 -> 32) (21 -> 5) (22 -> 48) (23 -> 21) (24 -> 31) (25 -> 23) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 34) (31 -> 18) (32 -> 14) (33 -> 47) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 52) (40 -> 60) (41 -> 12) (42 -> 65) (43 -> 54) (44 -> 9) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 1) (55 -> 27) (56 -> 59) (57 -> 61) (58 -> 49) (59 -> 11) (60 -> 44) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 38, 42, 65, 8, 4, 45, 53, 43, 54], [2, 40, 60, 44, 9, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32, 14, 39, 52, 51, 69, 6, 46, 55, 27, 30, 34, 33, 47, 41, 12, 25, 23, 21, 5, 17, 58, 49, 68, 66, 10, 35, 15, 28, 57, 61, 7, 19, 50, 36, 22, 48, 3], [18, 26, 67, 24, 31]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [18, 26, 67, 24, 31]
> Taille du cycle à casser : 5
> Nouvelle contrainte : x[18,26] + x[26,67] + x[67,24] + x[24,31] + x[31,18] ≤ 4
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 115.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 2) (4 -> 45) (5 -> 17) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 37) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 31) (18 -> 26) (19 -> 58) (20 -> 32) (21 -> 50) (22 -> 48) (23 -> 21) (24 -> 54) (25 -> 23) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 34) (31 -> 18) (32 -> 14) (33 -> 61) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 52) (40 -> 60) (41 -> 12) (42 -> 65) (43 -> 47) (44 -> 9) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 5) (55 -> 27) (56 -> 59) (57 -> 1) (58 -> 49) (59 -> 11) (60 -> 44) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 38, 42, 65, 8, 4, 45, 53, 43, 47, 41, 12, 25, 23, 21, 50, 36, 22, 48, 3, 2, 40, 60, 44, 9, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32, 14, 39, 52, 51, 69, 6, 46, 55, 27, 30, 34, 33, 61, 7, 19, 58, 49, 68, 66, 10, 35, 15, 28, 57], [5, 17, 31, 18, 26, 67, 24, 54]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [5, 17, 31, 18, 26, 67, 24, 54]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[5,17] + x[17,31] + x[31,18] + x[18,26] + x[26,67] + x[67,24] + x[24,54] + x[54,5] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 115.0
   Permutations :
(1 -> 16) (2 -> 40) (3 -> 45) (4 -> 34) (5 -> 17) (6 -> 46) (7 -> 19) (8 -> 4) (9 -> 44) (10 -> 35) (11 -> 20) (12 -> 25) (13 -> 62) (14 -> 39) (15 -> 28) (16 -> 29) (17 -> 31) (18 -> 26) (19 -> 58) (20 -> 32) (21 -> 50) (22 -> 48) (23 -> 21) (24 -> 60) (25 -> 38) (26 -> 67) (27 -> 30) (28 -> 57) (29 -> 70) (30 -> 2) (31 -> 18) (32 -> 14) (33 -> 61) (34 -> 33) (35 -> 15) (36 -> 22) (37 -> 13) (38 -> 42) (39 -> 52) (40 -> 9) (41 -> 12) (42 -> 65) (43 -> 47) (44 -> 23) (45 -> 53) (46 -> 55) (47 -> 41) (48 -> 3) (49 -> 68) (50 -> 36) (51 -> 69) (52 -> 51) (53 -> 43) (54 -> 5) (55 -> 27) (56 -> 59) (57 -> 1) (58 -> 49) (59 -> 11) (60 -> 37) (61 -> 7) (62 -> 63) (63 -> 64) (64 -> 56) (65 -> 8) (66 -> 10) (67 -> 24) (68 -> 66) (69 -> 6) (70 -> 54) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 16, 29, 70, 54, 5, 17, 31, 18, 26, 67, 24, 60, 37, 13, 62, 63, 64, 56, 59, 11, 20, 32, 14, 39, 52, 51, 69, 6, 46, 55, 27, 30, 2, 40, 9, 44, 23, 21, 50, 36, 22, 48, 3, 45, 53, 43, 47, 41, 12, 25, 38, 42, 65, 8, 4, 34, 33, 61, 7, 19, 58, 49, 68, 66, 10, 35, 15, 28, 57]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 115.0
> Nombre d'itération nécéssaires : 6
> Nombre de contraintes ajoutées : 5
> Ordre de parcours des drônes : 
1 -> 16 -> 29 -> 70 -> 54 -> 5 -> 17 -> 31 -> 18 -> 26 -> 67 -> 24 -> 60 -> 37 -> 13 -> 62 -> 63 -> 64 -> 56 -> 59 -> 11 -> 20 -> 32 -> 14 -> 39 -> 52 -> 51 -> 69 -> 6 -> 46 -> 55 -> 27 -> 30 -> 2 -> 40 -> 9 -> 44 -> 23 -> 21 -> 50 -> 36 -> 22 -> 48 -> 3 -> 45 -> 53 -> 43 -> 47 -> 41 -> 12 -> 25 -> 38 -> 42 -> 65 -> 8 -> 4 -> 34 -> 33 -> 61 -> 7 -> 19 -> 58 -> 49 -> 68 -> 66 -> 10 -> 35 -> 15 -> 28 -> 57 -> 1. 
