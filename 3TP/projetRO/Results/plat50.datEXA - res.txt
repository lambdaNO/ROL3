Résolution exacte pour plat/plat50.dat points à visiter :
Résolution d'initiale :  
> temps total = 172.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 21) (4 -> 25) (5 -> 7) (6 -> 29) (7 -> 5) (8 -> 40) (9 -> 28) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 45) (17 -> 27) (18 -> 10) (19 -> 14) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 31) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 6) (30 -> 15) (31 -> 23) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 1) (40 -> 8) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 16) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39], [2, 34], [3, 21], [4, 25], [5, 7], [6, 29], [8, 40], [9, 28], [10, 18], [11, 38], [12, 41], [13, 42], [14, 19], [15, 30], [16, 45], [17, 27], [20, 49], [22, 32], [23, 31], [24, 35], [26, 33], [36, 46], [37, 50], [43, 47], [44, 48]]
> Nombre de cycle(s) trouvé(s) : 25
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 39]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,39] + x[39,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 174.0
   Permutations :
(1 -> 6) (2 -> 34) (3 -> 21) (4 -> 25) (5 -> 7) (6 -> 39) (7 -> 5) (8 -> 40) (9 -> 28) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 45) (17 -> 27) (18 -> 10) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 31) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 24) (30 -> 15) (31 -> 23) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 37) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 1) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 16) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 39], [2, 34], [3, 21, 29, 24, 35, 37, 50, 8, 40], [4, 25], [5, 7], [9, 28], [10, 18], [11, 38], [12, 41], [13, 42], [14, 19], [15, 30], [16, 45], [17, 27], [20, 49], [22, 32], [23, 31], [26, 33], [36, 46], [43, 47], [44, 48]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 34]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,34] + x[34,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 181.0
   Permutations :
(1 -> 39) (2 -> 44) (3 -> 21) (4 -> 25) (5 -> 7) (6 -> 1) (7 -> 5) (8 -> 40) (9 -> 28) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 45) (17 -> 27) (18 -> 10) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 31) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 24) (30 -> 15) (31 -> 23) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 37) (36 -> 46) (37 -> 34) (38 -> 11) (39 -> 6) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 16) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 20) (50 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 44, 48, 50, 8, 40, 3, 21, 29, 24, 35, 37, 34], [4, 25], [5, 7], [9, 28], [10, 18], [11, 38], [12, 41], [13, 42], [14, 19], [15, 30], [16, 45], [17, 27], [20, 49], [22, 32], [23, 31], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [4, 25]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,25] + x[25,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 182.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 4) (4 -> 25) (5 -> 7) (6 -> 1) (7 -> 5) (8 -> 40) (9 -> 28) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 42) (14 -> 10) (15 -> 30) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 19) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 23) (32 -> 43) (33 -> 26) (34 -> 37) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 6) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 16) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 37, 50, 8, 40, 3, 4, 25, 19, 14, 10, 18, 31, 23, 45, 16, 22, 32, 43, 47, 48, 44], [5, 7], [9, 28], [11, 38], [12, 41], [13, 42], [15, 30], [17, 27], [20, 49], [21, 29], [24, 35], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [5, 7]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,7] + x[7,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 184.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 4) (4 -> 25) (5 -> 40) (6 -> 1) (7 -> 5) (8 -> 42) (9 -> 28) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 11) (14 -> 10) (15 -> 30) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 19) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 23) (32 -> 43) (33 -> 26) (34 -> 37) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 7) (39 -> 6) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 16) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 37, 50, 8, 42, 13, 11, 38, 7, 5, 40, 3, 4, 25, 19, 14, 10, 18, 31, 23, 45, 16, 22, 32, 43, 47, 48, 44], [9, 28], [12, 41], [15, 30], [17, 27], [20, 49], [21, 29], [24, 35], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [9, 28]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,28] + x[28,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 187.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 4) (4 -> 25) (5 -> 40) (6 -> 1) (7 -> 5) (8 -> 42) (9 -> 24) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 11) (14 -> 10) (15 -> 30) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 19) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 28) (32 -> 43) (33 -> 26) (34 -> 37) (35 -> 16) (36 -> 46) (37 -> 50) (38 -> 7) (39 -> 6) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 8) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 37, 50, 8, 42, 13, 11, 38, 7, 5, 40, 3, 4, 25, 19, 14, 10, 18, 31, 28, 9, 24, 35, 16, 22, 32, 43, 47, 48, 44], [12, 41], [15, 30], [17, 27], [20, 49], [21, 29], [23, 45], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [12, 41]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,41] + x[41,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 187.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 39) (6 -> 29) (7 -> 5) (8 -> 40) (9 -> 28) (10 -> 14) (11 -> 38) (12 -> 30) (13 -> 42) (14 -> 19) (15 -> 16) (16 -> 35) (17 -> 27) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 45) (24 -> 9) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 15) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 34) (38 -> 11) (39 -> 1) (40 -> 8) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 4, 25, 41, 12, 30, 15, 16, 35, 24, 9, 28, 31, 18, 10, 14, 19, 7, 5, 39], [2, 44, 48, 50, 37, 34], [8, 40], [11, 38], [13, 42], [17, 27], [20, 49], [22, 32], [23, 45], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [8, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,40] + x[40,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 188.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 4) (4 -> 25) (5 -> 7) (6 -> 29) (7 -> 38) (8 -> 40) (9 -> 1) (10 -> 18) (11 -> 13) (12 -> 30) (13 -> 42) (14 -> 19) (15 -> 16) (16 -> 45) (17 -> 27) (18 -> 10) (19 -> 14) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 31) (24 -> 35) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 28) (32 -> 22) (33 -> 26) (34 -> 37) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 6) (40 -> 5) (41 -> 12) (42 -> 8) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 48) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6, 29, 21, 3, 4, 25, 41, 12, 30, 15, 16, 45, 23, 31, 28, 9], [2, 34, 37, 50, 48, 44], [5, 7, 38, 11, 13, 42, 8, 40], [10, 18], [14, 19], [17, 27], [20, 49], [22, 32], [24, 35], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [10, 18]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,18] + x[18,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 188.0
   Permutations :
(1 -> 12) (2 -> 44) (3 -> 21) (4 -> 3) (5 -> 40) (6 -> 39) (7 -> 5) (8 -> 50) (9 -> 28) (10 -> 14) (11 -> 38) (12 -> 41) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 35) (17 -> 27) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 29) (22 -> 16) (23 -> 45) (24 -> 9) (25 -> 4) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 6) (30 -> 15) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 34) (38 -> 11) (39 -> 1) (40 -> 8) (41 -> 25) (42 -> 13) (43 -> 32) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 47) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 12, 41, 25, 4, 3, 21, 29, 6, 39], [2, 44, 48, 47, 43, 32, 22, 16, 35, 24, 9, 28, 31, 18, 10, 14, 19, 7, 5, 40, 8, 50, 37, 34], [11, 38], [13, 42], [15, 30], [17, 27], [20, 49], [23, 45], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [11, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,38] + x[38,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 189.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 3) (5 -> 40) (6 -> 39) (7 -> 5) (8 -> 42) (9 -> 24) (10 -> 18) (11 -> 38) (12 -> 41) (13 -> 11) (14 -> 10) (15 -> 30) (16 -> 15) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 19) (26 -> 33) (27 -> 17) (28 -> 9) (29 -> 21) (30 -> 12) (31 -> 28) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 16) (36 -> 46) (37 -> 34) (38 -> 7) (39 -> 1) (40 -> 8) (41 -> 25) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 39], [2, 44, 48, 50, 37, 34], [3, 4], [5, 40, 8, 42, 13, 11, 38, 7], [9, 24, 35, 16, 15, 30, 12, 41, 25, 19, 14, 10, 18, 31, 28], [17, 27], [20, 49], [21, 29], [22, 32], [23, 45], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [3, 4]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,4] + x[4,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 189.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 39) (6 -> 29) (7 -> 38) (8 -> 40) (9 -> 28) (10 -> 14) (11 -> 13) (12 -> 30) (13 -> 42) (14 -> 19) (15 -> 16) (16 -> 35) (17 -> 27) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 45) (24 -> 9) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 15) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 34) (38 -> 11) (39 -> 1) (40 -> 5) (41 -> 12) (42 -> 8) (43 -> 47) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 4, 25, 41, 12, 30, 15, 16, 35, 24, 9, 28, 31, 18, 10, 14, 19, 7, 38, 11, 13, 42, 8, 40, 5, 39], [2, 44, 48, 50, 37, 34], [17, 27], [20, 49], [22, 32], [23, 45], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [17, 27]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,27] + x[27,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 190.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 40) (6 -> 39) (7 -> 38) (8 -> 50) (9 -> 28) (10 -> 14) (11 -> 13) (12 -> 27) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 35) (17 -> 9) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 16) (23 -> 45) (24 -> 29) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 15) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 34) (38 -> 11) (39 -> 1) (40 -> 5) (41 -> 12) (42 -> 8) (43 -> 32) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 47) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 39], [2, 44, 48, 47, 43, 32, 22, 16, 35, 24, 29, 21, 3, 4, 25, 41, 12, 27, 17, 9, 28, 31, 18, 10, 14, 19, 7, 38, 11, 13, 42, 8, 50, 37, 34], [5, 40], [15, 30], [20, 49], [23, 45], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [5, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,40] + x[40,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 192.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 21) (4 -> 3) (5 -> 40) (6 -> 1) (7 -> 5) (8 -> 42) (9 -> 28) (10 -> 14) (11 -> 38) (12 -> 27) (13 -> 11) (14 -> 19) (15 -> 30) (16 -> 22) (17 -> 9) (18 -> 10) (19 -> 25) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 24) (30 -> 15) (31 -> 18) (32 -> 43) (33 -> 26) (34 -> 37) (35 -> 16) (36 -> 46) (37 -> 50) (38 -> 7) (39 -> 6) (40 -> 8) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 37, 50, 41, 12, 27, 17, 9, 28, 31, 18, 10, 14, 19, 25, 4, 3, 21, 29, 24, 35, 16, 22, 32, 43, 47, 48, 44], [5, 40, 8, 42, 13, 11, 38, 7], [15, 30], [20, 49], [23, 45], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [15, 30]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,30] + x[30,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 193.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 40) (6 -> 29) (7 -> 5) (8 -> 50) (9 -> 28) (10 -> 14) (11 -> 38) (12 -> 27) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 16) (23 -> 45) (24 -> 35) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 11) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 34) (38 -> 39) (39 -> 1) (40 -> 8) (41 -> 12) (42 -> 13) (43 -> 32) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 47) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 4, 25, 41, 12, 27, 17, 9, 28, 31, 18, 10, 14, 19, 7, 5, 40, 8, 50, 37, 34, 2, 44, 48, 47, 43, 32, 22, 16, 15, 30, 11, 38, 39], [13, 42], [20, 49], [23, 45], [24, 35], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [13, 42]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,42] + x[42,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 194.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 21) (4 -> 3) (5 -> 7) (6 -> 1) (7 -> 19) (8 -> 40) (9 -> 17) (10 -> 18) (11 -> 13) (12 -> 30) (13 -> 42) (14 -> 10) (15 -> 16) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 49) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 12) (28 -> 9) (29 -> 6) (30 -> 15) (31 -> 28) (32 -> 43) (33 -> 26) (34 -> 37) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 38) (40 -> 5) (41 -> 25) (42 -> 8) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 38, 11, 13, 42, 8, 40, 5, 7, 19, 14, 10, 18, 31, 28, 9, 17, 27, 12, 30, 15, 16, 22, 32, 43, 47, 48, 44, 2, 34, 37, 50, 41, 25, 4, 3, 21, 29, 6], [20, 49], [23, 45], [24, 35], [26, 33], [36, 46]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [20, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,49] + x[49,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 194.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 39) (6 -> 29) (7 -> 38) (8 -> 40) (9 -> 28) (10 -> 14) (11 -> 13) (12 -> 27) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 16) (23 -> 45) (24 -> 35) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 12) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 1) (40 -> 5) (41 -> 20) (42 -> 8) (43 -> 32) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 47) (49 -> 34) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 4, 25, 41, 20, 49, 34, 2, 44, 48, 47, 43, 32, 22, 16, 15, 30, 12, 27, 17, 9, 28, 31, 18, 10, 14, 19, 7, 38, 11, 13, 42, 8, 40, 5, 39], [23, 45], [24, 35], [26, 33], [36, 46], [37, 50]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [23, 45]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,45] + x[45,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 198.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 40) (6 -> 29) (7 -> 5) (8 -> 42) (9 -> 28) (10 -> 14) (11 -> 38) (12 -> 27) (13 -> 11) (14 -> 19) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 45) (24 -> 23) (25 -> 41) (26 -> 33) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 12) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 35) (38 -> 39) (39 -> 1) (40 -> 8) (41 -> 20) (42 -> 13) (43 -> 47) (44 -> 48) (45 -> 16) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 34) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 4, 25, 41, 20, 49, 34, 2, 44, 48, 50, 37, 35, 24, 23, 45, 16, 15, 30, 12, 27, 17, 9, 28, 31, 18, 10, 14, 19, 7, 5, 40, 8, 42, 13, 11, 38, 39], [22, 32], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [22, 32]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,32] + x[32,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 199.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 21) (4 -> 3) (5 -> 40) (6 -> 1) (7 -> 19) (8 -> 42) (9 -> 17) (10 -> 18) (11 -> 38) (12 -> 30) (13 -> 11) (14 -> 10) (15 -> 16) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 14) (20 -> 41) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 35) (25 -> 4) (26 -> 33) (27 -> 12) (28 -> 9) (29 -> 6) (30 -> 15) (31 -> 23) (32 -> 43) (33 -> 26) (34 -> 49) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 7) (39 -> 5) (40 -> 8) (41 -> 25) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 28) (46 -> 36) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 5, 40, 8, 42, 13, 11, 38, 7, 19, 14, 10, 18, 31, 23, 45, 28, 9, 17, 27, 12, 30, 15, 16, 22, 32, 43, 47, 48, 44, 2, 34, 49, 20, 41, 25, 4, 3, 21, 29, 6], [24, 35], [26, 33], [36, 46], [37, 50]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [24, 35]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,35] + x[35,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 200.0
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 4) (4 -> 25) (5 -> 39) (6 -> 22) (7 -> 38) (8 -> 40) (9 -> 17) (10 -> 14) (11 -> 13) (12 -> 30) (13 -> 42) (14 -> 19) (15 -> 16) (16 -> 45) (17 -> 27) (18 -> 10) (19 -> 7) (20 -> 49) (21 -> 3) (22 -> 32) (23 -> 31) (24 -> 29) (25 -> 41) (26 -> 33) (27 -> 12) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 18) (32 -> 28) (33 -> 26) (34 -> 2) (35 -> 24) (36 -> 46) (37 -> 35) (38 -> 11) (39 -> 1) (40 -> 5) (41 -> 20) (42 -> 8) (43 -> 47) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 50) (49 -> 34) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 22, 32, 28, 9, 17, 27, 12, 30, 15, 16, 45, 23, 31, 18, 10, 14, 19, 7, 38, 11, 13, 42, 8, 40, 5, 39], [2, 44, 48, 50, 37, 35, 24, 29, 21, 3, 4, 25, 41, 20, 49, 34], [26, 33], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [26, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,33] + x[33,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 203.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 4) (4 -> 25) (5 -> 7) (6 -> 1) (7 -> 38) (8 -> 40) (9 -> 28) (10 -> 18) (11 -> 13) (12 -> 27) (13 -> 42) (14 -> 19) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 31) (19 -> 14) (20 -> 41) (21 -> 3) (22 -> 16) (23 -> 45) (24 -> 29) (25 -> 26) (26 -> 33) (27 -> 17) (28 -> 32) (29 -> 21) (30 -> 37) (31 -> 23) (32 -> 22) (33 -> 10) (34 -> 49) (35 -> 24) (36 -> 46) (37 -> 35) (38 -> 11) (39 -> 6) (40 -> 5) (41 -> 12) (42 -> 8) (43 -> 47) (44 -> 2) (45 -> 50) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 48) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 49, 20, 41, 12, 27, 17, 9, 28, 32, 22, 16, 15, 30, 37, 35, 24, 29, 21, 3, 4, 25, 26, 33, 10, 18, 31, 23, 45, 50, 48, 44], [5, 7, 38, 11, 13, 42, 8, 40], [14, 19], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [14, 19]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,19] + x[19,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 204.00000000000003
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 21) (4 -> 3) (5 -> 7) (6 -> 1) (7 -> 38) (8 -> 40) (9 -> 28) (10 -> 33) (11 -> 13) (12 -> 27) (13 -> 42) (14 -> 45) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 14) (20 -> 41) (21 -> 29) (22 -> 16) (23 -> 31) (24 -> 35) (25 -> 4) (26 -> 25) (27 -> 17) (28 -> 32) (29 -> 24) (30 -> 37) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 49) (35 -> 19) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 6) (40 -> 5) (41 -> 12) (42 -> 8) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 48) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 49, 20, 41, 12, 27, 17, 9, 28, 32, 22, 16, 15, 30, 37, 50, 48, 44], [3, 21, 29, 24, 35, 19, 14, 45, 23, 31, 18, 10, 33, 26, 25, 4], [5, 7, 38, 11, 13, 42, 8, 40], [36, 46], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [36, 46]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[36,46] + x[46,36] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 206.0
   Permutations :
(1 -> 6) (2 -> 34) (3 -> 21) (4 -> 46) (5 -> 40) (6 -> 39) (7 -> 5) (8 -> 42) (9 -> 28) (10 -> 33) (11 -> 38) (12 -> 27) (13 -> 11) (14 -> 45) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 14) (20 -> 41) (21 -> 29) (22 -> 16) (23 -> 31) (24 -> 35) (25 -> 4) (26 -> 25) (27 -> 17) (28 -> 32) (29 -> 24) (30 -> 37) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 49) (35 -> 19) (36 -> 8) (37 -> 50) (38 -> 7) (39 -> 1) (40 -> 3) (41 -> 12) (42 -> 13) (43 -> 47) (44 -> 2) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 44) (49 -> 20) (50 -> 48) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 39], [2, 34, 49, 20, 41, 12, 27, 17, 9, 28, 32, 22, 16, 15, 30, 37, 50, 48, 44], [3, 21, 29, 24, 35, 19, 14, 45, 23, 31, 18, 10, 33, 26, 25, 4, 46, 36, 8, 42, 13, 11, 38, 7, 5, 40], [43, 47]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [43, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[43,47] + x[47,43] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 206.0
   Permutations :
(1 -> 39) (2 -> 34) (3 -> 40) (4 -> 3) (5 -> 7) (6 -> 1) (7 -> 38) (8 -> 36) (9 -> 17) (10 -> 18) (11 -> 13) (12 -> 30) (13 -> 42) (14 -> 19) (15 -> 16) (16 -> 22) (17 -> 27) (18 -> 31) (19 -> 35) (20 -> 41) (21 -> 29) (22 -> 32) (23 -> 45) (24 -> 23) (25 -> 26) (26 -> 33) (27 -> 12) (28 -> 9) (29 -> 21) (30 -> 15) (31 -> 28) (32 -> 43) (33 -> 10) (34 -> 49) (35 -> 24) (36 -> 46) (37 -> 50) (38 -> 11) (39 -> 6) (40 -> 5) (41 -> 25) (42 -> 8) (43 -> 47) (44 -> 2) (45 -> 14) (46 -> 4) (47 -> 48) (48 -> 44) (49 -> 20) (50 -> 37) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 39, 6], [2, 34, 49, 20, 41, 25, 26, 33, 10, 18, 31, 28, 9, 17, 27, 12, 30, 15, 16, 22, 32, 43, 47, 48, 44], [3, 40, 5, 7, 38, 11, 13, 42, 8, 36, 46, 4], [14, 19, 35, 24, 23, 45], [21, 29], [37, 50]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [21, 29]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,29] + x[29,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 206.99999999999997
   Permutations :
(1 -> 6) (2 -> 44) (3 -> 40) (4 -> 46) (5 -> 7) (6 -> 29) (7 -> 19) (8 -> 42) (9 -> 28) (10 -> 33) (11 -> 38) (12 -> 27) (13 -> 11) (14 -> 45) (15 -> 30) (16 -> 15) (17 -> 9) (18 -> 10) (19 -> 14) (20 -> 49) (21 -> 3) (22 -> 16) (23 -> 24) (24 -> 35) (25 -> 4) (26 -> 25) (27 -> 17) (28 -> 31) (29 -> 21) (30 -> 12) (31 -> 18) (32 -> 22) (33 -> 26) (34 -> 2) (35 -> 37) (36 -> 8) (37 -> 50) (38 -> 39) (39 -> 1) (40 -> 5) (41 -> 20) (42 -> 13) (43 -> 32) (44 -> 48) (45 -> 23) (46 -> 36) (47 -> 43) (48 -> 47) (49 -> 34) (50 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 6, 29, 21, 3, 40, 5, 7, 19, 14, 45, 23, 24, 35, 37, 50, 41, 20, 49, 34, 2, 44, 48, 47, 43, 32, 22, 16, 15, 30, 12, 27, 17, 9, 28, 31, 18, 10, 33, 26, 25, 4, 46, 36, 8, 42, 13, 11, 38, 39]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 206.99999999999997
> Nombre d'itération nécéssaires : 24
> Nombre de contraintes ajoutées : 23
> Ordre de parcours des drônes : 
1 -> 6 -> 29 -> 21 -> 3 -> 40 -> 5 -> 7 -> 19 -> 14 -> 45 -> 23 -> 24 -> 35 -> 37 -> 50 -> 41 -> 20 -> 49 -> 34 -> 2 -> 44 -> 48 -> 47 -> 43 -> 32 -> 22 -> 16 -> 15 -> 30 -> 12 -> 27 -> 17 -> 9 -> 28 -> 31 -> 18 -> 10 -> 33 -> 26 -> 25 -> 4 -> 46 -> 36 -> 8 -> 42 -> 13 -> 11 -> 38 -> 39 -> 1. 
