Résolution exacte pour plat/plat110.dat points à visiter :
Résolution d'initiale :  
> temps total = 126.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 46) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 35) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 102) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 60) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 30) (102 -> 31) (103 -> 86) (104 -> 106) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71], [2, 77], [3, 46, 70, 88, 101, 30, 100, 56, 66, 8, 35], [4, 22], [5, 79], [6, 41], [7, 94], [9, 55], [10, 73], [11, 47], [12, 64], [13, 49], [14, 54], [15, 37], [16, 89], [17, 76], [18, 74], [19, 78], [20, 53], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 109], [28, 45], [29, 92], [31, 102], [32, 51], [33, 81], [34, 75], [36, 44], [39, 108], [40, 63], [42, 84], [48, 65], [50, 110], [52, 60, 58, 67, 91, 59, 90], [57, 98], [61, 105], [62, 85], [68, 99], [69, 83], [72, 107], [80, 93], [82, 96], [86, 103], [104, 106]]
> Nombre de cycle(s) trouvé(s) : 48
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,71] + x[71,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 127.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 20) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 8) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 102) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 58) (53 -> 31) (54 -> 14) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 90) (60 -> 52) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 59) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 86) (104 -> 106) (105 -> 15) (106 -> 104) (107 -> 72) (108 -> 61) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 61, 105, 15, 37, 49, 13, 8, 20, 53, 31, 102], [2, 77], [3, 35], [4, 22], [5, 79], [6, 41], [7, 94], [9, 55], [10, 73], [11, 47], [12, 64], [14, 54], [16, 89], [17, 76], [18, 74], [19, 78], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 109], [28, 45], [29, 92], [30, 100], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [46, 70], [48, 65], [50, 110], [52, 58, 60], [56, 66], [57, 98], [59, 90], [62, 85], [67, 91], [68, 99], [72, 107], [80, 93], [82, 96], [86, 103], [88, 101], [104, 106]]
> Nombre de cycle(s) trouvé(s) : 47

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 77]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,77] + x[77,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 8) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 101) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 69) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 60) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 100) (57 -> 98) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 71) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 88) (102 -> 31) (103 -> 86) (104 -> 106) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 27) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 31, 53, 20, 8, 66, 56, 100, 30, 101, 88, 50, 110, 2, 77, 108, 39, 69, 83, 71], [3, 35], [4, 22], [5, 79], [6, 41], [7, 94], [9, 55], [10, 73], [11, 47], [12, 64], [13, 49], [14, 54], [15, 37], [16, 89], [17, 76], [18, 74], [19, 78], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 109], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [46, 70], [48, 65], [52, 60, 58, 67, 91, 59, 90], [57, 98], [61, 105], [62, 85], [68, 99], [72, 107], [80, 93], [82, 96], [86, 103], [104, 106]]
> Nombre de cycle(s) trouvé(s) : 43

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [3, 35]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,35] + x[35,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 46) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 35) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 98) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 102) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 107) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 60) (59 -> 91) (60 -> 52) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 8) (67 -> 58) (68 -> 103) (69 -> 83) (70 -> 88) (71 -> 101) (72 -> 76) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 59) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 30) (102 -> 1) (103 -> 86) (104 -> 106) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 30, 100, 56, 66, 8, 35, 3, 46, 70, 88, 50, 110, 2, 77, 108, 39, 107, 72, 76, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 102], [4, 22], [5, 79], [6, 41], [7, 94], [9, 55], [10, 73], [11, 47], [12, 64], [13, 49], [14, 54], [15, 37], [16, 89], [18, 74], [19, 78], [20, 53], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [48, 65], [52, 90, 59, 91, 67, 58, 60], [61, 105], [62, 85], [69, 83], [80, 93], [82, 96], [104, 106]]
> Nombre de cycle(s) trouvé(s) : 37

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [4, 22]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,22] + x[22,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 101) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 8) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 69) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 60) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 100) (57 -> 98) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 71) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 3) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 88) (102 -> 31) (103 -> 86) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 27) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 31, 53, 20, 4, 22, 106, 104, 7, 94, 3, 35, 8, 66, 56, 100, 30, 101, 88, 50, 110, 2, 77, 108, 39, 69, 83, 71], [5, 79], [6, 41], [9, 55], [10, 73], [11, 47], [12, 64], [13, 49], [14, 54], [15, 37], [16, 89], [17, 76], [18, 74], [19, 78], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 109], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [46, 70], [48, 65], [52, 60, 58, 67, 91, 59, 90], [57, 98], [61, 105], [62, 85], [68, 99], [72, 107], [80, 93], [82, 96], [86, 103]]
> Nombre de cycle(s) trouvé(s) : 39

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [5, 79]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,79] + x[79,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 94) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 104) (8 -> 35) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 98) (18 -> 74) (19 -> 78) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 88) (51 -> 32) (52 -> 60) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 103) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 30) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 61) (106 -> 79) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 110, 50, 88, 101, 30, 100, 56, 66, 8, 35, 3, 94, 6, 41, 102], [4, 22, 106, 79, 5, 21, 95, 12, 64, 105, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 53, 20], [7, 104], [9, 55], [13, 49], [14, 54], [15, 37], [16, 89], [18, 74], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [46, 70], [48, 65], [52, 60, 58, 67, 91, 59, 90], [62, 85], [72, 107], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [7, 104]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,104] + x[104,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 132.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 35) (4 -> 98) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 101) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 8) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 3) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 58) (53 -> 20) (54 -> 14) (55 -> 9) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 52) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 103) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 5) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 22, 4, 98, 5, 79, 106, 104, 7, 94, 6, 41, 102], [3, 35, 8, 66, 56, 100, 30, 101, 88, 70, 46], [9, 55], [10, 73], [11, 47], [12, 64], [13, 49], [14, 54], [15, 37], [16, 89], [17, 76], [18, 74], [19, 78], [20, 53], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 57], [28, 45], [29, 92], [31, 86], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [48, 65], [50, 110], [52, 58, 60], [59, 90], [61, 105], [62, 85], [67, 91], [68, 103], [72, 107], [80, 93], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 41

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [9, 55]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,55] + x[55,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 42) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 101) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 8) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 69) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 104) (56 -> 100) (57 -> 98) (58 -> 60) (59 -> 91) (60 -> 52) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 71) (84 -> 54) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 59) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 3) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 4) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 31) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 79) (107 -> 72) (108 -> 39) (109 -> 27) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 31, 86, 103, 68, 99, 109, 27, 57, 98, 4, 22, 106, 79, 5, 21, 95, 12, 64, 105, 61, 11, 47, 10, 73, 76, 17, 42, 84, 54, 14, 9, 55, 104, 7, 94, 3, 35, 8, 66, 56, 100, 30, 101, 88, 50, 110, 2, 77, 108, 39, 69, 83, 71], [6, 41], [13, 49], [15, 37], [16, 89], [18, 74], [19, 78], [20, 53], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [46, 70], [48, 65], [52, 90, 59, 91, 67, 58, 60], [62, 85], [72, 107], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [6, 41]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,41] + x[41,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 35) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 98) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 69) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 60) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 101) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 71) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 30) (102 -> 41) (103 -> 68) (104 -> 55) (105 -> 64) (106 -> 22) (107 -> 72) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 55, 9, 14, 54, 12, 95, 21, 5, 79, 106, 22, 4, 20, 53, 31, 86, 103, 68, 101, 30, 100, 56, 66, 8, 35, 3, 46, 70, 88, 50, 110, 2, 77, 108, 39, 69, 83, 71], [10, 47], [11, 61], [13, 49], [15, 37], [16, 89], [17, 98], [18, 74], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [27, 57], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [48, 65], [52, 60, 58, 67, 91, 59, 90], [62, 85], [64, 105], [72, 107], [73, 76], [80, 93], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 31

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [10, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,47] + x[47,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 35) (4 -> 98) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 8) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 60) (53 -> 20) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 103) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 36) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 5) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 39) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 64, 105, 61, 11, 47, 10, 73, 36, 44, 74, 18, 40, 63, 72, 107, 39, 108, 77, 2, 22, 4, 98, 5, 79, 106, 104, 7, 94, 6, 41, 102], [16, 89], [17, 76], [19, 78], [20, 53], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 57], [28, 45], [29, 92], [30, 100], [31, 86], [32, 51], [33, 81], [34, 75], [42, 84], [48, 65], [50, 110], [52, 60, 58, 67, 91, 59, 90], [56, 66], [62, 85], [68, 103], [69, 83], [80, 93], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [16, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[16,89] + x[89,16] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 46) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 35) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 54) (13 -> 49) (14 -> 9) (15 -> 37) (16 -> 67) (17 -> 98) (18 -> 74) (19 -> 78) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 61) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 104) (56 -> 66) (57 -> 27) (58 -> 60) (59 -> 91) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 107) (68 -> 103) (69 -> 83) (70 -> 88) (71 -> 101) (72 -> 63) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 50) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 30) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 64) (106 -> 79) (107 -> 72) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 30, 100, 56, 66, 8, 35, 3, 46, 70, 88, 50, 110, 2, 77, 108, 39, 89, 16, 67, 107, 72, 63, 40, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 53, 20, 4, 22, 106, 79, 5, 21, 95, 12, 54, 14, 9, 55, 104, 7, 94, 6, 41, 102], [13, 49], [15, 37], [18, 74], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [42, 84], [48, 65], [52, 90], [58, 60], [59, 91], [62, 85], [64, 105], [69, 83], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [13, 49]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,49] + x[49,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 89) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 67) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 91) (60 -> 35) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 12) (65 -> 48) (66 -> 8) (67 -> 58) (68 -> 99) (69 -> 39) (70 -> 88) (71 -> 83) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 30) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 105, 64, 12, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [3, 46, 70, 88, 101, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 89, 16, 67, 58, 60, 35], [14, 54], [18, 74], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [48, 65], [50, 110], [52, 90], [59, 91], [62, 85], [72, 107], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [14, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,54] + x[54,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 67) (17 -> 98) (18 -> 74) (19 -> 78) (20 -> 4) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 8) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 60) (59 -> 91) (60 -> 95) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 103) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 86) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 64, 105, 61, 11, 47, 10, 73, 76, 17, 98, 86, 31, 53, 20, 4, 22, 2, 77, 108, 39, 89, 16, 67, 58, 60, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [18, 74], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [27, 57], [28, 45], [29, 92], [30, 100], [32, 51], [33, 81], [34, 75], [36, 44], [40, 63], [42, 84], [48, 65], [50, 110], [52, 90], [56, 66], [59, 91], [62, 85], [68, 103], [69, 83], [72, 107], [80, 93], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 29

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [18, 74]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[18,74] + x[74,18] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 102) (2 -> 22) (3 -> 46) (4 -> 20) (5 -> 21) (6 -> 94) (7 -> 104) (8 -> 35) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 54) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 67) (17 -> 76) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 36) (35 -> 3) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 75) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 90) (60 -> 58) (61 -> 108) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 68) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 39) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 79, 5, 21, 95, 12, 54, 14, 9, 55, 15, 37, 49, 13, 8, 35, 3, 46, 70, 88, 101, 71], [2, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 108, 77], [16, 67, 91, 59, 90, 52, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 39, 89], [19, 78], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [30, 100], [32, 51], [33, 81], [42, 84], [48, 65], [50, 110], [56, 66], [58, 60], [62, 85], [64, 105], [69, 83], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [19, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,78] + x[78,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 35) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 40) (19 -> 30) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 91) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 16) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 36) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 70) (89 -> 39) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 5) (99 -> 109) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 80) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 60, 58, 67, 16, 89, 39, 108, 77, 2, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 5, 79, 106, 104, 7, 94, 6, 41, 102], [8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 64, 105, 61, 11, 47, 10, 73, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66], [17, 76], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [34, 75], [42, 84], [48, 65], [50, 110], [52, 90], [59, 91], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [17, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,76] + x[76,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 35) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 64) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 36) (35 -> 60) (36 -> 34) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 75) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 44) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 16) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 70) (89 -> 39) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 5) (99 -> 109) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 80) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 60, 58, 67, 91, 59, 90, 52, 75, 16, 89, 39, 108, 77, 2, 22, 4, 20, 53, 31, 86, 103, 68, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 64, 105, 61, 11, 47, 10, 73, 76, 17, 98, 5, 79, 106, 104, 7, 94, 6, 41, 102], [21, 95], [23, 97], [24, 38], [25, 87], [26, 43], [27, 57], [28, 45], [29, 92], [32, 51], [33, 81], [34, 36], [42, 84], [48, 65], [50, 110], [62, 85], [69, 83], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [21, 95]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,95] + x[95,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 107) (40 -> 61) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 75) (53 -> 20) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 16) (68 -> 103) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 63) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 91) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 80) (108 -> 39) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 60, 58, 67, 16, 89, 91, 59, 90, 52, 75, 34, 36, 44, 74, 18, 40, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 53, 20, 4, 22, 2, 77, 108, 39, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [23, 97], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [42, 84], [48, 65], [50, 110], [62, 85], [63, 72], [64, 105], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [23, 97]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,97] + x[97,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 54) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 76) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 38) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 95) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 108) (78 -> 93) (79 -> 106) (80 -> 50) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 22) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 72) (108 -> 39) (109 -> 27) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 60, 58, 67, 91, 59, 23, 97, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 105, 64, 12, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 50, 110, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [24, 38], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [33, 81], [42, 84], [48, 65], [52, 90], [62, 85], [69, 83], [72, 107], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [24, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,38] + x[38,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 91) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 67) (17 -> 76) (18 -> 40) (19 -> 30) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 75) (34 -> 36) (35 -> 3) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 23) (60 -> 35) (61 -> 108) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 58) (68 -> 99) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 101) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 80) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 89, 16, 67, 58, 60, 35, 3, 91, 59, 23, 97, 38, 24, 81, 33, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [2, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 108, 77], [25, 87], [26, 43], [28, 45], [29, 92], [32, 51], [42, 84], [46, 70], [48, 65], [50, 110], [52, 90], [62, 85], [64, 105], [82, 96], [88, 101]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [25, 87]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,87] + x[87,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 143.0
   Permutations :
(1 -> 102) (2 -> 110) (3 -> 46) (4 -> 22) (5 -> 21) (6 -> 94) (7 -> 104) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 30) (20 -> 4) (21 -> 95) (22 -> 97) (23 -> 59) (24 -> 81) (25 -> 87) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 58) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 25) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 23) (60 -> 35) (61 -> 40) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 78) (94 -> 7) (95 -> 63) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 71) (102 -> 41) (103 -> 86) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 80) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 79, 5, 21, 95, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 92, 29, 58, 60, 35, 3, 46, 70, 88, 101, 71], [2, 110, 50, 25, 87, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77], [4, 22, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20], [23, 59], [26, 43], [28, 45], [32, 51], [42, 84], [48, 65], [52, 90], [62, 85], [64, 105], [67, 91], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [23, 59]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,59] + x[59,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 143.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 54) (13 -> 49) (14 -> 9) (15 -> 105) (16 -> 75) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 50) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 61) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 104) (56 -> 66) (57 -> 27) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 12) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 87) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 63) (96 -> 82) (97 -> 38) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 64) (106 -> 79) (107 -> 80) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 3, 35, 60, 58, 67, 91, 59, 23, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20, 4, 22, 106, 79, 5, 21, 95, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 105, 64, 12, 54, 14, 9, 55, 104, 7, 94, 6, 41, 102], [2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 87, 25, 50, 110], [26, 43], [28, 45], [29, 92], [32, 51], [42, 84], [48, 65], [52, 90], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [26, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,43] + x[43,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 144.0
   Permutations :
(1 -> 102) (2 -> 110) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 30) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 15) (38 -> 97) (39 -> 107) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 43) (50 -> 80) (51 -> 32) (52 -> 58) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 108) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 78) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 55) (105 -> 64) (106 -> 22) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 55, 9, 14, 54, 12, 95, 21, 5, 79, 106, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35, 3, 46, 70, 88, 101, 71], [2, 110, 50, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 43, 26, 25, 87, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 108, 77], [15, 37], [16, 89, 39, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75], [28, 45], [29, 92], [32, 51], [42, 84], [48, 65], [62, 85], [64, 105], [67, 91], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [15, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,37] + x[37,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 145.0
   Permutations :
(1 -> 102) (2 -> 110) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 30) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 45) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 15) (38 -> 97) (39 -> 107) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 80) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 12) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 60) (59 -> 91) (60 -> 35) (61 -> 108) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 8) (67 -> 58) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 43) (80 -> 93) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 78) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 56) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 22) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 91, 67, 58, 60, 35, 3, 46, 70, 88, 101, 71], [2, 110, 50, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 12, 95, 21, 5, 79, 43, 26, 25, 87, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 108, 77], [16, 89, 39, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75], [28, 45], [29, 92], [32, 51], [42, 84], [48, 65], [52, 90], [62, 85], [64, 105], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [28, 45]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,45] + x[45,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 102) (2 -> 22) (3 -> 94) (4 -> 20) (5 -> 21) (6 -> 43) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 54) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 49) (38 -> 97) (39 -> 69) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 58) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 108) (62 -> 45) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 85) (79 -> 5) (80 -> 93) (81 -> 24) (82 -> 96) (83 -> 71) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 12) (93 -> 80) (94 -> 7) (95 -> 63) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 43, 26, 25, 87, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 108, 77, 2, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35, 3, 94, 7, 104, 106, 79, 5, 21, 95, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 69, 83, 71], [8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 54, 14, 9, 55, 15, 37, 49, 13], [32, 51], [42, 84], [46, 70], [48, 65], [50, 110], [64, 105], [67, 91], [72, 107], [80, 93], [82, 96], [88, 101]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [32, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[32,51] + x[51,32] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 102) (2 -> 22) (3 -> 94) (4 -> 20) (5 -> 21) (6 -> 43) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 45) (29 -> 28) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 49) (38 -> 97) (39 -> 108) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 46) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 54) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 91) (60 -> 35) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 32) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 103) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 93) (79 -> 5) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 98) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 43, 26, 25, 87, 68, 103, 33, 81, 24, 38, 97, 23, 59, 91, 67, 58, 60, 35, 3, 94, 7, 104, 106, 79, 5, 21, 95, 12, 92, 29, 28, 45, 46, 70, 88, 101, 71], [2, 22, 4, 20, 53, 31, 86, 98, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77], [27, 57], [42, 84], [48, 65], [50, 110], [52, 90], [62, 85], [69, 83], [82, 96], [99, 109]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [27, 57]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,57] + x[57,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 146.0
   Permutations :
(1 -> 102) (2 -> 22) (3 -> 94) (4 -> 20) (5 -> 21) (6 -> 43) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 45) (29 -> 28) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 49) (38 -> 97) (39 -> 108) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 46) (46 -> 70) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 110) (51 -> 54) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 60) (59 -> 91) (60 -> 35) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 32) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 93) (79 -> 5) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 68) (88 -> 101) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 43, 26, 25, 87, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77, 2, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 91, 67, 58, 60, 35, 3, 94, 7, 104, 106, 79, 5, 21, 95, 12, 92, 29, 28, 45, 46, 70, 88, 101, 71], [42, 84], [48, 65], [50, 110], [52, 90], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [42, 84]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[42,84] + x[84,42] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 75) (17 -> 76) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 109) (28 -> 29) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 17) (43 -> 6) (44 -> 74) (45 -> 28) (46 -> 45) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 72) (64 -> 32) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 12) (93 -> 78) (94 -> 3) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 80) (108 -> 39) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 45, 28, 29, 92, 12, 95, 21, 5, 79, 106, 104, 7, 94, 3, 35, 60, 58, 67, 91, 59, 23, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20, 4, 22, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 87, 25, 26, 43, 6, 41, 102], [27, 109], [48, 65], [50, 110], [52, 90], [57, 98], [62, 85], [68, 99], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [27, 109]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,109] + x[109,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 75) (17 -> 76) (18 -> 40) (19 -> 30) (20 -> 53) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 100) (31 -> 86) (32 -> 51) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 17) (43 -> 6) (44 -> 74) (45 -> 28) (46 -> 45) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 72) (64 -> 32) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 12) (93 -> 78) (94 -> 3) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 4) (99 -> 109) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 80) (108 -> 39) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 45, 28, 29, 92, 12, 95, 21, 5, 79, 106, 104, 7, 94, 3, 35, 60, 58, 67, 91, 59, 23, 97, 38, 24, 81, 33, 103, 68, 99, 109, 27, 57, 98, 4, 22, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 87, 25, 26, 43, 6, 41, 102], [20, 53], [31, 86], [48, 65], [50, 110], [52, 90], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [20, 53]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,53] + x[53,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 75) (17 -> 76) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 17) (43 -> 6) (44 -> 74) (45 -> 28) (46 -> 45) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 110) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 85) (63 -> 72) (64 -> 32) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 52) (91 -> 59) (92 -> 12) (93 -> 78) (94 -> 3) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 86) (99 -> 109) (100 -> 56) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 80) (108 -> 39) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 70, 46, 45, 28, 29, 92, 12, 95, 21, 5, 79, 106, 104, 7, 94, 3, 35, 60, 58, 67, 91, 59, 23, 97, 38, 24, 81, 33, 103, 68, 99, 109, 27, 57, 98, 86, 31, 53, 20, 4, 22, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 87, 25, 26, 43, 6, 41, 102], [48, 65], [50, 110], [52, 90], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [48, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[48,65] + x[65,48] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 35) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 95) (13 -> 8) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 3) (34 -> 75) (35 -> 60) (36 -> 34) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 18) (41 -> 102) (42 -> 93) (43 -> 49) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 11) (48 -> 13) (49 -> 37) (50 -> 110) (51 -> 87) (52 -> 90) (53 -> 31) (54 -> 84) (55 -> 9) (56 -> 100) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 45) (63 -> 40) (64 -> 32) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 85) (79 -> 106) (80 -> 107) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 65) (89 -> 39) (90 -> 52) (91 -> 59) (92 -> 12) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 88) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 88, 65, 48, 13, 8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 102], [2, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 87, 25, 26, 43, 49, 37, 15, 55, 9, 14, 54, 84, 42, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77], [3, 35, 60, 58, 67, 91, 59, 23, 97, 38, 24, 81, 33], [46, 70], [50, 110], [52, 90], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [46, 70]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[46,70] + x[70,46] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 98) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 64) (33 -> 81) (34 -> 36) (35 -> 3) (36 -> 44) (37 -> 49) (38 -> 97) (39 -> 89) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 50) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 91) (60 -> 35) (61 -> 11) (62 -> 45) (63 -> 72) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 101) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 85) (79 -> 43) (80 -> 93) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 103) (87 -> 51) (88 -> 65) (89 -> 16) (90 -> 52) (91 -> 67) (92 -> 12) (93 -> 42) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 61) (106 -> 22) (107 -> 80) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 91, 67, 58, 60, 35, 3, 46, 70, 88, 65, 48, 50, 110, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 105, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 101, 71], [52, 90], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [52, 90]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[52,90] + x[90,52] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 71) (2 -> 22) (3 -> 94) (4 -> 20) (5 -> 21) (6 -> 41) (7 -> 104) (8 -> 66) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 76) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 26) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 15) (38 -> 97) (39 -> 108) (40 -> 18) (41 -> 102) (42 -> 17) (43 -> 6) (44 -> 36) (45 -> 46) (46 -> 70) (47 -> 11) (48 -> 13) (49 -> 37) (50 -> 110) (51 -> 87) (52 -> 58) (53 -> 31) (54 -> 84) (55 -> 9) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 105) (62 -> 85) (63 -> 40) (64 -> 32) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 103) (69 -> 83) (70 -> 88) (71 -> 101) (72 -> 63) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 93) (79 -> 5) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 98) (87 -> 25) (88 -> 65) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 7) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 30) (102 -> 1) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 79) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 30, 19, 78, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77, 2, 22, 4, 20, 53, 31, 86, 98, 57, 27, 109, 99, 68, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35, 3, 94, 7, 104, 106, 79, 5, 21, 95, 12, 92, 29, 28, 45, 46, 70, 88, 65, 48, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 76, 73, 10, 47, 11, 61, 105, 64, 32, 51, 87, 25, 26, 43, 6, 41, 102], [8, 66], [50, 110], [56, 100], [62, 85], [67, 91], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [8, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,66] + x[66,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 48) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 42) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 5) (22 -> 2) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 29) (29 -> 92) (30 -> 100) (31 -> 53) (32 -> 64) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 3) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 45) (47 -> 10) (48 -> 65) (49 -> 43) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 15) (56 -> 66) (57 -> 27) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 105) (65 -> 88) (66 -> 8) (67 -> 91) (68 -> 101) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 98) (87 -> 51) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 67) (92 -> 12) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 71) (102 -> 31) (103 -> 86) (104 -> 7) (105 -> 61) (106 -> 104) (107 -> 80) (108 -> 39) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 31, 53, 20, 4, 22, 2, 77, 108, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 48, 65, 88, 70, 46, 45, 28, 29, 92, 12, 95, 21, 5, 79, 106, 104, 7, 94, 6, 41, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 86, 98, 57, 27, 109, 99, 68, 101, 71], [9, 55, 15, 37, 49, 43, 26, 25, 87, 51, 32, 64, 105, 61, 11, 47, 10, 73, 76, 17, 42, 84, 54, 14], [50, 110], [62, 85], [67, 91], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [50, 110]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[50,110] + x[110,50] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 102) (2 -> 110) (3 -> 41) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 42) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 64) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 49) (38 -> 97) (39 -> 108) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 45) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 48) (51 -> 32) (52 -> 58) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 105) (65 -> 88) (66 -> 56) (67 -> 91) (68 -> 103) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 63) (73 -> 76) (74 -> 44) (75 -> 16) (76 -> 17) (77 -> 2) (78 -> 93) (79 -> 43) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 98) (87 -> 51) (88 -> 70) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 12) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 71) (102 -> 1) (103 -> 33) (104 -> 106) (105 -> 61) (106 -> 22) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102], [2, 110, 50, 48, 65, 88, 70, 46, 45, 28, 29, 92, 12, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 105, 61, 11, 47, 10, 73, 76, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 39, 108, 77], [3, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 98, 57, 27, 109, 99, 68, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35], [62, 85], [67, 91], [69, 83], [71, 101], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [1, 102]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,102] + x[102,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 42) (18 -> 74) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 64) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 49) (38 -> 97) (39 -> 107) (40 -> 18) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 36) (45 -> 28) (46 -> 70) (47 -> 10) (48 -> 50) (49 -> 13) (50 -> 110) (51 -> 32) (52 -> 58) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 11) (62 -> 45) (63 -> 40) (64 -> 105) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 103) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 76) (74 -> 44) (75 -> 16) (76 -> 17) (77 -> 108) (78 -> 85) (79 -> 43) (80 -> 93) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 98) (87 -> 51) (88 -> 65) (89 -> 39) (90 -> 52) (91 -> 67) (92 -> 12) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 101) (106 -> 22) (107 -> 72) (108 -> 61) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 98, 57, 27, 109, 99, 68, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35, 3, 46, 70, 88, 65, 48, 50, 110, 2, 77, 108, 61, 11, 47, 10, 73, 76, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 105, 101, 71], [16, 89, 39, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75], [67, 91], [69, 83], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [67, 91]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[67,91] + x[91,67] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 149.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 67) (17 -> 42) (18 -> 40) (19 -> 78) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 28) (30 -> 19) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 75) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 79) (44 -> 74) (45 -> 46) (46 -> 70) (47 -> 10) (48 -> 50) (49 -> 13) (50 -> 110) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 32) (65 -> 48) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 88) (71 -> 101) (72 -> 76) (73 -> 36) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 93) (79 -> 5) (80 -> 107) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 65) (89 -> 16) (90 -> 59) (91 -> 3) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 12) (96 -> 82) (97 -> 38) (98 -> 86) (99 -> 109) (100 -> 30) (101 -> 105) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 39) (108 -> 61) (109 -> 27) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 105, 64, 32, 51, 87, 25, 26, 43, 79, 5, 21, 95, 12, 92, 29, 28, 45, 46, 70, 88, 65, 48, 50, 110, 2, 77, 108, 61, 11, 47, 10, 73, 36, 44, 74, 18, 40, 63, 72, 76, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 107, 39, 89, 16, 67, 91, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 68, 99, 109, 27, 57, 98, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [34, 75], [62, 85], [69, 83], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [34, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,75] + x[75,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 149.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 75) (17 -> 76) (18 -> 74) (19 -> 30) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 45) (29 -> 28) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 34) (37 -> 15) (38 -> 24) (39 -> 108) (40 -> 18) (41 -> 102) (42 -> 17) (43 -> 79) (44 -> 32) (45 -> 62) (46 -> 3) (47 -> 11) (48 -> 65) (49 -> 37) (50 -> 48) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 58) (61 -> 40) (62 -> 85) (63 -> 72) (64 -> 12) (65 -> 88) (66 -> 8) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 101) (72 -> 107) (73 -> 10) (74 -> 44) (75 -> 52) (76 -> 73) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 78) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 89) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 63) (96 -> 82) (97 -> 38) (98 -> 86) (99 -> 109) (100 -> 56) (101 -> 105) (102 -> 1) (103 -> 68) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 39) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 101, 105, 64, 12, 92, 29, 28, 45, 62, 85, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 76, 73, 10, 47, 11, 61, 40, 18, 74, 44, 32, 51, 87, 25, 26, 43, 79, 5, 21, 95, 63, 72, 107, 39, 108, 77, 2, 110, 50, 48, 65, 88, 70, 46, 3, 35, 60, 58, 67, 91, 89, 16, 75, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 68, 99, 109, 27, 57, 98, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [34, 36], [69, 83], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [34, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[34,36] + x[36,34] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 149.0
   Permutations :
(1 -> 102) (2 -> 110) (3 -> 35) (4 -> 20) (5 -> 79) (6 -> 94) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 95) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 67) (17 -> 42) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 86) (32 -> 64) (33 -> 75) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 108) (40 -> 63) (41 -> 6) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 13) (50 -> 48) (51 -> 32) (52 -> 90) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 45) (63 -> 72) (64 -> 105) (65 -> 88) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 83) (70 -> 46) (71 -> 1) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 61) (77 -> 2) (78 -> 85) (79 -> 43) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 103) (87 -> 51) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 89) (92 -> 12) (93 -> 80) (94 -> 7) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 71) (102 -> 41) (103 -> 68) (104 -> 106) (105 -> 101) (106 -> 22) (107 -> 39) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 103, 68, 99, 109, 27, 57, 98, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 105, 101, 71], [2, 110, 50, 48, 65, 88, 70, 46, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 75, 34, 36, 44, 74, 18, 40, 63, 72, 107, 39, 108, 77], [10, 73, 76, 61, 11, 47], [16, 67, 91, 89], [69, 83], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [69, 83]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[69,83] + x[83,69] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 102) (2 -> 77) (3 -> 91) (4 -> 20) (5 -> 21) (6 -> 94) (7 -> 104) (8 -> 66) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 98) (18 -> 40) (19 -> 78) (20 -> 53) (21 -> 95) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 26) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 19) (31 -> 86) (32 -> 51) (33 -> 81) (34 -> 36) (35 -> 3) (36 -> 44) (37 -> 49) (38 -> 97) (39 -> 69) (40 -> 61) (41 -> 6) (42 -> 84) (43 -> 79) (44 -> 74) (45 -> 46) (46 -> 70) (47 -> 10) (48 -> 50) (49 -> 13) (50 -> 110) (51 -> 87) (52 -> 60) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 27) (58 -> 67) (59 -> 90) (60 -> 35) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 32) (65 -> 48) (66 -> 56) (67 -> 58) (68 -> 101) (69 -> 83) (70 -> 88) (71 -> 1) (72 -> 63) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 108) (78 -> 93) (79 -> 5) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 71) (84 -> 54) (85 -> 62) (86 -> 103) (87 -> 25) (88 -> 65) (89 -> 16) (90 -> 52) (91 -> 89) (92 -> 29) (93 -> 42) (94 -> 7) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 30) (101 -> 105) (102 -> 41) (103 -> 33) (104 -> 106) (105 -> 64) (106 -> 22) (107 -> 80) (108 -> 39) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 102, 41, 6, 94, 7, 104, 106, 22, 4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 60, 35, 3, 91, 89, 16, 75, 34, 36, 44, 74, 18, 40, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 101, 105, 64, 32, 51, 87, 25, 26, 43, 79, 5, 21, 95, 12, 92, 29, 28, 45, 46, 70, 88, 65, 48, 50, 110, 2, 77, 108, 39, 69, 83, 71], [8, 66, 56, 100, 30, 19, 78, 93, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13], [58, 67], [62, 85], [63, 72], [80, 107], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [58, 67]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[58,67] + x[67,58] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 64) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 42) (18 -> 74) (19 -> 78) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 26) (26 -> 43) (27 -> 57) (28 -> 29) (29 -> 92) (30 -> 19) (31 -> 53) (32 -> 51) (33 -> 103) (34 -> 75) (35 -> 60) (36 -> 34) (37 -> 49) (38 -> 24) (39 -> 108) (40 -> 18) (41 -> 102) (42 -> 84) (43 -> 79) (44 -> 36) (45 -> 28) (46 -> 3) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 48) (51 -> 87) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 105) (62 -> 45) (63 -> 40) (64 -> 32) (65 -> 88) (66 -> 56) (67 -> 107) (68 -> 99) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 76) (73 -> 10) (74 -> 44) (75 -> 16) (76 -> 73) (77 -> 2) (78 -> 85) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 31) (87 -> 25) (88 -> 70) (89 -> 91) (90 -> 59) (91 -> 67) (92 -> 12) (93 -> 80) (94 -> 6) (95 -> 63) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 68) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 101) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 110, 50, 48, 65, 88, 70, 46, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [5, 21, 95, 63, 40, 18, 74, 44, 36, 34, 75, 16, 89, 91, 67, 107, 72, 76, 73, 10, 47, 11, 61, 105, 101, 68, 99, 109, 27, 57, 98, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 85, 62, 45, 28, 29, 92, 12, 64, 32, 51, 87, 25, 26, 43, 79], [80, 93], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [80, 93]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[80,93] + x[93,80] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 66) (9 -> 55) (10 -> 47) (11 -> 61) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 42) (18 -> 40) (19 -> 78) (20 -> 4) (21 -> 5) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 25) (27 -> 57) (28 -> 29) (29 -> 58) (30 -> 19) (31 -> 53) (32 -> 64) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 28) (46 -> 45) (47 -> 11) (48 -> 65) (49 -> 13) (50 -> 48) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 15) (56 -> 100) (57 -> 98) (58 -> 67) (59 -> 23) (60 -> 52) (61 -> 108) (62 -> 85) (63 -> 95) (64 -> 105) (65 -> 88) (66 -> 56) (67 -> 91) (68 -> 99) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 76) (73 -> 10) (74 -> 18) (75 -> 34) (76 -> 73) (77 -> 2) (78 -> 93) (79 -> 43) (80 -> 107) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 54) (85 -> 62) (86 -> 31) (87 -> 51) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 3) (92 -> 12) (93 -> 80) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 17) (99 -> 109) (100 -> 30) (101 -> 68) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 101) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 27) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 89, 16, 75, 34, 36, 44, 74, 18, 40, 63, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 105, 101, 68, 99, 109, 27, 57, 98, 17, 42, 84, 54, 14, 9, 55, 15, 37, 49, 13, 8, 66, 56, 100, 30, 19, 78, 93, 80, 107, 72, 76, 73, 10, 47, 11, 61, 108, 77, 2, 110, 50, 48, 65, 88, 70, 46, 45, 28, 29, 58, 67, 91, 3, 35, 60, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [12, 92], [62, 85], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [12, 92]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,92] + x[92,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 71) (2 -> 77) (3 -> 35) (4 -> 22) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 67) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 5) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 100) (31 -> 53) (32 -> 64) (33 -> 75) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 15) (38 -> 24) (39 -> 89) (40 -> 63) (41 -> 102) (42 -> 17) (43 -> 26) (44 -> 74) (45 -> 46) (46 -> 70) (47 -> 10) (48 -> 50) (49 -> 37) (50 -> 110) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 95) (64 -> 12) (65 -> 48) (66 -> 8) (67 -> 91) (68 -> 103) (69 -> 39) (70 -> 88) (71 -> 83) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 72) (77 -> 108) (78 -> 19) (79 -> 43) (80 -> 93) (81 -> 33) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 62) (86 -> 31) (87 -> 51) (88 -> 65) (89 -> 16) (90 -> 59) (91 -> 3) (92 -> 29) (93 -> 78) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 38) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 105) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 101) (106 -> 104) (107 -> 80) (108 -> 61) (109 -> 99) (110 -> 2) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 89, 16, 67, 91, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 75, 34, 36, 44, 74, 18, 40, 63, 95, 21, 5, 79, 43, 26, 25, 87, 51, 32, 64, 12, 92, 29, 28, 45, 46, 70, 88, 65, 48, 50, 110, 2, 77, 108, 61, 11, 47, 10, 73, 76, 72, 107, 80, 93, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [62, 85], [82, 96], [101, 105]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [62, 85]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[62,85] + x[85,62] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 46) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 14) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 49) (14 -> 54) (15 -> 55) (16 -> 89) (17 -> 98) (18 -> 74) (19 -> 30) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 59) (24 -> 38) (25 -> 26) (26 -> 43) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 100) (31 -> 53) (32 -> 51) (33 -> 81) (34 -> 75) (35 -> 3) (36 -> 34) (37 -> 15) (38 -> 97) (39 -> 108) (40 -> 18) (41 -> 102) (42 -> 93) (43 -> 79) (44 -> 36) (45 -> 62) (46 -> 70) (47 -> 10) (48 -> 65) (49 -> 37) (50 -> 48) (51 -> 87) (52 -> 58) (53 -> 20) (54 -> 84) (55 -> 9) (56 -> 66) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 35) (61 -> 11) (62 -> 85) (63 -> 40) (64 -> 32) (65 -> 61) (66 -> 8) (67 -> 16) (68 -> 103) (69 -> 39) (70 -> 88) (71 -> 83) (72 -> 63) (73 -> 76) (74 -> 44) (75 -> 33) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 107) (81 -> 24) (82 -> 96) (83 -> 69) (84 -> 42) (85 -> 78) (86 -> 31) (87 -> 25) (88 -> 101) (89 -> 91) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 80) (94 -> 6) (95 -> 12) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 105) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 64) (106 -> 104) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 110, 50, 48, 65, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 103, 86, 31, 53, 20, 4, 22, 106, 104, 7, 94, 6, 41, 102], [3, 46, 70, 88, 101, 105, 64, 32, 51, 87, 25, 26, 43, 79, 5, 21, 95, 12, 92, 29, 28, 45, 62, 85, 78, 19, 30, 100, 56, 66, 8, 13, 49, 37, 15, 55, 9, 14, 54, 84, 42, 93, 80, 107, 72, 63, 40, 18, 74, 44, 36, 34, 75, 33, 81, 24, 38, 97, 23, 59, 90, 52, 58, 60, 35], [16, 89, 91, 67], [82, 96]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [82, 96]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[82,96] + x[96,82] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 152.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 46) (4 -> 20) (5 -> 79) (6 -> 41) (7 -> 94) (8 -> 35) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 8) (14 -> 9) (15 -> 37) (16 -> 89) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 53) (21 -> 5) (22 -> 4) (23 -> 59) (24 -> 38) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 100) (31 -> 86) (32 -> 64) (33 -> 81) (34 -> 36) (35 -> 3) (36 -> 44) (37 -> 49) (38 -> 97) (39 -> 108) (40 -> 63) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 62) (46 -> 70) (47 -> 10) (48 -> 13) (49 -> 43) (50 -> 80) (51 -> 32) (52 -> 75) (53 -> 31) (54 -> 14) (55 -> 15) (56 -> 66) (57 -> 27) (58 -> 60) (59 -> 90) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 95) (64 -> 12) (65 -> 48) (66 -> 56) (67 -> 16) (68 -> 101) (69 -> 39) (70 -> 88) (71 -> 83) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 106) (80 -> 93) (81 -> 24) (82 -> 104) (83 -> 69) (84 -> 54) (85 -> 78) (86 -> 103) (87 -> 51) (88 -> 65) (89 -> 91) (90 -> 52) (91 -> 67) (92 -> 29) (93 -> 42) (94 -> 6) (95 -> 21) (96 -> 82) (97 -> 23) (98 -> 57) (99 -> 68) (100 -> 96) (101 -> 105) (102 -> 1) (103 -> 33) (104 -> 7) (105 -> 61) (106 -> 22) (107 -> 72) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 110, 50, 80, 93, 42, 84, 54, 14, 9, 55, 15, 37, 49, 43, 26, 25, 87, 51, 32, 64, 12, 92, 29, 28, 45, 62, 85, 78, 19, 30, 100, 96, 82, 104, 7, 94, 6, 41, 102], [3, 46, 70, 88, 65, 48, 13, 8, 35], [4, 20, 53, 31, 86, 103, 33, 81, 24, 38, 97, 23, 59, 90, 52, 75, 34, 36, 44, 74, 18, 40, 63, 95, 21, 5, 79, 106, 22], [10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 101, 105, 61, 11, 47], [16, 89, 91, 67], [56, 66], [58, 60], [72, 107]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [56, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[56,66] + x[66,56] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 152.0
   Permutations :
(1 -> 71) (2 -> 110) (3 -> 35) (4 -> 22) (5 -> 21) (6 -> 41) (7 -> 94) (8 -> 13) (9 -> 55) (10 -> 73) (11 -> 47) (12 -> 92) (13 -> 48) (14 -> 9) (15 -> 37) (16 -> 75) (17 -> 98) (18 -> 40) (19 -> 30) (20 -> 4) (21 -> 95) (22 -> 106) (23 -> 97) (24 -> 81) (25 -> 87) (26 -> 25) (27 -> 109) (28 -> 45) (29 -> 28) (30 -> 100) (31 -> 53) (32 -> 64) (33 -> 103) (34 -> 36) (35 -> 60) (36 -> 44) (37 -> 49) (38 -> 24) (39 -> 108) (40 -> 61) (41 -> 102) (42 -> 84) (43 -> 26) (44 -> 74) (45 -> 62) (46 -> 3) (47 -> 10) (48 -> 65) (49 -> 43) (50 -> 80) (51 -> 32) (52 -> 90) (53 -> 20) (54 -> 14) (55 -> 15) (56 -> 66) (57 -> 27) (58 -> 52) (59 -> 23) (60 -> 58) (61 -> 11) (62 -> 85) (63 -> 72) (64 -> 12) (65 -> 88) (66 -> 8) (67 -> 91) (68 -> 101) (69 -> 39) (70 -> 46) (71 -> 83) (72 -> 107) (73 -> 76) (74 -> 18) (75 -> 34) (76 -> 17) (77 -> 2) (78 -> 19) (79 -> 5) (80 -> 93) (81 -> 33) (82 -> 104) (83 -> 69) (84 -> 54) (85 -> 78) (86 -> 31) (87 -> 51) (88 -> 70) (89 -> 16) (90 -> 59) (91 -> 89) (92 -> 29) (93 -> 42) (94 -> 6) (95 -> 63) (96 -> 82) (97 -> 38) (98 -> 57) (99 -> 68) (100 -> 56) (101 -> 105) (102 -> 1) (103 -> 86) (104 -> 7) (105 -> 96) (106 -> 79) (107 -> 67) (108 -> 77) (109 -> 99) (110 -> 50) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 71, 83, 69, 39, 108, 77, 2, 110, 50, 80, 93, 42, 84, 54, 14, 9, 55, 15, 37, 49, 43, 26, 25, 87, 51, 32, 64, 12, 92, 29, 28, 45, 62, 85, 78, 19, 30, 100, 56, 66, 8, 13, 48, 65, 88, 70, 46, 3, 35, 60, 58, 52, 90, 59, 23, 97, 38, 24, 81, 33, 103, 86, 31, 53, 20, 4, 22, 106, 79, 5, 21, 95, 63, 72, 107, 67, 91, 89, 16, 75, 34, 36, 44, 74, 18, 40, 61, 11, 47, 10, 73, 76, 17, 98, 57, 27, 109, 99, 68, 101, 105, 96, 82, 104, 7, 94, 6, 41, 102]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 152.0
> Nombre d'itération nécéssaires : 45
> Nombre de contraintes ajoutées : 44
> Ordre de parcours des drônes : 
1 -> 71 -> 83 -> 69 -> 39 -> 108 -> 77 -> 2 -> 110 -> 50 -> 80 -> 93 -> 42 -> 84 -> 54 -> 14 -> 9 -> 55 -> 15 -> 37 -> 49 -> 43 -> 26 -> 25 -> 87 -> 51 -> 32 -> 64 -> 12 -> 92 -> 29 -> 28 -> 45 -> 62 -> 85 -> 78 -> 19 -> 30 -> 100 -> 56 -> 66 -> 8 -> 13 -> 48 -> 65 -> 88 -> 70 -> 46 -> 3 -> 35 -> 60 -> 58 -> 52 -> 90 -> 59 -> 23 -> 97 -> 38 -> 24 -> 81 -> 33 -> 103 -> 86 -> 31 -> 53 -> 20 -> 4 -> 22 -> 106 -> 79 -> 5 -> 21 -> 95 -> 63 -> 72 -> 107 -> 67 -> 91 -> 89 -> 16 -> 75 -> 34 -> 36 -> 44 -> 74 -> 18 -> 40 -> 61 -> 11 -> 47 -> 10 -> 73 -> 76 -> 17 -> 98 -> 57 -> 27 -> 109 -> 99 -> 68 -> 101 -> 105 -> 96 -> 82 -> 104 -> 7 -> 94 -> 6 -> 41 -> 102 -> 1. 
