Résolution exacte pour plat/plat140.dat points à visiter :
Résolution d'initiale :  
> temps total = 116.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 107) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 101) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 75) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114], [2, 133], [3, 89], [4, 14], [5, 48], [6, 92], [7, 31], [8, 80], [9, 140], [10, 103], [11, 109, 75], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [18, 107], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [22, 43], [23, 32], [24, 137], [25, 56], [26, 34], [27, 121], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [37, 93], [38, 40], [39, 101], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [60, 135], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [73, 110], [74, 131], [79, 108], [81, 136], [83, 100], [84, 134], [85, 116], [87, 120], [90, 132], [94, 97], [95, 118], [102, 125], [104, 117], [111, 112], [119, 122], [127, 138]]
> Nombre de cycle(s) trouvé(s) : 67
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 114]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,114] + x[114,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 117.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 1) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 109) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 138) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 34, 26, 6, 92, 101, 39, 83, 100, 90, 132, 95, 118, 138, 127, 89, 3, 2, 133, 107, 18], [4, 14], [5, 48], [7, 31], [8, 80], [9, 140], [10, 103], [11, 75, 109], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [23, 32], [24, 137], [25, 56], [27, 121], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [37, 93], [38, 40], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [60, 135], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [73, 110], [74, 131], [79, 108], [81, 136], [84, 134], [85, 116], [87, 120], [94, 97], [102, 125], [104, 117], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 54

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [4, 14]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,14] + x[14,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 6) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 139) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 140) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 62) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 75) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 138) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 34, 26, 140, 93, 37, 84, 134, 88, 12, 132, 95, 118, 138, 127, 89, 3, 2, 133, 107, 18, 38, 40, 73, 110, 137, 24, 14, 4, 6, 92, 101, 85, 116, 9, 139, 19, 30], [5, 48], [7, 31], [8, 80], [10, 103], [11, 109, 75], [13, 51], [15, 113], [16, 96], [17, 46], [20, 72], [21, 64], [23, 32], [25, 56], [27, 121], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [39, 83], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [52, 62], [55, 61], [57, 59], [58, 65], [60, 135], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [81, 136], [87, 120], [90, 100], [94, 97], [102, 125], [104, 117], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 48

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [5, 48]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[5,48] + x[48,5] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 112) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 107) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 101) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 37) (85 -> 116) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 127) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 90) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114], [2, 3, 89, 127, 138, 90, 100, 83, 39, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 107, 133], [7, 31], [8, 80], [9, 140], [10, 103], [11, 109], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [23, 32], [25, 56], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [85, 116], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 43

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [7, 31]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,31] + x[31,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 118.0
   Permutations :
(1 -> 112) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 107) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 127) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114], [2, 3, 89, 127, 138, 7, 31, 25, 56, 20, 72, 140, 9, 116, 85, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 107, 133], [8, 80], [10, 103], [11, 109], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [21, 64], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [39, 83], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 40

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [8, 80]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[8,80] + x[80,8] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 114) (2 -> 3) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 1) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 80) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 12) (89 -> 127) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 138) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 130, 36, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 138, 7, 31, 25, 56, 20, 72, 140, 9, 116, 85, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18], [2, 3], [10, 103], [11, 109], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [21, 64], [22, 43], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [37, 93], [39, 83], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [84, 134], [89, 127], [90, 100], [94, 97], [95, 132], [102, 125], [107, 133], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 48

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [2, 3]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,3] + x[3,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 114) (2 -> 80) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 107) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 101) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 90, 100, 83, 39, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 107, 133, 2, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 11, 109, 111, 112], [3, 89], [9, 140], [10, 103], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [85, 116], [94, 97], [95, 118], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 40

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [3, 89]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,89] + x[89,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 114) (2 -> 80) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 1) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 101) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 90, 100, 83, 39, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18], [2, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3], [9, 140], [10, 103], [11, 109], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [85, 116], [94, 97], [95, 118], [102, 125], [107, 133], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 43

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [9, 140]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,140] + x[140,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 18) (2 -> 80) (3 -> 2) (4 -> 20) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 38, 40, 73, 110, 137, 24, 14, 4, 20, 72, 140, 9, 116, 85, 101, 39, 83, 100, 90, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114], [2, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3], [6, 92], [10, 103], [11, 109], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [21, 64], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [94, 97], [95, 118], [102, 125], [107, 133], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 41

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [6, 92]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,92] + x[92,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 120.0
   Permutations :
(1 -> 114) (2 -> 80) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 1) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 93, 140, 9, 116, 85, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18], [2, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3], [10, 103], [11, 109], [12, 132], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [37, 84], [39, 83], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [88, 134], [90, 100], [94, 97], [95, 118], [102, 125], [107, 133], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 46

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [10, 103]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,103] + x[103,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 20) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 107) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 92) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 110) (74 -> 131) (75 -> 27) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 127) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 14) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 10) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 36) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 62, 52, 92, 6, 66, 99, 14, 4, 20, 72, 140, 93, 37, 84, 134, 36, 130, 114], [2, 3, 89, 127, 138, 7, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 27, 121, 8, 80, 18, 107, 133], [9, 116], [10, 103, 39, 83, 100, 90, 132, 95, 118], [11, 109], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [19, 139], [21, 64], [22, 43], [23, 32], [24, 137], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [38, 40], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [68, 76], [69, 105], [70, 86], [73, 110], [74, 131], [77, 123], [79, 108], [81, 136], [85, 101], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 46

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [9, 116]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[9,116] + x[116,9] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 30) (2 -> 133) (3 -> 2) (4 -> 20) (5 -> 120) (6 -> 66) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 37) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 14) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 10) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 62, 52, 105, 69, 44, 67, 37, 93, 53, 115, 54, 50, 43, 22, 114], [2, 133, 107, 18, 80, 8, 121, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3], [4, 20, 72, 140, 9, 116, 85, 101, 92, 6, 66, 99, 14], [10, 103, 39, 83, 100, 90, 132, 95, 118], [11, 109], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [19, 139], [21, 64], [23, 32], [24, 137], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [38, 40], [41, 126], [42, 78], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [68, 76], [70, 86], [73, 110], [74, 131], [77, 123], [79, 108], [81, 136], [84, 134], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 42

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [11, 109]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,109] + x[109,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 6) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 27) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 36) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 10) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 117) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 11, 75, 27, 121, 8, 80, 36, 130, 114], [2, 133, 107, 18, 38, 40, 73, 110, 137, 24, 14, 4, 6, 92, 101, 85, 116, 9, 140, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3], [10, 103, 39, 83, 100, 90, 132, 95, 118], [12, 88], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [22, 43], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [37, 93], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [84, 134], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 42

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [12, 88]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,88] + x[88,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 114) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 4) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 10) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 27) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 2) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 127) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 138) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 130, 36, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 10, 103, 39, 83, 100, 90, 132, 95, 118, 138, 7, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 27, 121, 8, 80, 2, 3, 89, 127, 11, 109, 111, 112], [13, 51], [15, 113], [16, 96], [17, 46], [19, 30, 62, 52, 77, 123, 139], [20, 72], [21, 64], [22, 43], [23, 32], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [41, 126], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [68, 76], [69, 105], [70, 86], [74, 131], [79, 108], [81, 136], [94, 97], [102, 125], [107, 133], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 38

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [13, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,51] + x[51,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 121.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 99) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 30) (20 -> 4) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 62) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 6) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 116) (86 -> 10) (87 -> 56) (88 -> 134) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 101) (93 -> 53) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 9) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3, 2, 133, 107, 18, 80, 8, 121, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 100, 90, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114], [4, 14, 99, 66, 6, 92, 101, 85, 116, 9, 140, 72, 20], [15, 113], [17, 46], [19, 30, 62, 52, 77, 123, 139], [21, 64], [23, 32], [24, 137], [26, 34], [28, 128], [29, 71], [33, 91], [35, 124], [36, 130], [38, 40], [42, 78], [44, 67], [45, 82], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [68, 76], [69, 105], [73, 110], [74, 131], [79, 108], [81, 136], [94, 97], [95, 118], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 34

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [15, 113]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[15,113] + x[113,15] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 124.0
   Permutations :
(1 -> 62) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 120) (6 -> 26) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 4) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 23) (33 -> 76) (34 -> 53) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 73) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 67) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 56) (88 -> 134) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 47) (107 -> 18) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 139) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 38) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 52, 77, 123, 139, 136, 81, 28, 128, 38, 40, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 44, 69, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3, 2, 133, 107, 18, 80, 8, 121, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 100, 90, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 26, 34, 53, 115, 54, 50, 43, 22, 114], [17, 46], [19, 30], [20, 72], [21, 64], [23, 32], [29, 71], [35, 124], [36, 130], [42, 78], [49, 98], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [79, 108], [94, 97], [95, 118], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [17, 46]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,46] + x[46,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 124.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 99) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 10) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 121) (28 -> 81) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 93) (54 -> 115) (55 -> 47) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 1) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 6) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 52) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 105) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 16) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 127) (139 -> 123) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 95, 118, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 99, 66, 6, 92, 101, 85, 116, 9, 140, 72, 20, 56, 25, 31, 7, 138, 127, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 123, 77, 52, 62], [8, 80, 18, 10, 103, 39, 83, 100, 90, 16, 96, 13, 51, 27, 121], [19, 30], [21, 64], [23, 32], [24, 137], [26, 34], [29, 71], [35, 124], [36, 130], [38, 40], [41, 126], [42, 78], [49, 98], [57, 59], [58, 65], [63, 129], [70, 86], [73, 110], [74, 131], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [19, 30]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,30] + x[30,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 124.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 10) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 82) (32 -> 23) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 36) (81 -> 28) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 127) (90 -> 16) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 1) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 127, 138, 7, 31, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 10, 103, 39, 83, 100, 90, 16, 96, 13, 51, 27, 121, 8, 80, 36, 130, 114], [20, 72], [21, 64], [22, 43], [23, 32], [25, 56], [26, 34], [29, 71], [35, 124], [41, 126], [42, 78], [44, 67], [47, 106], [49, 98], [50, 54], [52, 62], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 31

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [20, 72]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,72] + x[72,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 123.99999999999999
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 6) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 121) (28 -> 81) (29 -> 71) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 16) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 10) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 95, 118, 10, 103, 39, 83, 100, 90, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14, 4, 6, 92, 101, 85, 116, 9, 140, 72, 20, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 127, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [21, 64], [23, 32], [26, 34], [29, 71], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [47, 106], [49, 98], [52, 62], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [21, 64]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,64] + x[64,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 125.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 6) (5 -> 120) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 118) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 82) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 23) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 127) (90 -> 16) (91 -> 33) (92 -> 52) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 1) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 127, 138, 7, 31, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 20, 72, 140, 9, 116, 85, 101, 39, 103, 10, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114], [4, 6, 92, 52, 62, 64, 21, 32, 23, 83, 100, 90, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14], [26, 34], [29, 71], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [26, 34]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,34] + x[34,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 20) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 75) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 6) (27 -> 121) (28 -> 81) (29 -> 71) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 77) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 41) (71 -> 29) (72 -> 9) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 82) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 89) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 34, 26, 6, 92, 101, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14, 4, 20, 72, 9, 140, 93, 37, 84, 134, 88, 12, 132, 90, 100, 83, 23, 32, 21, 64, 62, 52, 77, 123, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [29, 71], [35, 124], [36, 130], [42, 78], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [74, 131], [79, 108], [85, 116], [94, 97], [95, 118], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 22

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [29, 71]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[29,71] + x[71,29] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 4) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 118) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 62) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 100) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 25) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 29) (90 -> 16) (91 -> 113) (92 -> 52) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 54) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 100, 90, 16, 96, 13, 51, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 20, 72, 140, 9, 116, 85, 101, 92, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 34, 26, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 111, 112], [7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31], [22, 114], [35, 124], [36, 130], [41, 126], [42, 78], [43, 50], [44, 67], [47, 106], [49, 98], [54, 115], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [22, 114]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,114] + x[114,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 6) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 127) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 82) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 23) (33 -> 76) (34 -> 97) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 93) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 92) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 43) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 41) (71 -> 21) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 129) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 75) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 1) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 21, 64, 62, 52, 92, 101, 85, 116, 9, 140, 72, 20, 56, 87, 120, 5, 48, 93, 37, 84, 134, 88, 12, 132, 90, 100, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14, 4, 6, 26, 34, 97, 94, 129, 63, 43, 22, 114], [7, 31, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 75, 11, 127, 138], [23, 32], [35, 124], [36, 130], [42, 78], [44, 67], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [60, 135], [66, 99], [69, 105], [74, 131], [77, 123], [79, 108], [95, 118], [102, 125], [104, 117], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [23, 32]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,32] + x[32,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 126.0
   Permutations :
(1 -> 114) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 4) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 90) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 92) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 25) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 71) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 10) (119 -> 122) (120 -> 5) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 72) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 114, 22, 43, 50, 54, 115, 53, 34, 26, 6, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 27, 51, 13, 96, 16, 90, 100, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 127, 72, 20, 56, 87, 120], [9, 140, 93, 37, 84, 134, 88, 12, 132, 95, 118, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 92, 101, 85, 116], [35, 124], [36, 130], [41, 126], [42, 78], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [35, 124]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[35,124] + x[124,35] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 20) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 124) (32 -> 21) (33 -> 91) (34 -> 53) (35 -> 10) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 101) (40 -> 73) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 92) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 100) (72 -> 127) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 25) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 16) (91 -> 113) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 1) (115 -> 54) (116 -> 9) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 100, 83, 23, 32, 21, 64, 62, 52, 92, 6, 26, 34, 53, 115, 54, 50, 43, 22, 114], [4, 20, 72, 127, 138, 7, 31, 124, 35, 10, 103, 39, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 132, 90, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14], [5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 56, 87, 120], [36, 130], [41, 126], [42, 78], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [66, 99], [69, 105], [70, 86], [74, 131], [77, 123], [79, 108], [94, 97], [95, 118], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [36, 130]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[36,130] + x[130,36] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 128.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 35) (11 -> 127) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 90) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 72) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 62) (53 -> 93) (54 -> 115) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 105) (83 -> 39) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 52) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 71) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 66) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 27, 51, 13, 96, 16, 90, 100, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [5, 48, 60, 135, 104, 117, 75, 11, 127, 138, 7, 31, 25, 56, 20, 72, 140, 9, 116, 66, 99, 36, 130, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 95, 118, 87, 120], [6, 92, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 35, 124, 34, 26], [41, 126], [42, 78], [49, 98], [57, 59], [58, 65], [63, 129], [70, 86], [74, 131], [77, 123], [79, 108], [85, 101], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [41, 126]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[41,126] + x[126,41] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 127) (12 -> 36) (13 -> 51) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 4) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 82) (32 -> 23) (33 -> 104) (34 -> 26) (35 -> 124) (36 -> 99) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 116) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 52) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 71) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 109) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 90) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 11, 127, 138, 7, 31, 82, 45, 15, 113, 91, 33, 104, 135, 60, 48, 5, 120, 87, 118, 95, 132, 90, 100, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 72, 20], [9, 140, 93, 37, 84, 134, 88, 12, 36, 99, 66, 116], [22, 43], [25, 56], [42, 78], [44, 67], [47, 106], [49, 98], [50, 54], [53, 115], [55, 61], [57, 59], [58, 65], [63, 129], [68, 76], [69, 105], [74, 131], [75, 117], [77, 123], [79, 108], [85, 101], [94, 97], [102, 125], [114, 130], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 26

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [22, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,43] + x[43,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 129.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 20) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 127) (12 -> 132) (13 -> 96) (14 -> 4) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 21) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 92) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 101) (70 -> 86) (71 -> 29) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 71) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 33) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 90) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 7) (139 -> 19) (140 -> 26) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 11, 127, 138, 7, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 33, 91, 113, 15, 45, 82, 105, 69, 101, 85, 116, 9, 140, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 20, 72, 40, 38, 18, 80, 8, 121, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 92, 6, 66, 99, 36, 130, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88, 12, 132, 90, 100, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [42, 78], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [68, 76], [74, 131], [75, 117], [77, 123], [79, 108], [94, 97], [95, 118], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [42, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[42,78] + x[78,42] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 106) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 86) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 1) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 124) (32 -> 23) (33 -> 91) (34 -> 97) (35 -> 73) (36 -> 12) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 69) (45 -> 82) (46 -> 107) (47 -> 55) (48 -> 60) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 54) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 41) (71 -> 78) (72 -> 127) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 25) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 140) (94 -> 129) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 56, 20, 72, 127, 138, 7, 31, 124, 35, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 44, 69, 105, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18], [6, 26, 34, 97, 94, 129, 63, 54, 50, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92], [38, 40], [49, 98], [53, 115], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [95, 132], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [38, 40]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[38,40] + x[40,38] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 20) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 86) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 99) (37 -> 93) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 6) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 33) (77 -> 52) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 123) (83 -> 39) (84 -> 37) (85 -> 116) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 130) (115 -> 54) (116 -> 9) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 136) (140 -> 26) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114, 130, 36, 99, 66, 6, 92, 101, 85, 116, 9, 140, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112], [5, 120, 87, 56, 25, 31, 7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 123, 77, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 75, 117, 104, 135, 60, 48], [44, 67], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [69, 105], [74, 131], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [44, 67]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,67] + x[67,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 20) (5 -> 120) (6 -> 26) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 132) (13 -> 96) (14 -> 4) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 99) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 92) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 116) (67 -> 37) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 101) (86 -> 10) (87 -> 56) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 54) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 37, 84, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 20, 72, 40, 38, 18, 80, 8, 121, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 92, 6, 26, 34, 124, 35, 73, 110, 137, 24, 14], [5, 120, 87, 56, 25, 31, 7, 138, 127, 11, 75, 117, 104, 135, 60, 48], [9, 140, 93, 53, 115, 54, 50, 43, 22, 114, 130, 36, 99, 66, 116], [47, 106], [49, 98], [55, 61], [57, 59], [58, 65], [63, 129], [74, 131], [77, 123], [79, 108], [85, 101], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [47, 106]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[47,106] + x[106,47] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 35) (11 -> 109) (12 -> 36) (13 -> 96) (14 -> 4) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 6) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 73) (41 -> 70) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 82) (46 -> 17) (47 -> 55) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 62) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 27) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 127) (139 -> 19) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 44, 69, 105, 52, 62, 64, 21, 32, 23, 83, 100, 90, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [5, 48, 60, 135, 104, 117, 75, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 35, 124, 34, 26, 6, 92, 101, 85, 116, 9, 140, 72, 20, 56, 87, 120], [7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31], [12, 36, 130, 114, 22, 43, 50, 54, 115, 53, 93, 37, 84, 134, 88], [39, 103], [49, 98], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [39, 103]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,103] + x[103,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 131.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 36) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 34) (54 -> 115) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 131) (75 -> 27) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 25) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 31) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 17) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 135, 104, 117, 75, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 31, 7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112], [6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 115, 53, 34, 26], [49, 98], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [49, 98]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[49,98] + x[98,49] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 40) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 25) (83 -> 23) (84 -> 37) (85 -> 116) (86 -> 10) (87 -> 118) (88 -> 134) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 48) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 33) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 11, 75, 117, 104, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 93, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 101, 85, 116, 9, 140, 72, 40, 38, 18, 80, 8, 121, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [20, 56], [53, 115], [57, 59], [58, 65], [60, 135], [66, 99], [68, 76], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [20, 56]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[20,56] + x[56,20] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 20) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 86) (11 -> 109) (12 -> 88) (13 -> 49) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 12) (37 -> 93) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 92) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 127) (99 -> 66) (100 -> 83) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 130) (115 -> 54) (116 -> 85) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 95, 132, 90, 100, 83, 23, 32, 21, 64, 62, 52, 92, 6, 26, 34, 124, 35, 73, 40, 38, 18, 80, 8, 121, 111, 112], [4, 20, 72, 140, 9, 116, 85, 101, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 49, 98, 127, 138, 7, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106], [12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114, 130, 36], [14, 24], [27, 51], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [110, 137], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [14, 24]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[14,24] + x[24,14] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 26) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 124) (35 -> 10) (36 -> 98) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 13) (50 -> 43) (51 -> 27) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 25) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 97) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 140) (94 -> 129) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 72) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 26, 34, 124, 35, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 111, 112], [5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 127, 72, 20, 56, 87, 120], [13, 96, 16, 126, 41, 70, 86, 97, 94, 129, 63, 54, 50, 43, 22, 114, 130, 36, 98, 49], [27, 51], [53, 115], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [27, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,51] + x[51,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 86) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 75) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 49) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 43) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 27) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 105) (83 -> 135) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 52) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 31, 7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 52, 62, 64, 21, 32, 23, 83, 135, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [9, 116, 85, 101, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 49, 98, 129, 63, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 93, 140], [27, 75], [50, 54], [53, 115], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [104, 117], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [27, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[27,75] + x[75,27] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 62) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 127) (12 -> 36) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 82) (26 -> 6) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 23) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 101) (40 -> 72) (41 -> 70) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 51) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 27) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 132) (91 -> 33) (92 -> 52) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 64, 21, 32, 23, 83, 100, 90, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 52, 105, 69, 44, 67, 61, 55, 47, 106], [5, 48, 60, 135, 104, 117, 75, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120], [7, 31, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 138], [9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 101, 85, 116], [53, 115], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [53, 115]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,115] + x[115,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 134) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 23) (84 -> 37) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 53) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 27) (116 -> 9) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 101, 85, 116, 9, 140, 93, 53, 115, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [37, 84], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 39 Cassage de contrainte 
> Cycle à casser : [37, 84]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[37,84] + x[84,37] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 106) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 86) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 82) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 23) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 98) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 69) (45 -> 15) (46 -> 107) (47 -> 55) (48 -> 60) (49 -> 127) (50 -> 43) (51 -> 27) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 41) (71 -> 78) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 130) (115 -> 54) (116 -> 85) (117 -> 140) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 54, 50, 43, 22, 114, 130, 36, 98, 49, 127, 138, 7, 31, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 111, 112], [4, 106, 47, 55, 61, 67, 44, 69, 105, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 60, 135, 104, 117, 140, 9, 116, 85, 101, 92, 6, 26, 34, 124, 35, 73, 110, 137, 24, 14], [11, 75], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 40 Cassage de contrainte 
> Cycle à casser : [11, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,75] + x[75,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 36) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 91) (34 -> 53) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 127) (50 -> 54) (51 -> 13) (52 -> 92) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 27) (116 -> 9) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 53, 115, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 127, 138, 7, 31, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112], [6, 26], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 41 Cassage de contrainte 
> Cycle à casser : [6, 26]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,26] + x[26,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 48) (6 -> 26) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 86) (11 -> 127) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 82) (46 -> 17) (47 -> 55) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 93) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 37) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 105) (83 -> 39) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 36) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 49) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 127, 49, 98, 36, 130, 114, 22, 43, 50, 54, 115, 53, 93, 140, 9, 116, 85, 101, 92, 6, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 37, 84, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [7, 138], [25, 31], [44, 69], [57, 59], [58, 65], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 42 Cassage de contrainte 
> Cycle à casser : [7, 138]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,138] + x[138,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 106) (5 -> 48) (6 -> 26) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 36) (13 -> 96) (14 -> 4) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 63) (44 -> 69) (45 -> 15) (46 -> 107) (47 -> 55) (48 -> 60) (49 -> 51) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 93) (54 -> 50) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 37) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 82) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 127, 138, 7, 31, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 27, 115, 53, 93, 140, 9, 116, 85, 101, 92, 6, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 63, 129, 98, 49, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 111, 112], [44, 69], [50, 54], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 43 Cassage de contrainte 
> Cycle à casser : [44, 69]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,69] + x[69,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 120) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 75) (12 -> 36) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 14) (25 -> 82) (26 -> 6) (27 -> 115) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 124) (32 -> 23) (33 -> 76) (34 -> 26) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 127) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 34) (54 -> 63) (55 -> 61) (56 -> 25) (57 -> 59) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 118) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 52) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 121) (112 -> 111) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 28) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 24) (138 -> 7) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 106, 47, 55, 61, 67, 44, 69, 105, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 115, 53, 34, 26, 6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 127, 138, 7, 31, 124, 35, 73, 110, 137, 24, 14], [57, 59], [58, 65], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 44 Cassage de contrainte 
> Cycle à casser : [57, 59]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[57,59] + x[59,57] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 127) (12 -> 132) (13 -> 51) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 6) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 82) (46 -> 17) (47 -> 55) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 34) (54 -> 115) (55 -> 61) (56 -> 87) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 26) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 105) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 13) (97 -> 94) (98 -> 36) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 109) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 49) (128 -> 28) (129 -> 63) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 24) (138 -> 59) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31, 7, 138, 59, 57, 58, 65, 26, 6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 106, 47, 55, 61, 67, 44, 69, 105, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 127, 49, 98, 36, 130, 114, 22, 43, 50, 54, 115, 53, 34, 124, 35, 73, 110, 137, 24, 14], [63, 129], [66, 99], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 45 Cassage de contrainte 
> Cycle à casser : [63, 129]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[63,129] + x[129,63] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 66) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 86) (11 -> 109) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 115) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 104) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 63) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 127) (50 -> 54) (51 -> 27) (52 -> 62) (53 -> 34) (54 -> 50) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 105) (83 -> 39) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 52) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 91) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 28) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 139) (137 -> 110) (138 -> 59) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 31, 7, 138, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 115, 53, 34, 26, 6, 66, 99, 36, 130, 114, 22, 43, 63, 129, 98, 49, 127, 11, 109, 68, 76, 33, 104, 135, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106], [50, 54], [74, 131], [75, 117], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 46 Cassage de contrainte 
> Cycle à casser : [50, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[50,54] + x[54,50] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 112) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 86) (11 -> 75) (12 -> 88) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 57) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 27) (52 -> 105) (53 -> 93) (54 -> 50) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 65) (59 -> 33) (60 -> 48) (61 -> 55) (62 -> 30) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 25) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 56) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 52) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 83) (101 -> 39) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 109) (112 -> 1) (113 -> 15) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 104) (118 -> 95) (119 -> 122) (120 -> 87) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 16) (127 -> 49) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112], [2, 3, 89, 29, 71, 78, 42, 118, 95, 132, 90, 100, 83, 23, 32, 21, 64, 62, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 92, 52, 105, 69, 44, 67, 61, 55, 47, 106], [5, 120, 87, 56, 20, 72, 40, 38, 18, 80, 8, 121, 111, 109, 11, 75, 117, 104, 135, 60, 48], [7, 138, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 57, 59, 33, 91, 113, 15, 45, 82, 25, 31], [9, 116, 85, 101, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 27, 115, 53, 93, 140], [58, 65], [66, 99], [68, 76], [74, 131], [77, 123], [79, 108], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 47 Cassage de contrainte 
> Cycle à casser : [1, 112]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,112] + x[112,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 30) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 86) (11 -> 127) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 23) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 99) (37 -> 93) (38 -> 40) (39 -> 103) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 22) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 49) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 67) (62 -> 64) (63 -> 54) (64 -> 21) (65 -> 95) (66 -> 6) (67 -> 44) (68 -> 109) (69 -> 105) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 37) (85 -> 116) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 82) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 75) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 27) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 52) (137 -> 24) (138 -> 59) (139 -> 19) (140 -> 26) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30], [2, 133, 107, 46, 17, 128, 28, 81, 136, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 99, 66, 6, 92, 101, 85, 116, 9, 140, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 44, 69, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3], [7, 138, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 31], [11, 127], [19, 139], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 48 Cassage de contrainte 
> Cycle à casser : [1, 30]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,30] + x[30,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 26) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 36) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 82) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 104) (34 -> 53) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 93) (49 -> 51) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 25) (57 -> 37) (58 -> 65) (59 -> 57) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 109) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 31) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 59) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 93, 140, 9, 116, 85, 101, 92, 6, 26, 34, 53, 115, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 82, 45, 15, 113, 91, 33, 104, 117, 75, 109, 111, 112], [4, 14, 24, 137, 110, 73, 35, 124, 31, 7, 138, 59, 57, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [11, 127], [58, 65], [60, 135], [66, 99], [68, 76], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 15

Itération n° 49 Cassage de contrainte 
> Cycle à casser : [11, 127]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,127] + x[127,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 62) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 35) (11 -> 127) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 128) (18 -> 80) (19 -> 30) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 115) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 23) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 98) (37 -> 84) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 17) (47 -> 106) (48 -> 5) (49 -> 51) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 93) (54 -> 50) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 48) (61 -> 55) (62 -> 64) (63 -> 54) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 39) (84 -> 134) (85 -> 101) (86 -> 97) (87 -> 118) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 52) (93 -> 37) (94 -> 129) (95 -> 65) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 69) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 82) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 64, 21, 32, 23, 83, 39, 103, 10, 35, 124, 34, 26, 6, 92, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 138, 7, 31, 25, 56, 20, 72, 140, 9, 116, 85, 101, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 27, 115, 53, 93, 37, 84, 134, 88, 12, 132, 95, 65, 58, 57, 59, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [13, 96, 16, 126, 41, 70, 86, 97, 94, 129, 63, 54, 50, 43, 22, 114, 130, 36, 98, 49, 51], [66, 99], [74, 131], [75, 117], [77, 123], [79, 108], [90, 100], [102, 125], [104, 135], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 50 Cassage de contrainte 
> Cycle à casser : [66, 99]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[66,99] + x[99,66] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 127) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 82) (26 -> 65) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 53) (35 -> 124) (36 -> 99) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 17) (47 -> 106) (48 -> 26) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 57) (59 -> 138) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 6) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 75) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 27) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 110) (138 -> 7) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 26, 65, 58, 57, 59, 138, 7, 31, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 75, 11, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 99, 66, 6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 53, 115, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [60, 135], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [104, 117], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 11

Itération n° 51 Cassage de contrainte 
> Cycle à casser : [60, 135]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,135] + x[135,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 31) (8 -> 121) (9 -> 140) (10 -> 86) (11 -> 109) (12 -> 36) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 65) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 127) (50 -> 54) (51 -> 79) (52 -> 62) (53 -> 123) (54 -> 63) (55 -> 47) (56 -> 20) (57 -> 59) (58 -> 57) (59 -> 138) (60 -> 135) (61 -> 55) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 6) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 52) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 39) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 33) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 99) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 27) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 135, 104, 33, 91, 113, 15, 45, 82, 105, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 65, 58, 57, 59, 138, 7, 31, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 27, 115, 53, 123, 77, 52, 62, 64, 21, 32, 23, 83, 39, 103, 10, 86, 70, 41, 126, 16, 96, 13, 51, 79, 108, 99, 66, 6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 127, 11, 109, 111, 112], [68, 76], [74, 131], [75, 117], [90, 100], [94, 97], [95, 132], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 52 Cassage de contrainte 
> Cycle à casser : [68, 76]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[68,76] + x[76,68] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 51) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 115) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 78) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 17) (47 -> 106) (48 -> 60) (49 -> 13) (50 -> 54) (51 -> 27) (52 -> 105) (53 -> 93) (54 -> 63) (55 -> 47) (56 -> 87) (57 -> 37) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 23) (84 -> 134) (85 -> 96) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 140) (94 -> 97) (95 -> 118) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 4) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 28) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 87, 120, 5, 48, 60, 59, 57, 37, 84, 134, 88, 12, 132, 95, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 6, 66, 99, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 13, 51, 27, 115, 53, 93, 140, 9, 116, 85, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 31], [58, 65], [74, 131], [75, 117], [77, 123], [79, 108], [90, 100], [92, 101], [94, 97], [102, 125], [104, 135], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 53 Cassage de contrainte 
> Cycle à casser : [58, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[58,65] + x[65,58] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 82) (26 -> 34) (27 -> 121) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 76) (34 -> 53) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 26) (49 -> 51) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 69) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 104) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 31) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 26, 34, 53, 115, 27, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 82, 45, 15, 113, 91, 33, 76, 68, 109, 111, 112], [4, 14, 24, 137, 110, 73, 35, 124, 31, 7, 138, 127, 11, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 66, 99, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 69, 44, 67, 61, 55, 47, 106], [74, 131], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 54 Cassage de contrainte 
> Cycle à casser : [74, 131]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[74,131] + x[131,74] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 140) (27 -> 131) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 51) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 20) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 69) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 60, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 27, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 140, 9, 116, 85, 101, 92, 6, 66, 99, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 138, 7, 31, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112], [75, 117], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125], [104, 135], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 55 Cassage de contrainte 
> Cycle à casser : [75, 117]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[75,117] + x[117,75] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 66) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 140) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 127) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 69) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 56) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 36) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 104) (118 -> 122) (119 -> 131) (120 -> 87) (121 -> 20) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 11) (128 -> 17) (129 -> 98) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 59) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 140, 9, 116, 85, 101, 92, 6, 66, 99, 36, 130, 114, 22, 43, 50, 54, 63, 129, 98, 49, 127, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 56, 25, 31, 7, 138, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 111, 112], [8, 121, 20, 72, 40, 38, 18, 80], [77, 123], [79, 108], [90, 100], [94, 97], [102, 125]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 56 Cassage de contrainte 
> Cycle à casser : [77, 123]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[77,123] + x[123,77] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 48) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 99) (37 -> 84) (38 -> 18) (39 -> 83) (40 -> 38) (41 -> 70) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 25) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 135) (61 -> 55) (62 -> 1) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 6) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 69) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 10) (87 -> 56) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 52) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 27) (116 -> 9) (117 -> 75) (118 -> 122) (119 -> 131) (120 -> 87) (121 -> 20) (122 -> 119) (123 -> 53) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 48, 5, 120, 87, 56, 25, 31, 7, 138, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 99, 66, 6, 92, 101, 85, 116, 9, 140, 93, 37, 84, 134, 88, 12, 132, 95, 65, 58, 57, 59, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 52, 77, 123, 53, 115, 27, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62], [8, 121, 20, 72, 40, 38, 18, 80], [79, 108], [90, 100], [94, 97], [102, 125], [111, 112]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 57 Cassage de contrainte 
> Cycle à casser : [79, 108]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[79,108] + x[108,79] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 137.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 121) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 65) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 93) (38 -> 40) (39 -> 83) (40 -> 72) (41 -> 70) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 123) (54 -> 50) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 57) (59 -> 138) (60 -> 135) (61 -> 55) (62 -> 1) (63 -> 54) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 35) (74 -> 69) (75 -> 27) (76 -> 68) (77 -> 52) (78 -> 42) (79 -> 51) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 108) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 82) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 122) (119 -> 131) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 84) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 65, 58, 57, 59, 138, 7, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 27, 115, 53, 123, 77, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 66, 99, 108, 79, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 83, 23, 32, 21, 64, 62], [8, 80, 18, 38, 40, 72, 20, 121], [90, 100], [94, 97], [95, 132], [102, 125], [111, 112]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 58 Cassage de contrainte 
> Cycle à casser : [90, 100]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[90,100] + x[100,90] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 138.0
   Permutations :
(1 -> 112) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 120) (6 -> 66) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 140) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 12) (37 -> 93) (38 -> 40) (39 -> 30) (40 -> 72) (41 -> 70) (42 -> 123) (43 -> 22) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 5) (49 -> 98) (50 -> 43) (51 -> 13) (52 -> 105) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 55) (62 -> 1) (63 -> 54) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 35) (74 -> 69) (75 -> 117) (76 -> 68) (77 -> 52) (78 -> 42) (79 -> 51) (80 -> 18) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 10) (87 -> 118) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 129) (99 -> 108) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 91) (114 -> 130) (115 -> 27) (116 -> 85) (117 -> 104) (118 -> 122) (119 -> 131) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 34) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 59) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 31, 7, 138, 59, 57, 58, 65, 95, 132, 90, 100, 83, 23, 32, 21, 64, 62], [2, 3, 89, 29, 71, 78, 42, 123, 77, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 49, 98, 129, 63, 54, 50, 43, 22, 114, 130, 36, 12, 88, 134, 84, 37, 93, 53, 115, 27, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 140, 9, 116, 85, 101, 92, 6, 66, 99, 108, 79, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133], [94, 97], [102, 125]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 59 Cassage de contrainte 
> Cycle à casser : [94, 97]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[94,97] + x[97,94] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 139.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 106) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 127) (12 -> 132) (13 -> 49) (14 -> 4) (15 -> 113) (16 -> 126) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 140) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 101) (40 -> 38) (41 -> 70) (42 -> 123) (43 -> 50) (44 -> 69) (45 -> 15) (46 -> 107) (47 -> 55) (48 -> 26) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 105) (53 -> 93) (54 -> 63) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 135) (61 -> 67) (62 -> 1) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 109) (69 -> 74) (70 -> 86) (71 -> 78) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 27) (76 -> 68) (77 -> 52) (78 -> 42) (79 -> 51) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 96) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 16) (97 -> 34) (98 -> 36) (99 -> 108) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 82) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 111) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 85) (117 -> 75) (118 -> 95) (119 -> 122) (120 -> 5) (121 -> 20) (122 -> 118) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 41) (127 -> 138) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 119) (132 -> 90) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 24) (138 -> 7) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 123, 77, 52, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 138, 7, 31, 25, 56, 87, 120, 5, 48, 26, 140, 9, 116, 85, 96, 16, 126, 41, 70, 86, 10, 103, 39, 101, 92, 6, 66, 99, 108, 79, 51, 13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 34, 124, 35, 73, 110, 137, 24, 14, 4, 106, 47, 55, 61, 67, 44, 69, 74, 131, 119, 122, 118, 95, 65, 58, 57, 59, 60, 135, 104, 117, 75, 27, 115, 53, 93, 37, 84, 134, 88, 12, 132, 90, 100, 83, 23, 32, 21, 64, 62], [8, 121, 20, 72, 40, 38, 18, 80], [102, 125], [111, 112]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 60 Cassage de contrainte 
> Cycle à casser : [102, 125]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[102,125] + x[125,102] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 112) (2 -> 133) (3 -> 2) (4 -> 106) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 80) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 36) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 126) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 6) (27 -> 115) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 102) (32 -> 23) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 7) (40 -> 72) (41 -> 70) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 79) (52 -> 62) (53 -> 123) (54 -> 63) (55 -> 61) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 48) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 26) (66 -> 116) (67 -> 44) (68 -> 109) (69 -> 74) (70 -> 86) (71 -> 29) (72 -> 20) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 52) (78 -> 71) (79 -> 108) (80 -> 18) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 134) (85 -> 96) (86 -> 10) (87 -> 118) (88 -> 12) (89 -> 3) (90 -> 16) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 34) (98 -> 127) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 47) (107 -> 46) (108 -> 99) (109 -> 11) (110 -> 137) (111 -> 121) (112 -> 111) (113 -> 91) (114 -> 22) (115 -> 53) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 8) (122 -> 119) (123 -> 77) (124 -> 35) (125 -> 105) (126 -> 41) (127 -> 49) (128 -> 28) (129 -> 94) (130 -> 114) (131 -> 27) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 60) (136 -> 139) (137 -> 24) (138 -> 59) (139 -> 19) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 56, 25, 31, 102, 125, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 106, 47, 55, 61, 67, 44, 69, 74, 131, 27, 115, 53, 123, 77, 52, 62, 64, 21, 32, 23, 83, 100, 90, 16, 126, 41, 70, 86, 10, 103, 39, 7, 138, 59, 57, 58, 65, 26, 6, 92, 101, 85, 96, 13, 51, 79, 108, 99, 66, 116, 9, 140, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 34, 124, 35, 73, 110, 137, 24, 14], [49, 98, 127], [95, 132], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 61 Cassage de contrainte 
> Cycle à casser : [95, 132]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[95,132] + x[132,95] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 86) (11 -> 75) (12 -> 88) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 90) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 114) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 131) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 76) (34 -> 97) (35 -> 124) (36 -> 98) (37 -> 93) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 22) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 26) (49 -> 51) (50 -> 43) (51 -> 79) (52 -> 77) (53 -> 115) (54 -> 50) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 1) (63 -> 54) (64 -> 62) (65 -> 95) (66 -> 6) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 69) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 52) (93 -> 140) (94 -> 129) (95 -> 132) (96 -> 13) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 83) (101 -> 39) (102 -> 31) (103 -> 10) (104 -> 135) (105 -> 125) (106 -> 4) (107 -> 133) (108 -> 99) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 130) (115 -> 27) (116 -> 85) (117 -> 104) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 20) (122 -> 119) (123 -> 53) (124 -> 91) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 17) (129 -> 63) (130 -> 36) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 26, 34, 97, 94, 129, 63, 54, 50, 43, 22, 114, 130, 36, 98, 49, 51, 79, 108, 99, 66, 6, 92, 52, 77, 123, 53, 115, 27, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 91, 113, 15, 45, 82, 105, 125, 102, 31, 7, 138, 127, 11, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 39, 103, 10, 86, 70, 41, 126, 16, 90, 100, 83, 23, 32, 21, 64, 62], [8, 121, 20, 72, 40, 38, 18, 80], [13, 96], [25, 56], [33, 76], [68, 109], [111, 112], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 8

Itération n° 62 Cassage de contrainte 
> Cycle à casser : [13, 96]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,96] + x[96,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 92) (7 -> 39) (8 -> 121) (9 -> 140) (10 -> 86) (11 -> 127) (12 -> 132) (13 -> 49) (14 -> 24) (15 -> 45) (16 -> 90) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 6) (27 -> 51) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 60) (49 -> 98) (50 -> 54) (51 -> 79) (52 -> 77) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 87) (57 -> 59) (58 -> 57) (59 -> 33) (60 -> 135) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 116) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 35) (74 -> 69) (75 -> 11) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 108) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 96) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 13) (97 -> 34) (98 -> 36) (99 -> 66) (100 -> 83) (101 -> 85) (102 -> 31) (103 -> 10) (104 -> 117) (105 -> 125) (106 -> 4) (107 -> 133) (108 -> 99) (109 -> 111) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 27) (116 -> 9) (117 -> 75) (118 -> 122) (119 -> 131) (120 -> 5) (121 -> 20) (122 -> 119) (123 -> 53) (124 -> 91) (125 -> 102) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 93) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 35, 124, 91, 113, 15, 45, 82, 105, 125, 102, 31, 25, 56, 87, 120, 5, 48, 60, 135, 104, 117, 75, 11, 127, 138, 7, 39, 103, 10, 86, 70, 41, 126, 16, 90, 100, 83, 23, 32, 21, 64, 62, 52, 77, 123, 53, 115, 27, 51, 79, 108, 99, 66, 116, 9, 140, 93, 37, 84, 134, 88, 12, 132, 95, 65, 58, 57, 59, 33, 76, 68, 109, 111, 112], [6, 92, 101, 85, 96, 13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 34, 26], [8, 121, 20, 72, 40, 38, 18, 80]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 63 Cassage de contrainte 
> Cycle à casser : [8, 121, 20, 72, 40, 38, 18, 80]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[8,121] + x[121,20] + x[20,72] + x[72,40] + x[40,38] + x[38,18] + x[18,80] + x[80,8] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 62) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 31) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 49) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 128) (18 -> 38) (19 -> 30) (20 -> 4) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 140) (27 -> 121) (28 -> 81) (29 -> 89) (30 -> 1) (31 -> 102) (32 -> 23) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 7) (40 -> 72) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 82) (46 -> 17) (47 -> 55) (48 -> 93) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 63) (55 -> 61) (56 -> 87) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 74) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 35) (74 -> 131) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 71) (79 -> 51) (80 -> 18) (81 -> 136) (82 -> 25) (83 -> 100) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 3) (90 -> 106) (91 -> 113) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 10) (97 -> 86) (98 -> 36) (99 -> 108) (100 -> 90) (101 -> 92) (102 -> 125) (103 -> 39) (104 -> 117) (105 -> 52) (106 -> 47) (107 -> 46) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 75) (118 -> 42) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 118) (123 -> 53) (124 -> 34) (125 -> 105) (126 -> 16) (127 -> 138) (128 -> 28) (129 -> 94) (130 -> 114) (131 -> 119) (132 -> 95) (133 -> 107) (134 -> 88) (135 -> 104) (136 -> 139) (137 -> 110) (138 -> 127) (139 -> 19) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 62, 64, 21, 32, 23, 83, 100, 90, 106, 47, 55, 61, 67, 44, 69, 74, 131, 119, 122, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 139, 19, 30], [4, 14, 24, 137, 110, 73, 35, 124, 34, 26, 140, 9, 116, 85, 101, 92, 6, 66, 99, 108, 79, 51, 13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 86, 70, 41, 126, 16, 96, 10, 103, 39, 7, 31, 102, 125, 105, 52, 77, 123, 53, 115, 27, 121, 8, 80, 18, 38, 40, 72, 20], [5, 48, 93, 37, 84, 134, 88, 12, 132, 95, 65, 58, 57, 59, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 25, 56, 87, 120], [111, 112], [127, 138]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 64 Cassage de contrainte 
> Cycle à casser : [111, 112]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[111,112] + x[112,111] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 39) (8 -> 121) (9 -> 140) (10 -> 35) (11 -> 75) (12 -> 36) (13 -> 49) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 56) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 31) (26 -> 6) (27 -> 131) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 102) (32 -> 21) (33 -> 76) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 15) (46 -> 107) (47 -> 106) (48 -> 93) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 109) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 20) (73 -> 40) (74 -> 69) (75 -> 117) (76 -> 68) (77 -> 123) (78 -> 42) (79 -> 51) (80 -> 8) (81 -> 28) (82 -> 45) (83 -> 23) (84 -> 134) (85 -> 116) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 33) (92 -> 101) (93 -> 37) (94 -> 97) (95 -> 132) (96 -> 85) (97 -> 86) (98 -> 127) (99 -> 108) (100 -> 83) (101 -> 92) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 82) (106 -> 4) (107 -> 133) (108 -> 79) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 9) (117 -> 104) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 53) (124 -> 34) (125 -> 105) (126 -> 16) (127 -> 138) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 74) (132 -> 90) (133 -> 2) (134 -> 88) (135 -> 60) (136 -> 81) (137 -> 110) (138 -> 7) (139 -> 136) (140 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 93, 37, 84, 134, 88, 12, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 86, 70, 41, 126, 16, 96, 85, 116, 9, 140, 72, 20, 56, 25, 31, 102, 125, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132, 90, 100, 83, 23, 32, 21, 64, 62, 52, 77, 123, 53, 115, 27, 131, 74, 69, 44, 67, 61, 55, 47, 106, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 111, 112], [6, 66, 99, 108, 79, 51, 13, 49, 98, 127, 138, 7, 39, 103, 10, 35, 124, 34, 26], [92, 101], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 65 Cassage de contrainte 
> Cycle à casser : [92, 101]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[92,101] + x[101,92] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 112) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 66) (7 -> 138) (8 -> 80) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 96) (14 -> 24) (15 -> 45) (16 -> 126) (17 -> 46) (18 -> 38) (19 -> 139) (20 -> 4) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 137) (25 -> 56) (26 -> 140) (27 -> 131) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 7) (32 -> 21) (33 -> 91) (34 -> 26) (35 -> 124) (36 -> 130) (37 -> 84) (38 -> 40) (39 -> 30) (40 -> 72) (41 -> 70) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 93) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 25) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 135) (61 -> 55) (62 -> 1) (63 -> 129) (64 -> 62) (65 -> 58) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 86) (71 -> 78) (72 -> 20) (73 -> 35) (74 -> 69) (75 -> 11) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 51) (80 -> 18) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 134) (85 -> 101) (86 -> 10) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 16) (97 -> 34) (98 -> 36) (99 -> 108) (100 -> 83) (101 -> 92) (102 -> 31) (103 -> 39) (104 -> 117) (105 -> 52) (106 -> 90) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 121) (112 -> 111) (113 -> 15) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 8) (122 -> 119) (123 -> 53) (124 -> 125) (125 -> 102) (126 -> 41) (127 -> 49) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 74) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 112, 111, 121, 8, 80, 18, 38, 40, 72, 20, 4, 14, 24, 137, 110, 73, 35, 124, 125, 102, 31, 7, 138, 127, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 34, 26, 140, 9, 116, 85, 101, 92, 6, 66, 99, 108, 79, 51, 13, 96, 16, 126, 41, 70, 86, 10, 103, 39, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 93, 37, 84, 134, 88, 12, 132, 95, 65, 58, 57, 59, 60, 135, 104, 117, 75, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 52, 77, 123, 53, 115, 27, 131, 74, 69, 44, 67, 61, 55, 47, 106, 90, 100, 83, 23, 32, 21, 64, 62], [25, 56], [119, 122]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 66 Cassage de contrainte 
> Cycle à casser : [25, 56]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,56] + x[56,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 133) (3 -> 2) (4 -> 20) (5 -> 120) (6 -> 92) (7 -> 39) (8 -> 121) (9 -> 140) (10 -> 96) (11 -> 127) (12 -> 88) (13 -> 51) (14 -> 4) (15 -> 113) (16 -> 126) (17 -> 128) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 114) (23 -> 83) (24 -> 14) (25 -> 31) (26 -> 34) (27 -> 75) (28 -> 81) (29 -> 89) (30 -> 19) (31 -> 102) (32 -> 23) (33 -> 76) (34 -> 124) (35 -> 73) (36 -> 98) (37 -> 93) (38 -> 18) (39 -> 103) (40 -> 38) (41 -> 70) (42 -> 78) (43 -> 22) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 13) (50 -> 43) (51 -> 79) (52 -> 62) (53 -> 115) (54 -> 50) (55 -> 61) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 67) (62 -> 64) (63 -> 54) (64 -> 21) (65 -> 95) (66 -> 6) (67 -> 44) (68 -> 109) (69 -> 74) (70 -> 86) (71 -> 29) (72 -> 40) (73 -> 110) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 52) (78 -> 71) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 116) (86 -> 97) (87 -> 56) (88 -> 134) (89 -> 3) (90 -> 106) (91 -> 33) (92 -> 101) (93 -> 53) (94 -> 129) (95 -> 132) (96 -> 16) (97 -> 94) (98 -> 49) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 10) (104 -> 135) (105 -> 82) (106 -> 47) (107 -> 46) (108 -> 99) (109 -> 11) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 130) (115 -> 27) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 111) (122 -> 118) (123 -> 77) (124 -> 35) (125 -> 105) (126 -> 41) (127 -> 138) (128 -> 28) (129 -> 63) (130 -> 36) (131 -> 119) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 48) (137 -> 24) (138 -> 7) (139 -> 123) (140 -> 26) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 123, 77, 52, 62, 64, 21, 32, 23, 83, 100, 90, 106, 47, 55, 61, 67, 44, 69, 74, 131, 119, 122, 118, 42, 78, 71, 29, 89, 3, 2, 133, 107, 46, 17, 128, 28, 81, 136, 48, 5, 120, 87, 56, 25, 31, 102, 125, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 127, 138, 7, 39, 103, 10, 96, 16, 126, 41, 70, 86, 97, 94, 129, 63, 54, 50, 43, 22, 114, 130, 36, 98, 49, 13, 51, 79, 108, 99, 66, 6, 92, 101, 85, 116, 9, 140, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112], [12, 88, 134, 84, 37, 93, 53, 115, 27, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 67 Cassage de contrainte 
> Cycle à casser : [12, 88, 134, 84, 37, 93, 53, 115, 27, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132]
> Taille du cycle à casser : 20
> Nouvelle contrainte : x[12,88] + x[88,134] + x[134,84] + x[84,37] + x[37,93] + x[93,53] + x[53,115] + x[115,27] + x[27,75] + x[75,117] + x[117,104] + x[104,135] + x[135,60] + x[60,59] + x[59,57] + x[57,58] + x[58,65] + x[65,95] + x[95,132] + x[132,12] ≤ 19
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 14) (5 -> 48) (6 -> 26) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 132) (13 -> 49) (14 -> 24) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 56) (26 -> 34) (27 -> 115) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 23) (33 -> 91) (34 -> 124) (35 -> 10) (36 -> 130) (37 -> 84) (38 -> 18) (39 -> 7) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 50) (44 -> 69) (45 -> 82) (46 -> 107) (47 -> 55) (48 -> 136) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 62) (53 -> 93) (54 -> 63) (55 -> 61) (56 -> 20) (57 -> 59) (58 -> 57) (59 -> 60) (60 -> 135) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 58) (66 -> 99) (67 -> 44) (68 -> 76) (69 -> 74) (70 -> 41) (71 -> 78) (72 -> 140) (73 -> 40) (74 -> 131) (75 -> 27) (76 -> 33) (77 -> 52) (78 -> 42) (79 -> 51) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 100) (84 -> 134) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 12) (89 -> 29) (90 -> 106) (91 -> 113) (92 -> 6) (93 -> 37) (94 -> 97) (95 -> 65) (96 -> 85) (97 -> 86) (98 -> 36) (99 -> 108) (100 -> 90) (101 -> 92) (102 -> 31) (103 -> 39) (104 -> 117) (105 -> 125) (106 -> 47) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 53) (116 -> 66) (117 -> 75) (118 -> 87) (119 -> 122) (120 -> 5) (121 -> 111) (122 -> 4) (123 -> 77) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 119) (132 -> 95) (133 -> 2) (134 -> 88) (135 -> 104) (136 -> 81) (137 -> 110) (138 -> 127) (139 -> 123) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 123, 77, 52, 62, 64, 21, 32, 23, 83, 100, 90, 106, 47, 55, 61, 67, 44, 69, 74, 131, 119, 122, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 111, 112], [2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 136, 81, 28, 128, 17, 46, 107, 133], [6, 26, 34, 124, 35, 10, 103, 39, 7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 125, 102, 31, 25, 56, 20, 72, 140, 9, 116, 66, 99, 108, 79, 51, 13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 86, 70, 41, 126, 16, 96, 85, 101, 92], [12, 132, 95, 65, 58, 57, 59, 60, 135, 104, 117, 75, 27, 115, 53, 93, 37, 84, 134, 88]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 68 Cassage de contrainte 
> Cycle à casser : [2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 136, 81, 28, 128, 17, 46, 107, 133]
> Taille du cycle à casser : 20
> Nouvelle contrainte : x[2,3] + x[3,89] + x[89,29] + x[29,71] + x[71,78] + x[78,42] + x[42,118] + x[118,87] + x[87,120] + x[120,5] + x[5,48] + x[48,136] + x[136,81] + x[81,28] + x[28,128] + x[128,17] + x[17,46] + x[46,107] + x[107,133] + x[133,2] ≤ 19
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 133) (3 -> 2) (4 -> 14) (5 -> 120) (6 -> 92) (7 -> 138) (8 -> 121) (9 -> 140) (10 -> 103) (11 -> 75) (12 -> 88) (13 -> 49) (14 -> 24) (15 -> 113) (16 -> 96) (17 -> 128) (18 -> 80) (19 -> 139) (20 -> 56) (21 -> 32) (22 -> 43) (23 -> 83) (24 -> 137) (25 -> 31) (26 -> 34) (27 -> 51) (28 -> 81) (29 -> 89) (30 -> 19) (31 -> 102) (32 -> 23) (33 -> 76) (34 -> 124) (35 -> 10) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 7) (40 -> 38) (41 -> 126) (42 -> 78) (43 -> 50) (44 -> 69) (45 -> 15) (46 -> 17) (47 -> 55) (48 -> 5) (49 -> 98) (50 -> 54) (51 -> 79) (52 -> 62) (53 -> 115) (54 -> 63) (55 -> 61) (56 -> 25) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 67) (62 -> 64) (63 -> 129) (64 -> 21) (65 -> 95) (66 -> 6) (67 -> 44) (68 -> 109) (69 -> 74) (70 -> 41) (71 -> 29) (72 -> 20) (73 -> 40) (74 -> 131) (75 -> 117) (76 -> 68) (77 -> 52) (78 -> 71) (79 -> 108) (80 -> 8) (81 -> 136) (82 -> 45) (83 -> 100) (84 -> 37) (85 -> 116) (86 -> 70) (87 -> 118) (88 -> 134) (89 -> 3) (90 -> 106) (91 -> 33) (92 -> 101) (93 -> 53) (94 -> 97) (95 -> 132) (96 -> 13) (97 -> 86) (98 -> 36) (99 -> 66) (100 -> 90) (101 -> 85) (102 -> 125) (103 -> 39) (104 -> 135) (105 -> 82) (106 -> 47) (107 -> 46) (108 -> 99) (109 -> 11) (110 -> 73) (111 -> 112) (112 -> 1) (113 -> 91) (114 -> 22) (115 -> 27) (116 -> 9) (117 -> 104) (118 -> 42) (119 -> 122) (120 -> 87) (121 -> 111) (122 -> 4) (123 -> 77) (124 -> 35) (125 -> 105) (126 -> 16) (127 -> 72) (128 -> 28) (129 -> 94) (130 -> 114) (131 -> 119) (132 -> 12) (133 -> 107) (134 -> 84) (135 -> 60) (136 -> 48) (137 -> 110) (138 -> 127) (139 -> 123) (140 -> 26) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 123, 77, 52, 62, 64, 21, 32, 23, 83, 100, 90, 106, 47, 55, 61, 67, 44, 69, 74, 131, 119, 122, 4, 14, 24, 137, 110, 73, 40, 38, 18, 80, 8, 121, 111, 112], [2, 133, 107, 46, 17, 128, 28, 81, 136, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3], [6, 92, 101, 85, 116, 9, 140, 26, 34, 124, 35, 10, 103, 39, 7, 138, 127, 72, 20, 56, 25, 31, 102, 125, 105, 82, 45, 15, 113, 91, 33, 76, 68, 109, 11, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 53, 115, 27, 51, 79, 108, 99, 66], [13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 86, 70, 41, 126, 16, 96]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 69 Cassage de contrainte 
> Cycle à casser : [2, 133, 107, 46, 17, 128, 28, 81, 136, 48, 5, 120, 87, 118, 42, 78, 71, 29, 89, 3]
> Taille du cycle à casser : 20
> Nouvelle contrainte : x[2,133] + x[133,107] + x[107,46] + x[46,17] + x[17,128] + x[128,28] + x[28,81] + x[81,136] + x[136,48] + x[48,5] + x[5,120] + x[120,87] + x[87,118] + x[118,42] + x[42,78] + x[78,71] + x[71,29] + x[29,89] + x[89,3] + x[3,2] ≤ 19
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 141.0
   Permutations :
(1 -> 30) (2 -> 3) (3 -> 89) (4 -> 122) (5 -> 48) (6 -> 66) (7 -> 138) (8 -> 121) (9 -> 116) (10 -> 103) (11 -> 109) (12 -> 88) (13 -> 49) (14 -> 4) (15 -> 45) (16 -> 96) (17 -> 46) (18 -> 80) (19 -> 139) (20 -> 72) (21 -> 64) (22 -> 43) (23 -> 32) (24 -> 14) (25 -> 56) (26 -> 34) (27 -> 75) (28 -> 128) (29 -> 71) (30 -> 19) (31 -> 25) (32 -> 21) (33 -> 91) (34 -> 124) (35 -> 73) (36 -> 130) (37 -> 93) (38 -> 18) (39 -> 7) (40 -> 38) (41 -> 126) (42 -> 118) (43 -> 50) (44 -> 67) (45 -> 82) (46 -> 107) (47 -> 106) (48 -> 26) (49 -> 98) (50 -> 54) (51 -> 13) (52 -> 77) (53 -> 115) (54 -> 63) (55 -> 47) (56 -> 20) (57 -> 58) (58 -> 65) (59 -> 57) (60 -> 59) (61 -> 55) (62 -> 52) (63 -> 129) (64 -> 62) (65 -> 95) (66 -> 99) (67 -> 61) (68 -> 76) (69 -> 44) (70 -> 41) (71 -> 78) (72 -> 40) (73 -> 110) (74 -> 69) (75 -> 117) (76 -> 33) (77 -> 123) (78 -> 42) (79 -> 51) (80 -> 8) (81 -> 28) (82 -> 105) (83 -> 23) (84 -> 37) (85 -> 101) (86 -> 70) (87 -> 120) (88 -> 134) (89 -> 29) (90 -> 100) (91 -> 113) (92 -> 6) (93 -> 140) (94 -> 97) (95 -> 132) (96 -> 10) (97 -> 86) (98 -> 36) (99 -> 108) (100 -> 83) (101 -> 92) (102 -> 31) (103 -> 39) (104 -> 135) (105 -> 125) (106 -> 90) (107 -> 133) (108 -> 79) (109 -> 68) (110 -> 137) (111 -> 112) (112 -> 1) (113 -> 15) (114 -> 22) (115 -> 27) (116 -> 85) (117 -> 104) (118 -> 87) (119 -> 131) (120 -> 5) (121 -> 111) (122 -> 119) (123 -> 53) (124 -> 35) (125 -> 102) (126 -> 16) (127 -> 11) (128 -> 17) (129 -> 94) (130 -> 114) (131 -> 74) (132 -> 12) (133 -> 2) (134 -> 84) (135 -> 60) (136 -> 81) (137 -> 24) (138 -> 127) (139 -> 136) (140 -> 9) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 30, 19, 139, 136, 81, 28, 128, 17, 46, 107, 133, 2, 3, 89, 29, 71, 78, 42, 118, 87, 120, 5, 48, 26, 34, 124, 35, 73, 110, 137, 24, 14, 4, 122, 119, 131, 74, 69, 44, 67, 61, 55, 47, 106, 90, 100, 83, 23, 32, 21, 64, 62, 52, 77, 123, 53, 115, 27, 75, 117, 104, 135, 60, 59, 57, 58, 65, 95, 132, 12, 88, 134, 84, 37, 93, 140, 9, 116, 85, 101, 92, 6, 66, 99, 108, 79, 51, 13, 49, 98, 36, 130, 114, 22, 43, 50, 54, 63, 129, 94, 97, 86, 70, 41, 126, 16, 96, 10, 103, 39, 7, 138, 127, 11, 109, 68, 76, 33, 91, 113, 15, 45, 82, 105, 125, 102, 31, 25, 56, 20, 72, 40, 38, 18, 80, 8, 121, 111, 112]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 141.0
> Nombre d'itération nécéssaires : 70
> Nombre de contraintes ajoutées : 69
> Ordre de parcours des drônes : 
1 -> 30 -> 19 -> 139 -> 136 -> 81 -> 28 -> 128 -> 17 -> 46 -> 107 -> 133 -> 2 -> 3 -> 89 -> 29 -> 71 -> 78 -> 42 -> 118 -> 87 -> 120 -> 5 -> 48 -> 26 -> 34 -> 124 -> 35 -> 73 -> 110 -> 137 -> 24 -> 14 -> 4 -> 122 -> 119 -> 131 -> 74 -> 69 -> 44 -> 67 -> 61 -> 55 -> 47 -> 106 -> 90 -> 100 -> 83 -> 23 -> 32 -> 21 -> 64 -> 62 -> 52 -> 77 -> 123 -> 53 -> 115 -> 27 -> 75 -> 117 -> 104 -> 135 -> 60 -> 59 -> 57 -> 58 -> 65 -> 95 -> 132 -> 12 -> 88 -> 134 -> 84 -> 37 -> 93 -> 140 -> 9 -> 116 -> 85 -> 101 -> 92 -> 6 -> 66 -> 99 -> 108 -> 79 -> 51 -> 13 -> 49 -> 98 -> 36 -> 130 -> 114 -> 22 -> 43 -> 50 -> 54 -> 63 -> 129 -> 94 -> 97 -> 86 -> 70 -> 41 -> 126 -> 16 -> 96 -> 10 -> 103 -> 39 -> 7 -> 138 -> 127 -> 11 -> 109 -> 68 -> 76 -> 33 -> 91 -> 113 -> 15 -> 45 -> 82 -> 105 -> 125 -> 102 -> 31 -> 25 -> 56 -> 20 -> 72 -> 40 -> 38 -> 18 -> 80 -> 8 -> 121 -> 111 -> 112 -> 1. 
