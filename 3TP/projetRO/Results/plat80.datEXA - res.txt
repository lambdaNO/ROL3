Résolution exacte pour plat/plat80.dat points à visiter :
Résolution d'initiale :  
> temps total = 146.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 13) (6 -> 65) (7 -> 59) (8 -> 3) (9 -> 2) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 61) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 58) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 80) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 21) (62 -> 67) (63 -> 39) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 31) (80 -> 77) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18], [2, 9], [3, 8], [4, 69], [5, 13, 54, 71, 20, 57, 80, 77, 50, 15, 66, 6, 65, 41, 61, 21], [7, 59], [10, 47], [11, 46], [12, 16], [14, 32], [17, 34], [19, 64], [22, 55], [23, 38], [24, 60], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [31, 79], [35, 56], [39, 63], [40, 74], [43, 73], [44, 52], [45, 68], [48, 58], [53, 75], [62, 67], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 33
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 18]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[1,18] + x[18,1] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 147.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 3) (9 -> 2) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 71) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 61) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 13) (55 -> 22) (56 -> 35) (57 -> 80) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 39) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 48) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 11, 46, 24, 60, 77, 50, 15, 66, 6, 65, 41, 61, 21, 5, 18], [2, 9], [3, 8], [4, 69], [7, 59], [12, 16], [13, 54], [14, 32], [17, 34], [19, 64], [20, 71], [22, 55], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [35, 56], [39, 63], [40, 74], [43, 73], [44, 52], [45, 68], [53, 75], [57, 80], [62, 67], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 30

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [2, 9]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[2,9] + x[9,2] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 148.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 21) (6 -> 66) (7 -> 59) (8 -> 3) (9 -> 56) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 50) (16 -> 12) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 22) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 80) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 41) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 21, 61, 41, 65, 6, 66, 15, 50, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [2, 9, 56, 35, 22, 55, 71, 20, 4, 69, 62, 67, 39, 63], [3, 8], [7, 59], [12, 16], [13, 54], [14, 32], [17, 34], [19, 64], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [45, 68], [53, 75], [57, 80], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 24

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [3, 8]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[3,8] + x[8,3] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 70) (4 -> 69) (5 -> 21) (6 -> 66) (7 -> 59) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 50) (16 -> 12) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 57) (21 -> 61) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 22) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 8) (62 -> 67) (63 -> 39) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 20) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 77) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 21, 61, 8, 3, 70, 72, 9, 2, 63, 39, 80, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [4, 69], [6, 66], [7, 59], [12, 16], [13, 54], [14, 32], [15, 50], [17, 34], [19, 64], [20, 57, 22, 55, 71], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [41, 65], [43, 73], [44, 52], [45, 68], [53, 75], [62, 67], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 27

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [4, 69]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,69] + x[69,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 150.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 72) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 4) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 22) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 3) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 48) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 11, 46, 24, 60, 77, 50, 15, 66, 6, 65, 41, 80, 57, 22, 55, 71, 20, 4, 69, 62, 67, 39, 63, 2, 9, 72, 70, 3, 8, 61, 21, 5, 18], [7, 59], [12, 16], [13, 54], [14, 32], [17, 34], [19, 64], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [43, 73], [44, 52], [45, 68], [53, 75], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 21

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [7, 59]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[7,59] + x[59,7] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 153.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 66) (7 -> 75) (8 -> 61) (9 -> 72) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 50) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 4) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 22) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 3) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 80) (78 -> 76) (79 -> 48) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 11, 46, 24, 60, 77, 80, 57, 22, 55, 71, 20, 4, 69, 62, 67, 39, 63, 2, 9, 72, 70, 3, 8, 61, 21, 5, 18], [6, 66], [7, 75, 53, 59], [12, 16], [13, 54], [14, 32], [15, 50], [17, 34], [19, 64], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [41, 65], [43, 73], [44, 52], [45, 68], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 23

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [6, 66]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,66] + x[66,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 153.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 65) (7 -> 75) (8 -> 61) (9 -> 72) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 4) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 22) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 3) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 48) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 11, 46, 24, 60, 77, 50, 15, 66, 6, 65, 41, 80, 57, 22, 55, 71, 20, 4, 69, 62, 67, 39, 63, 2, 9, 72, 70, 3, 8, 61, 21, 5, 18], [7, 75, 53, 59], [12, 16], [13, 54], [14, 32], [17, 34], [19, 64], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [43, 73], [44, 52], [45, 68], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [12, 16]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[12,16] + x[16,12] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 70) (4 -> 20) (5 -> 21) (6 -> 66) (7 -> 1) (8 -> 3) (9 -> 2) (10 -> 47) (11 -> 46) (12 -> 67) (13 -> 54) (14 -> 32) (15 -> 16) (16 -> 12) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 71) (21 -> 61) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 41) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 58) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 13) (55 -> 22) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 8) (62 -> 69) (63 -> 39) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 49) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 59) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 31) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 21, 61, 8, 3, 70, 72, 9, 2, 63, 39, 80, 57, 53, 75, 59, 7], [4, 20, 71, 49, 27, 41, 65, 6, 66, 15, 16, 12, 67, 62, 69], [10, 47], [11, 46], [13, 54], [14, 32], [17, 34], [19, 64], [22, 55], [23, 38], [24, 60], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [31, 79], [35, 56], [40, 74], [43, 73], [44, 52], [45, 68], [48, 58], [50, 77], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [10, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[10,47] + x[47,10] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 72) (10 -> 47) (11 -> 46) (12 -> 67) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 71) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 41) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 57) (54 -> 13) (55 -> 22) (56 -> 35) (57 -> 53) (58 -> 16) (59 -> 75) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 3) (71 -> 49) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 48) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 16, 12, 67, 62, 69, 4, 20, 71, 49, 27, 41, 80, 39, 63, 2, 9, 72, 70, 3, 8, 61, 21, 5, 18], [6, 65], [7, 59, 75], [11, 46], [13, 54], [14, 32], [15, 66], [17, 34], [19, 64], [22, 55], [23, 38], [24, 60], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [43, 73], [44, 52], [45, 68], [50, 77], [53, 57], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 25

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [6, 65]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[6,65] + x[65,6] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 159.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 70) (4 -> 69) (5 -> 21) (6 -> 65) (7 -> 75) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 58) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 4) (21 -> 61) (22 -> 57) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 27) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 71) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 22) (56 -> 35) (57 -> 20) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 8) (62 -> 67) (63 -> 39) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 12) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 55) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 31) (80 -> 77) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 21, 61, 8, 3, 70, 72, 9, 2, 63, 39, 80, 77, 50, 15, 66, 6, 65, 41, 27, 49, 71, 55, 22, 57, 20, 4, 69, 62, 67, 12, 16, 58, 48, 79, 31, 47, 10], [7, 75, 53, 59], [11, 46], [13, 54], [14, 32], [17, 34], [19, 64], [23, 38], [24, 60], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [43, 73], [44, 52], [45, 68], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 20

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [11, 46]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[11,46] + x[46,11] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 160.0
   Permutations :
(1 -> 10) (2 -> 63) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 66) (7 -> 75) (8 -> 61) (9 -> 2) (10 -> 40) (11 -> 58) (12 -> 67) (13 -> 54) (14 -> 3) (15 -> 50) (16 -> 12) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 5) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 41) (28 -> 42) (29 -> 37) (30 -> 32) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 31) (48 -> 79) (49 -> 27) (50 -> 35) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 71) (56 -> 9) (57 -> 22) (58 -> 16) (59 -> 7) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 39) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 49) (72 -> 70) (73 -> 43) (74 -> 36) (75 -> 53) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 48) (80 -> 77) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 32, 14, 3, 8, 61, 21, 5, 18], [2, 63, 39, 80, 77, 60, 24, 46, 11, 58, 16, 12, 67, 62, 69, 4, 20, 57, 22, 55, 71, 49, 27, 41, 65, 6, 66, 15, 50, 35, 56, 9], [7, 75, 53, 59], [13, 54], [17, 34], [19, 64], [23, 38], [25, 51], [26, 33], [28, 42], [29, 37], [31, 47], [43, 73], [44, 52], [45, 68], [48, 79], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 18

Itération n° 11 Cassage de contrainte 
> Cycle à casser : [13, 54]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[13,54] + x[54,13] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 161.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 8) (7 -> 75) (8 -> 3) (9 -> 56) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 58) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 4) (21 -> 61) (22 -> 57) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 30) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 74) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 10) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 79) (49 -> 27) (50 -> 15) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 12) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 55) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 80) (78 -> 76) (79 -> 48) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 55, 22, 57, 20, 4, 69, 62, 67, 12, 16, 58, 11, 46, 24, 60, 77, 80, 39, 63, 2, 9, 56, 35, 50, 15, 66, 6, 8, 3, 14, 32, 30, 36, 74, 40, 10], [7, 75, 53, 59], [17, 34], [19, 64], [21, 61], [23, 38], [25, 51], [26, 33], [27, 49], [28, 42], [29, 37], [31, 47], [41, 65], [43, 73], [44, 52], [45, 68], [48, 79], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 19

Itération n° 12 Cassage de contrainte 
> Cycle à casser : [17, 34]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[17,34] + x[34,17] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 161.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 56) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 32) (18 -> 5) (19 -> 64) (20 -> 57) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 75) (54 -> 71) (55 -> 68) (56 -> 35) (57 -> 22) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 49) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 32, 14, 3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63, 2, 9, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [7, 59, 53, 75], [19, 64], [23, 38], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 13 Cassage de contrainte 
> Cycle à casser : [19, 64]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,64] + x[64,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 165.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 8) (7 -> 59) (8 -> 3) (9 -> 56) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 17) (33 -> 26) (34 -> 27) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 64) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 57) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 80) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 21) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 12) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 20, 4, 69, 62, 67, 12, 16, 15, 66, 6, 8, 3, 14, 32, 17, 34, 27, 49, 64, 19, 75, 7, 59, 53, 57, 80, 39, 63, 2, 9, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [21, 61], [22, 55], [23, 38], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [41, 65], [43, 73], [44, 52], [45, 68], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 16

Itération n° 14 Cassage de contrainte 
> Cycle à casser : [21, 61]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[21,61] + x[61,21] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 165.0
   Permutations :
(1 -> 10) (2 -> 63) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 75) (8 -> 61) (9 -> 2) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 32) (18 -> 1) (19 -> 64) (20 -> 4) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 27) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 71) (50 -> 35) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 22) (56 -> 9) (57 -> 53) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 39) (64 -> 49) (65 -> 41) (66 -> 6) (67 -> 12) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 54) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 48) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 9, 2, 63, 39, 80, 57, 53, 59, 7, 75, 19, 64, 49, 71, 54, 13, 5, 18], [3, 8, 61, 21, 67, 12, 16, 15, 66, 6, 65, 41, 27, 34, 17, 32, 14], [4, 20], [22, 55], [23, 38], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [45, 68], [62, 69], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 17

Itération n° 15 Cassage de contrainte 
> Cycle à casser : [4, 20]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[4,20] + x[20,4] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 165.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 65) (7 -> 59) (8 -> 3) (9 -> 56) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 17) (33 -> 26) (34 -> 27) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 64) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 57) (54 -> 71) (55 -> 68) (56 -> 35) (57 -> 22) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 8) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 21) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 20) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 20, 4, 69, 62, 67, 21, 61, 8, 3, 14, 32, 17, 34, 27, 49, 64, 19, 75, 7, 59, 53, 57, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63, 2, 9, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [23, 38], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 16 Cassage de contrainte 
> Cycle à casser : [23, 38]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[23,38] + x[38,23] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 166.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 66) (7 -> 48) (8 -> 61) (9 -> 2) (10 -> 1) (11 -> 58) (12 -> 45) (13 -> 54) (14 -> 3) (15 -> 50) (16 -> 12) (17 -> 32) (18 -> 5) (19 -> 75) (20 -> 57) (21 -> 67) (22 -> 35) (23 -> 64) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 9) (57 -> 53) (58 -> 16) (59 -> 7) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 39) (64 -> 38) (65 -> 6) (66 -> 15) (67 -> 62) (68 -> 55) (69 -> 4) (70 -> 72) (71 -> 49) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 32, 14, 3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 53, 59, 7, 48, 79, 31, 47, 10], [2, 63, 39, 80, 41, 65, 6, 66, 15, 50, 77, 60, 24, 46, 11, 58, 16, 12, 45, 68, 55, 22, 35, 56, 9], [19, 75], [23, 64, 38], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 14

Itération n° 17 Cassage de contrainte 
> Cycle à casser : [19, 75]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[19,75] + x[75,19] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 166.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 65) (7 -> 59) (8 -> 3) (9 -> 56) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 32) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 64) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 17) (33 -> 26) (34 -> 27) (35 -> 22) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 10) (48 -> 79) (49 -> 50) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 57) (54 -> 71) (55 -> 68) (56 -> 35) (57 -> 20) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 8) (62 -> 67) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 21) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 38) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 38, 23, 64, 19, 75, 7, 59, 53, 57, 20, 4, 69, 62, 67, 21, 61, 8, 3, 14, 32, 17, 34, 27, 49, 50, 77, 60, 24, 46, 11, 58, 48, 79, 31, 47, 10], [2, 9, 56, 35, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63], [25, 51], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [44, 52], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 12

Itération n° 18 Cassage de contrainte 
> Cycle à casser : [25, 51]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[25,51] + x[51,25] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 169.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 66) (7 -> 48) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 45) (13 -> 54) (14 -> 32) (15 -> 16) (16 -> 12) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 57) (23 -> 64) (24 -> 52) (25 -> 79) (26 -> 33) (27 -> 49) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 27) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 28) (43 -> 73) (44 -> 17) (45 -> 68) (46 -> 24) (47 -> 10) (48 -> 58) (49 -> 50) (50 -> 35) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 9) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 8) (62 -> 67) (63 -> 39) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 21) (68 -> 55) (69 -> 62) (70 -> 72) (71 -> 38) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 38, 23, 64, 19, 75, 53, 59, 7, 48, 58, 11, 46, 24, 52, 44, 17, 34, 27, 49, 50, 35, 56, 9, 2, 63, 39, 80, 41, 65, 6, 66, 15, 16, 12, 45, 68, 55, 22, 57, 20, 4, 69, 62, 67, 21, 61, 8, 3, 14, 32, 51, 25, 79, 31, 47, 10], [26, 33], [28, 42], [29, 37], [30, 36], [40, 74], [43, 73], [60, 77], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 10

Itération n° 19 Cassage de contrainte 
> Cycle à casser : [26, 33]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,33] + x[33,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 169.99999999999997
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 75) (8 -> 61) (9 -> 72) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 32) (18 -> 5) (19 -> 64) (20 -> 57) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 79) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 14) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 10) (48 -> 33) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 68) (71 -> 49) (72 -> 70) (73 -> 60) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 32, 51, 25, 79, 31, 47, 10], [2, 9, 72, 70, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63], [3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 53, 59, 7, 75, 19, 64, 23, 38, 14], [11, 58, 48, 33, 26, 43, 73, 60, 24, 46], [22, 55], [28, 42], [29, 37], [30, 36], [35, 56], [40, 74], [44, 52], [50, 77], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 13

Itération n° 20 Cassage de contrainte 
> Cycle à casser : [22, 55]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[22,55] + x[55,22] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 170.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 75) (8 -> 61) (9 -> 56) (10 -> 47) (11 -> 58) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 22) (36 -> 30) (37 -> 29) (38 -> 71) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 31) (48 -> 33) (49 -> 27) (50 -> 49) (51 -> 32) (52 -> 24) (53 -> 59) (54 -> 13) (55 -> 68) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 54) (72 -> 70) (73 -> 60) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 25, 51, 32, 14, 3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 53, 59, 7, 75, 19, 64, 23, 38, 71, 54, 13, 5, 18], [2, 9, 56, 35, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63], [11, 58, 48, 33, 26, 43, 73, 60, 77, 50, 49, 27, 34, 17, 44, 52, 24, 46], [28, 42], [29, 37], [30, 36], [40, 74], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 9

Itération n° 21 Cassage de contrainte 
> Cycle à casser : [28, 42]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[28,42] + x[42,28] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 171.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 1) (8 -> 61) (9 -> 2) (10 -> 47) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 57) (21 -> 42) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 27) (35 -> 56) (36 -> 74) (37 -> 29) (38 -> 23) (39 -> 67) (40 -> 10) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 17) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 52) (50 -> 35) (51 -> 32) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 68) (56 -> 9) (57 -> 22) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 30) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 38) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 38, 23, 64, 19, 75, 53, 59, 7], [2, 63, 30, 36, 74, 40, 10, 47, 31, 79, 25, 51, 32, 14, 3, 8, 61, 21, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 9], [4, 20, 57, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 62, 69], [17, 34, 27, 49, 52, 44], [29, 37], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 22 Cassage de contrainte 
> Cycle à casser : [29, 37]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[29,37] + x[37,29] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 172.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 56) (10 -> 47) (11 -> 58) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 7) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 71) (39 -> 63) (40 -> 74) (41 -> 80) (42 -> 37) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 31) (48 -> 33) (49 -> 27) (50 -> 77) (51 -> 32) (52 -> 49) (53 -> 75) (54 -> 13) (55 -> 68) (56 -> 35) (57 -> 22) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 54) (72 -> 70) (73 -> 28) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 60) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 47, 31, 79, 25, 51, 32, 14, 3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 63, 2, 9, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29, 7, 59, 53, 75, 19, 64, 23, 38, 71, 54, 13, 5, 18], [17, 44, 52, 49, 27, 34], [30, 36], [40, 74], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 23 Cassage de contrainte 
> Cycle à casser : [30, 36]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[30,36] + x[36,30] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 173.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 29) (8 -> 61) (9 -> 56) (10 -> 40) (11 -> 58) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 46) (22 -> 55) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 63) (31 -> 47) (32 -> 14) (33 -> 75) (34 -> 17) (35 -> 22) (36 -> 30) (37 -> 42) (38 -> 71) (39 -> 67) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 31) (48 -> 79) (49 -> 27) (50 -> 49) (51 -> 32) (52 -> 24) (53 -> 59) (54 -> 13) (55 -> 68) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 54) (72 -> 70) (73 -> 43) (74 -> 36) (75 -> 19) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 56, 35, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 62, 69, 4, 20, 57, 53, 59, 7, 29, 37, 42, 28, 73, 43, 26, 33, 75, 19, 64, 23, 38, 71, 54, 13, 5, 18], [3, 8, 61, 21, 46, 11, 58, 48, 79, 25, 51, 32, 14], [17, 44, 52, 24, 60, 77, 50, 49, 27, 34], [31, 47], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 6

Itération n° 24 Cassage de contrainte 
> Cycle à casser : [31, 47]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[31,47] + x[47,31] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 174.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 8) (4 -> 69) (5 -> 13) (6 -> 66) (7 -> 1) (8 -> 61) (9 -> 2) (10 -> 47) (11 -> 58) (12 -> 45) (13 -> 54) (14 -> 38) (15 -> 16) (16 -> 12) (17 -> 44) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 46) (22 -> 57) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 3) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 26) (34 -> 17) (35 -> 56) (36 -> 74) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 10) (41 -> 65) (42 -> 37) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 31) (48 -> 33) (49 -> 27) (50 -> 35) (51 -> 32) (52 -> 24) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 9) (57 -> 20) (58 -> 48) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 30) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 39) (68 -> 55) (69 -> 62) (70 -> 72) (71 -> 49) (72 -> 70) (73 -> 28) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 44, 52, 24, 60, 77, 50, 35, 56, 9, 2, 63, 30, 36, 74, 40, 10, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 53, 59, 7], [3, 8, 61, 21, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29], [4, 69, 62, 67, 39, 80, 41, 65, 6, 66, 15, 16, 12, 45, 68, 55, 22, 57, 20], [70, 72], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 25 Cassage de contrainte 
> Cycle à casser : [70, 72]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[70,72] + x[72,70] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 175.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 29) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 46) (12 -> 16) (13 -> 5) (14 -> 38) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 75) (20 -> 57) (21 -> 67) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 63) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 42) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 27) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 71) (50 -> 35) (51 -> 32) (52 -> 49) (53 -> 59) (54 -> 13) (55 -> 68) (56 -> 47) (57 -> 22) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 3) (71 -> 54) (72 -> 70) (73 -> 43) (74 -> 36) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 72, 70, 3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 27, 34, 17, 44, 52, 49, 71, 54, 13, 5, 18], [7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 53, 59], [39, 80], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 26 Cassage de contrainte 
> Cycle à casser : [39, 80]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,80] + x[80,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 175.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 14) (4 -> 20) (5 -> 21) (6 -> 66) (7 -> 1) (8 -> 3) (9 -> 2) (10 -> 40) (11 -> 58) (12 -> 45) (13 -> 5) (14 -> 38) (15 -> 16) (16 -> 12) (17 -> 34) (18 -> 60) (19 -> 75) (20 -> 57) (21 -> 61) (22 -> 55) (23 -> 64) (24 -> 46) (25 -> 79) (26 -> 43) (27 -> 49) (28 -> 42) (29 -> 67) (30 -> 32) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 27) (35 -> 56) (36 -> 30) (37 -> 29) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 65) (42 -> 37) (43 -> 73) (44 -> 17) (45 -> 68) (46 -> 11) (47 -> 10) (48 -> 33) (49 -> 52) (50 -> 77) (51 -> 25) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 71) (56 -> 35) (57 -> 22) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 8) (62 -> 69) (63 -> 39) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 62) (68 -> 70) (69 -> 4) (70 -> 72) (71 -> 54) (72 -> 9) (73 -> 28) (74 -> 36) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 31) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 60, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29, 67, 62, 69, 4, 20, 57, 22, 55, 71, 54, 13, 5, 21, 61, 8, 3, 14, 38, 23, 64, 19, 75, 53, 59, 7], [2, 63, 39, 80, 41, 65, 6, 66, 15, 16, 12, 45, 68, 70, 72, 9], [10, 40, 74, 36, 30, 32, 51, 25, 79, 31, 47], [17, 34, 27, 49, 52, 44], [35, 56], [50, 77], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 7

Itération n° 27 Cassage de contrainte 
> Cycle à casser : [35, 56]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[35,56] + x[56,35] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 175.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 8) (4 -> 69) (5 -> 13) (6 -> 66) (7 -> 29) (8 -> 61) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 45) (13 -> 54) (14 -> 3) (15 -> 16) (16 -> 12) (17 -> 44) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 55) (22 -> 57) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 23) (39 -> 80) (40 -> 10) (41 -> 65) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 35) (51 -> 32) (52 -> 49) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 47) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 67) (63 -> 30) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 39) (68 -> 70) (69 -> 62) (70 -> 72) (71 -> 38) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 78) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 38, 23, 64, 19, 75, 53, 59, 7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 3, 8, 61, 21, 55, 22, 57, 20, 4, 69, 62, 67, 39, 80, 41, 65, 6, 66, 15, 16, 12, 45, 68, 70, 72, 9, 2, 63, 30, 36, 74, 40, 10], [17, 44, 52, 49, 27, 34], [76, 78]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 28 Cassage de contrainte 
> Cycle à casser : [76, 78]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[76,78] + x[78,76] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 58) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 71) (21 -> 55) (22 -> 76) (23 -> 38) (24 -> 46) (25 -> 79) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 7) (30 -> 32) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 14) (39 -> 67) (40 -> 74) (41 -> 80) (42 -> 37) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 56) (48 -> 33) (49 -> 27) (50 -> 49) (51 -> 25) (52 -> 24) (53 -> 57) (54 -> 13) (55 -> 22) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 75) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 68) (71 -> 54) (72 -> 70) (73 -> 28) (74 -> 36) (75 -> 19) (76 -> 78) (77 -> 60) (78 -> 63) (79 -> 31) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 32, 51, 25, 79, 31, 47, 56, 35, 50, 49, 27, 34, 17, 44, 52, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29, 7, 59, 75, 19, 64, 23, 38, 14, 3, 8, 61, 21, 55, 22, 76, 78, 63, 2, 9, 72, 70, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 62, 69, 4, 20, 71, 54, 13, 5, 18], [53, 57], [60, 77]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 29 Cassage de contrainte 
> Cycle à casser : [53, 57]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[53,57] + x[57,53] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 29) (8 -> 61) (9 -> 72) (10 -> 1) (11 -> 58) (12 -> 16) (13 -> 54) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 57) (21 -> 67) (22 -> 76) (23 -> 38) (24 -> 46) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 47) (32 -> 30) (33 -> 75) (34 -> 27) (35 -> 50) (36 -> 74) (37 -> 42) (38 -> 14) (39 -> 31) (40 -> 10) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 17) (45 -> 12) (46 -> 11) (47 -> 56) (48 -> 79) (49 -> 52) (50 -> 77) (51 -> 32) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 53) (58 -> 48) (59 -> 7) (60 -> 24) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 68) (71 -> 55) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 19) (76 -> 78) (77 -> 60) (78 -> 63) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 55, 22, 76, 78, 63, 2, 9, 72, 70, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 31, 47, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 79, 25, 51, 32, 30, 36, 74, 40, 10], [3, 8, 61, 21, 67, 62, 69, 4, 20, 57, 53, 59, 7, 29, 37, 42, 28, 73, 43, 26, 33, 75, 19, 64, 23, 38, 14], [17, 34, 27, 49, 52, 44]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 30 Cassage de contrainte 
> Cycle à casser : [17, 34, 27, 49, 52, 44]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[17,34] + x[34,27] + x[27,49] + x[49,52] + x[52,44] + x[44,17] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 70) (4 -> 69) (5 -> 13) (6 -> 65) (7 -> 29) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 38) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 57) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 23) (39 -> 67) (40 -> 10) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 35) (51 -> 32) (52 -> 49) (53 -> 59) (54 -> 71) (55 -> 68) (56 -> 47) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 8) (62 -> 78) (63 -> 30) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 21) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 55) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 22) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 21, 61, 8, 3, 70, 72, 9, 2, 63, 30, 36, 74, 40, 10], [4, 69, 62, 78, 76, 22, 57, 20], [7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 53, 59], [17, 44, 52, 49, 27, 34]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 31 Cassage de contrainte 
> Cycle à casser : [17, 44, 52, 49, 27, 34]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[17,44] + x[44,52] + x[52,49] + x[49,27] + x[27,34] + x[34,17] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 29) (8 -> 61) (9 -> 72) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 5) (19 -> 64) (20 -> 57) (21 -> 19) (22 -> 76) (23 -> 38) (24 -> 52) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 30) (33 -> 48) (34 -> 27) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 14) (39 -> 67) (40 -> 10) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 17) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 50) (50 -> 35) (51 -> 32) (52 -> 44) (53 -> 75) (54 -> 71) (55 -> 22) (56 -> 47) (57 -> 53) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 68) (71 -> 55) (72 -> 70) (73 -> 43) (74 -> 40) (75 -> 59) (76 -> 78) (77 -> 60) (78 -> 63) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 55, 22, 76, 78, 63, 2, 9, 72, 70, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 62, 69, 4, 20, 57, 53, 75, 59, 7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 52, 44, 17, 34, 27, 49, 50, 35, 56, 47, 31, 79, 25, 51, 32, 30, 36, 74, 40, 10], [3, 8, 61, 21, 19, 64, 23, 38, 14], [60, 77]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 32 Cassage de contrainte 
> Cycle à casser : [60, 77]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[60,77] + x[77,60] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 14) (4 -> 20) (5 -> 13) (6 -> 65) (7 -> 29) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 38) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 5) (19 -> 75) (20 -> 57) (21 -> 61) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 43) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 30) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 23) (39 -> 67) (40 -> 10) (41 -> 80) (42 -> 70) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 21) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 35) (51 -> 32) (52 -> 24) (53 -> 59) (54 -> 71) (55 -> 68) (56 -> 47) (57 -> 53) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 8) (62 -> 69) (63 -> 78) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 62) (68 -> 45) (69 -> 4) (70 -> 72) (71 -> 49) (72 -> 9) (73 -> 28) (74 -> 40) (75 -> 33) (76 -> 22) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 44, 52, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 30, 36, 74, 40, 10], [2, 63, 78, 76, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 62, 69, 4, 20, 57, 53, 59, 7, 29, 37, 42, 70, 72, 9], [3, 14, 38, 23, 64, 19, 75, 33, 48, 58, 11, 46, 21, 61, 8], [26, 43], [28, 73]]
> Nombre de cycle(s) trouvé(s) : 5

Itération n° 33 Cassage de contrainte 
> Cycle à casser : [26, 43]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[26,43] + x[43,26] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 65) (7 -> 59) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 58) (12 -> 16) (13 -> 5) (14 -> 32) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 4) (21 -> 67) (22 -> 55) (23 -> 38) (24 -> 46) (25 -> 79) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 7) (30 -> 63) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 14) (39 -> 80) (40 -> 74) (41 -> 27) (42 -> 37) (43 -> 73) (44 -> 52) (45 -> 12) (46 -> 11) (47 -> 56) (48 -> 33) (49 -> 71) (50 -> 77) (51 -> 25) (52 -> 49) (53 -> 75) (54 -> 13) (55 -> 68) (56 -> 35) (57 -> 20) (58 -> 48) (59 -> 53) (60 -> 24) (61 -> 21) (62 -> 78) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 3) (71 -> 54) (72 -> 70) (73 -> 28) (74 -> 36) (75 -> 19) (76 -> 22) (77 -> 60) (78 -> 76) (79 -> 31) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 72, 70, 3, 8, 61, 21, 67, 39, 80, 57, 20, 4, 69, 62, 78, 76, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 27, 34, 17, 44, 52, 49, 71, 54, 13, 5, 18], [7, 59, 53, 75, 19, 64, 23, 38, 14, 32, 51, 25, 79, 31, 47, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 34 Cassage de contrainte 
> Cycle à casser : [7, 59, 53, 75, 19, 64, 23, 38, 14, 32, 51, 25, 79, 31, 47, 56, 35, 50, 77, 60, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29]
> Taille du cycle à casser : 33
> Nouvelle contrainte : x[7,59] + x[59,53] + x[53,75] + x[75,19] + x[19,64] + x[64,23] + x[23,38] + x[38,14] + x[14,32] + x[32,51] + x[51,25] + x[25,79] + x[79,31] + x[31,47] + x[47,56] + x[56,35] + x[35,50] + x[50,77] + x[77,60] + x[60,24] + x[24,46] + x[46,11] + x[11,58] + x[58,48] + x[48,33] + x[33,26] + x[26,43] + x[43,73] + x[73,28] + x[28,42] + x[42,37] + x[37,29] + x[29,7] ≤ 32
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 13) (6 -> 66) (7 -> 59) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 58) (12 -> 45) (13 -> 54) (14 -> 32) (15 -> 16) (16 -> 12) (17 -> 44) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 5) (22 -> 76) (23 -> 38) (24 -> 46) (25 -> 79) (26 -> 43) (27 -> 34) (28 -> 42) (29 -> 7) (30 -> 63) (31 -> 47) (32 -> 51) (33 -> 26) (34 -> 17) (35 -> 50) (36 -> 30) (37 -> 29) (38 -> 14) (39 -> 67) (40 -> 74) (41 -> 65) (42 -> 37) (43 -> 73) (44 -> 52) (45 -> 68) (46 -> 11) (47 -> 56) (48 -> 33) (49 -> 27) (50 -> 77) (51 -> 25) (52 -> 24) (53 -> 75) (54 -> 71) (55 -> 22) (56 -> 35) (57 -> 80) (58 -> 48) (59 -> 53) (60 -> 18) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 6) (66 -> 15) (67 -> 39) (68 -> 55) (69 -> 4) (70 -> 3) (71 -> 49) (72 -> 70) (73 -> 28) (74 -> 36) (75 -> 19) (76 -> 78) (77 -> 60) (78 -> 62) (79 -> 31) (80 -> 41) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 72, 70, 3, 8, 61, 21, 5, 13, 54, 71, 49, 27, 34, 17, 44, 52, 24, 46, 11, 58, 48, 33, 26, 43, 73, 28, 42, 37, 29, 7, 59, 53, 75, 19, 64, 23, 38, 14, 32, 51, 25, 79, 31, 47, 56, 35, 50, 77, 60, 18], [4, 20, 57, 80, 41, 65, 6, 66, 15, 16, 12, 45, 68, 55, 22, 76, 78, 62, 69], [39, 67]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 35 Cassage de contrainte 
> Cycle à casser : [39, 67]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[39,67] + x[67,39] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 14) (4 -> 69) (5 -> 13) (6 -> 66) (7 -> 29) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 45) (13 -> 54) (14 -> 38) (15 -> 16) (16 -> 12) (17 -> 34) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 41) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 30) (33 -> 48) (34 -> 27) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 23) (39 -> 80) (40 -> 10) (41 -> 65) (42 -> 28) (43 -> 26) (44 -> 17) (45 -> 68) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 52) (50 -> 35) (51 -> 32) (52 -> 44) (53 -> 59) (54 -> 71) (55 -> 21) (56 -> 47) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 8) (62 -> 67) (63 -> 78) (64 -> 19) (65 -> 6) (66 -> 15) (67 -> 39) (68 -> 70) (69 -> 62) (70 -> 72) (71 -> 49) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 53) (76 -> 22) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 52, 44, 17, 34, 27, 41, 65, 6, 66, 15, 16, 12, 45, 68, 70, 72, 9, 2, 63, 78, 76, 22, 55, 21, 61, 8, 3, 14, 38, 23, 64, 19, 75, 53, 59, 7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 30, 36, 74, 40, 10], [4, 69, 62, 67, 39, 80, 57, 20]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 36 Cassage de contrainte 
> Cycle à casser : [4, 69, 62, 67, 39, 80, 57, 20]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[4,69] + x[69,62] + x[62,67] + x[67,39] + x[39,80] + x[80,57] + x[57,20] + x[20,4] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 20) (5 -> 18) (6 -> 65) (7 -> 48) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 46) (12 -> 16) (13 -> 5) (14 -> 3) (15 -> 66) (16 -> 15) (17 -> 34) (18 -> 1) (19 -> 64) (20 -> 57) (21 -> 55) (22 -> 76) (23 -> 38) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 49) (28 -> 73) (29 -> 37) (30 -> 63) (31 -> 79) (32 -> 17) (33 -> 75) (34 -> 27) (35 -> 56) (36 -> 30) (37 -> 42) (38 -> 14) (39 -> 67) (40 -> 74) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 71) (50 -> 35) (51 -> 32) (52 -> 44) (53 -> 59) (54 -> 13) (55 -> 22) (56 -> 47) (57 -> 53) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 69) (63 -> 2) (64 -> 23) (65 -> 41) (66 -> 6) (67 -> 29) (68 -> 45) (69 -> 4) (70 -> 68) (71 -> 54) (72 -> 70) (73 -> 43) (74 -> 36) (75 -> 19) (76 -> 78) (77 -> 50) (78 -> 62) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 72, 70, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 29, 37, 42, 28, 73, 43, 26, 33, 75, 19, 64, 23, 38, 14, 3, 8, 61, 21, 55, 22, 76, 78, 62, 69, 4, 20, 57, 53, 59, 7, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 17, 34, 27, 49, 71, 54, 13, 5, 18], [44, 52]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 37 Cassage de contrainte 
> Cycle à casser : [44, 52]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[44,52] + x[52,44] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 10) (2 -> 9) (3 -> 8) (4 -> 69) (5 -> 18) (6 -> 65) (7 -> 29) (8 -> 61) (9 -> 72) (10 -> 40) (11 -> 46) (12 -> 16) (13 -> 5) (14 -> 38) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 1) (19 -> 75) (20 -> 4) (21 -> 67) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 63) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 30) (37 -> 42) (38 -> 23) (39 -> 80) (40 -> 74) (41 -> 27) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 24) (47 -> 31) (48 -> 58) (49 -> 71) (50 -> 35) (51 -> 32) (52 -> 49) (53 -> 59) (54 -> 13) (55 -> 68) (56 -> 47) (57 -> 20) (58 -> 11) (59 -> 7) (60 -> 77) (61 -> 21) (62 -> 78) (63 -> 2) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 39) (68 -> 45) (69 -> 62) (70 -> 3) (71 -> 54) (72 -> 70) (73 -> 43) (74 -> 36) (75 -> 53) (76 -> 22) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 57) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 10, 40, 74, 36, 30, 63, 2, 9, 72, 70, 3, 8, 61, 21, 67, 39, 80, 57, 20, 4, 69, 62, 78, 76, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 27, 34, 17, 44, 52, 49, 71, 54, 13, 5, 18], [7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 53, 59]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 38 Cassage de contrainte 
> Cycle à casser : [7, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 53, 59]
> Taille du cycle à casser : 33
> Nouvelle contrainte : x[7,29] + x[29,37] + x[37,42] + x[42,28] + x[28,73] + x[73,43] + x[43,26] + x[26,33] + x[33,48] + x[48,58] + x[58,11] + x[11,46] + x[46,24] + x[24,60] + x[60,77] + x[77,50] + x[50,35] + x[35,56] + x[56,47] + x[47,31] + x[31,79] + x[79,25] + x[25,51] + x[51,32] + x[32,14] + x[14,38] + x[38,23] + x[23,64] + x[64,19] + x[19,75] + x[75,53] + x[53,59] + x[59,7] ≤ 32
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 183.0
   Permutations :
(1 -> 18) (2 -> 63) (3 -> 70) (4 -> 69) (5 -> 13) (6 -> 65) (7 -> 59) (8 -> 3) (9 -> 2) (10 -> 1) (11 -> 46) (12 -> 16) (13 -> 54) (14 -> 38) (15 -> 66) (16 -> 15) (17 -> 44) (18 -> 5) (19 -> 75) (20 -> 4) (21 -> 61) (22 -> 55) (23 -> 64) (24 -> 60) (25 -> 51) (26 -> 33) (27 -> 34) (28 -> 73) (29 -> 37) (30 -> 36) (31 -> 79) (32 -> 14) (33 -> 48) (34 -> 17) (35 -> 56) (36 -> 74) (37 -> 42) (38 -> 23) (39 -> 67) (40 -> 10) (41 -> 80) (42 -> 28) (43 -> 26) (44 -> 52) (45 -> 12) (46 -> 21) (47 -> 31) (48 -> 58) (49 -> 27) (50 -> 35) (51 -> 32) (52 -> 24) (53 -> 57) (54 -> 71) (55 -> 68) (56 -> 47) (57 -> 20) (58 -> 11) (59 -> 53) (60 -> 77) (61 -> 8) (62 -> 78) (63 -> 30) (64 -> 19) (65 -> 41) (66 -> 6) (67 -> 29) (68 -> 45) (69 -> 62) (70 -> 72) (71 -> 49) (72 -> 9) (73 -> 43) (74 -> 40) (75 -> 7) (76 -> 22) (77 -> 50) (78 -> 76) (79 -> 25) (80 -> 39) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 18, 5, 13, 54, 71, 49, 27, 34, 17, 44, 52, 24, 60, 77, 50, 35, 56, 47, 31, 79, 25, 51, 32, 14, 38, 23, 64, 19, 75, 7, 59, 53, 57, 20, 4, 69, 62, 78, 76, 22, 55, 68, 45, 12, 16, 15, 66, 6, 65, 41, 80, 39, 67, 29, 37, 42, 28, 73, 43, 26, 33, 48, 58, 11, 46, 21, 61, 8, 3, 70, 72, 9, 2, 63, 30, 36, 74, 40, 10]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 183.0
> Nombre d'itération nécéssaires : 39
> Nombre de contraintes ajoutées : 38
> Ordre de parcours des drônes : 
1 -> 18 -> 5 -> 13 -> 54 -> 71 -> 49 -> 27 -> 34 -> 17 -> 44 -> 52 -> 24 -> 60 -> 77 -> 50 -> 35 -> 56 -> 47 -> 31 -> 79 -> 25 -> 51 -> 32 -> 14 -> 38 -> 23 -> 64 -> 19 -> 75 -> 7 -> 59 -> 53 -> 57 -> 20 -> 4 -> 69 -> 62 -> 78 -> 76 -> 22 -> 55 -> 68 -> 45 -> 12 -> 16 -> 15 -> 66 -> 6 -> 65 -> 41 -> 80 -> 39 -> 67 -> 29 -> 37 -> 42 -> 28 -> 73 -> 43 -> 26 -> 33 -> 48 -> 58 -> 11 -> 46 -> 21 -> 61 -> 8 -> 3 -> 70 -> 72 -> 9 -> 2 -> 63 -> 30 -> 36 -> 74 -> 40 -> 10 -> 1. 
