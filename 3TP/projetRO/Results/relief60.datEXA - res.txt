Résolution exacte pour relief/relief60.dat points à visiter :
Résolution d'initiale :  
> temps total = 132.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 3) (23 -> 18) (24 -> 27) (25 -> 11) (26 -> 48) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 42) (32 -> 26) (33 -> 60) (34 -> 50) (35 -> 57) (36 -> 34) (37 -> 21) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 37) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 2) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 42, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 48, 37, 21, 51, 30, 13, 39, 40, 41, 22, 3, 14, 29], [2, 5, 54], [4, 36, 34, 50, 46, 9, 16, 12, 15], [7, 23, 18, 55, 20, 52, 58, 56], [11, 17, 25]]
> Nombre de cycle(s) trouvé(s) : 5
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [2, 5, 54]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[2,5] + x[5,54] + x[54,2] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 133.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 11) (26 -> 37) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 26) (33 -> 60) (34 -> 42) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 22, 48, 50, 46, 9, 16, 12, 15, 4, 36, 34, 42, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 37, 3, 14, 29], [7, 23, 18, 55, 20, 52, 58, 56], [11, 17, 25]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [11, 17, 25]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[11,17] + x[17,25] + x[25,11] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 37) (26 -> 11) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 26) (33 -> 60) (34 -> 42) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 22, 48, 50, 46, 9, 16, 12, 15, 4, 36, 34, 42, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 11, 17, 25, 37, 3, 14, 29], [7, 23, 18, 55, 20, 52, 58, 56]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [7, 23, 18, 55, 20, 52, 58, 56]
> Taille du cycle à casser : 8
> Nouvelle contrainte : x[7,23] + x[23,18] + x[18,55] + x[55,20] + x[20,52] + x[52,58] + x[58,56] + x[56,7] ≤ 7
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 134.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 7) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 28) (25 -> 37) (26 -> 11) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 26) (33 -> 60) (34 -> 42) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 27) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 22, 48, 50, 46, 9, 16, 12, 15, 4, 36, 34, 42, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 7, 23, 18, 55, 20, 52, 58, 56, 27, 47, 45, 32, 26, 11, 17, 25, 37, 3, 14, 29], [24, 28]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [24, 28]
> Taille du cycle à casser : 2
> Nouvelle contrainte : x[24,28] + x[28,24] ≤ 1
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 135.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 23) (6 -> 8) (7 -> 49) (8 -> 28) (9 -> 41) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 16) (26 -> 11) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 42) (33 -> 60) (34 -> 50) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 54) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 26) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 37) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 26, 11, 17, 25, 16, 12, 15, 4, 36, 34, 50, 46, 9, 41, 22, 48, 37, 3, 14, 29], [2, 5, 23, 18, 55, 20, 52, 58, 56, 7, 49, 35, 57, 31], [6, 8, 28, 24, 27, 47, 45, 32, 42, 38, 10, 19, 43, 59, 33, 60, 53], [13, 39, 40, 54, 21, 51, 30]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [13, 39, 40, 54, 21, 51, 30]
> Taille du cycle à casser : 7
> Nouvelle contrainte : x[13,39] + x[39,40] + x[40,54] + x[54,21] + x[21,51] + x[51,30] + x[30,13] ≤ 6
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 23) (6 -> 8) (7 -> 40) (8 -> 28) (9 -> 41) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 16) (26 -> 11) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 42) (32 -> 26) (33 -> 60) (34 -> 50) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 2) (40 -> 54) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 37) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 42, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 11, 17, 25, 16, 12, 15, 4, 36, 34, 50, 46, 9, 41, 22, 48, 37, 3, 14, 29], [2, 5, 23, 18, 55, 20, 52, 58, 56, 7, 40, 54, 21, 51, 30, 13, 39]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [2, 5, 23, 18, 55, 20, 52, 58, 56, 7, 40, 54, 21, 51, 30, 13, 39]
> Taille du cycle à casser : 17
> Nouvelle contrainte : x[2,5] + x[5,23] + x[23,18] + x[18,55] + x[55,20] + x[20,52] + x[52,58] + x[58,56] + x[56,7] + x[7,40] + x[40,54] + x[54,21] + x[21,51] + x[51,30] + x[30,13] + x[13,39] + x[39,2] ≤ 16
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 37) (26 -> 11) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 26) (33 -> 60) (34 -> 42) (35 -> 57) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 20) (42 -> 22) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 38) (56 -> 7) (57 -> 31) (58 -> 56) (59 -> 33) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 57, 31, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 20, 52, 58, 56, 7, 23, 18, 55, 38, 10, 19, 43, 59, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 11, 17, 25, 37, 3, 14, 29], [4, 36, 34, 42, 22, 48, 50, 46, 9, 16, 12, 15]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [4, 36, 34, 42, 22, 48, 50, 46, 9, 16, 12, 15]
> Taille du cycle à casser : 12
> Nouvelle contrainte : x[4,36] + x[36,34] + x[34,42] + x[42,22] + x[22,48] + x[48,50] + x[50,46] + x[46,9] + x[9,16] + x[16,12] + x[12,15] + x[15,4] ≤ 11
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 37) (26 -> 57) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 60) (32 -> 26) (33 -> 2) (34 -> 42) (35 -> 56) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 33) (59 -> 11) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 56, 7, 23, 18, 55, 20, 52, 58, 33, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 22, 48, 50, 46, 9, 16, 12, 15, 4, 36, 34, 42, 38, 10, 19, 43, 59, 11, 17, 25, 37, 3, 14, 29], [6, 8, 28, 24, 27, 47, 45, 32, 26, 57, 31, 60, 53]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [6, 8, 28, 24, 27, 47, 45, 32, 26, 57, 31, 60, 53]
> Taille du cycle à casser : 13
> Nouvelle contrainte : x[6,8] + x[8,28] + x[28,24] + x[24,27] + x[27,47] + x[47,45] + x[45,32] + x[32,26] + x[26,57] + x[57,31] + x[31,60] + x[60,53] + x[53,6] ≤ 12
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 136.0
   Permutations :
(1 -> 44) (2 -> 5) (3 -> 14) (4 -> 36) (5 -> 54) (6 -> 8) (7 -> 23) (8 -> 28) (9 -> 16) (10 -> 19) (11 -> 17) (12 -> 15) (13 -> 39) (14 -> 29) (15 -> 4) (16 -> 12) (17 -> 25) (18 -> 55) (19 -> 43) (20 -> 52) (21 -> 51) (22 -> 48) (23 -> 18) (24 -> 27) (25 -> 37) (26 -> 57) (27 -> 47) (28 -> 24) (29 -> 1) (30 -> 13) (31 -> 2) (32 -> 26) (33 -> 60) (34 -> 42) (35 -> 56) (36 -> 34) (37 -> 3) (38 -> 10) (39 -> 40) (40 -> 41) (41 -> 22) (42 -> 38) (43 -> 59) (44 -> 49) (45 -> 32) (46 -> 9) (47 -> 45) (48 -> 50) (49 -> 35) (50 -> 46) (51 -> 30) (52 -> 58) (53 -> 6) (54 -> 21) (55 -> 20) (56 -> 7) (57 -> 31) (58 -> 33) (59 -> 11) (60 -> 53) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 44, 49, 35, 56, 7, 23, 18, 55, 20, 52, 58, 33, 60, 53, 6, 8, 28, 24, 27, 47, 45, 32, 26, 57, 31, 2, 5, 54, 21, 51, 30, 13, 39, 40, 41, 22, 48, 50, 46, 9, 16, 12, 15, 4, 36, 34, 42, 38, 10, 19, 43, 59, 11, 17, 25, 37, 3, 14, 29]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 136.0
> Nombre d'itération nécéssaires : 9
> Nombre de contraintes ajoutées : 8
> Ordre de parcours des drônes : 
1 -> 44 -> 49 -> 35 -> 56 -> 7 -> 23 -> 18 -> 55 -> 20 -> 52 -> 58 -> 33 -> 60 -> 53 -> 6 -> 8 -> 28 -> 24 -> 27 -> 47 -> 45 -> 32 -> 26 -> 57 -> 31 -> 2 -> 5 -> 54 -> 21 -> 51 -> 30 -> 13 -> 39 -> 40 -> 41 -> 22 -> 48 -> 50 -> 46 -> 9 -> 16 -> 12 -> 15 -> 4 -> 36 -> 34 -> 42 -> 38 -> 10 -> 19 -> 43 -> 59 -> 11 -> 17 -> 25 -> 37 -> 3 -> 14 -> 29 -> 1. 
