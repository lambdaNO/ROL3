Résolution exacte pour relief/relief80.dat points à visiter :
Résolution d'initiale :  
> temps total = 97.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 42) (12 -> 61) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 56) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 66) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 11) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 54) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 70) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 22) (56 -> 38) (57 -> 68) (58 -> 24) (59 -> 26) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 10) (65 -> 1) (66 -> 23) (67 -> 14) (68 -> 77) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 48) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 45) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 26, 19, 75, 65], [2, 78, 64, 10, 37, 53, 12, 61, 34, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 14, 79, 25, 56, 38, 11, 42, 49], [13, 57, 68, 77, 52, 35, 18], [16, 80, 45, 28, 41, 62]]
> Nombre de cycle(s) trouvé(s) : 4
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [1, 59, 26, 19, 75, 65]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[1,59] + x[59,26] + x[26,19] + x[19,75] + x[75,65] + x[65,1] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 98.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 38) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 45) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 38, 77, 52, 35, 18, 13, 57, 68, 14, 79, 25, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49], [16, 80, 45, 28, 41, 62]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [16, 80, 45, 28, 41, 62]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[16,80] + x[80,45] + x[45,28] + x[28,41] + x[41,62] + x[62,16] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 98.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 42) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 56) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 54) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 70) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 42, 49], [13, 57, 68, 14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 38, 77, 52, 35, 18]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 3 Cassage de contrainte 
> Cycle à casser : [13, 57, 68, 14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 38, 77, 52, 35, 18]
> Taille du cycle à casser : 18
> Nouvelle contrainte : x[13,57] + x[57,68] + x[68,14] + x[14,79] + x[79,25] + x[25,56] + x[56,45] + x[45,28] + x[28,41] + x[41,62] + x[62,16] + x[16,80] + x[80,38] + x[38,77] + x[77,52] + x[52,35] + x[35,18] + x[18,13] ≤ 17
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 98.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 45, 28, 41, 62, 16, 80, 38, 77, 52, 35, 18, 13, 57, 68, 14, 79, 25, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 4 Cassage de contrainte 
> Cycle à casser : [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49]
> Taille du cycle à casser : 33
> Nouvelle contrainte : x[2,78] + x[78,64] + x[64,48] + x[48,71] + x[71,72] + x[72,15] + x[15,31] + x[31,39] + x[39,9] + x[9,3] + x[3,33] + x[33,27] + x[27,36] + x[36,4] + x[4,21] + x[21,30] + x[30,58] + x[58,24] + x[24,43] + x[43,32] + x[32,6] + x[6,40] + x[40,44] + x[44,55] + x[55,11] + x[11,70] + x[70,5] + x[5,74] + x[74,47] + x[47,46] + x[46,42] + x[42,49] + x[49,2] ≤ 32
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 98.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 42) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 38) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 56) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 54) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 70) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 31) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 42, 49], [13, 57, 68, 14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 72, 15, 38, 77, 52, 35, 18]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 5 Cassage de contrainte 
> Cycle à casser : [13, 57, 68, 14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 72, 15, 38, 77, 52, 35, 18]
> Taille du cycle à casser : 20
> Nouvelle contrainte : x[13,57] + x[57,68] + x[68,14] + x[14,79] + x[79,25] + x[25,56] + x[56,45] + x[45,28] + x[28,41] + x[41,62] + x[62,16] + x[16,80] + x[80,72] + x[72,15] + x[15,38] + x[38,77] + x[77,52] + x[52,35] + x[35,18] + x[18,13] ≤ 19
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 98.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 38) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 31) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 45, 28, 41, 62, 16, 80, 72, 15, 38, 77, 52, 35, 18, 13, 57, 68, 14, 79, 25, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 6 Cassage de contrainte 
> Cycle à casser : [2, 78, 64, 48, 71, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49]
> Taille du cycle à casser : 31
> Nouvelle contrainte : x[2,78] + x[78,64] + x[64,48] + x[48,71] + x[71,31] + x[31,39] + x[39,9] + x[9,3] + x[3,33] + x[33,27] + x[27,36] + x[36,4] + x[4,21] + x[21,30] + x[30,58] + x[58,24] + x[24,43] + x[43,32] + x[32,6] + x[6,40] + x[40,44] + x[44,55] + x[55,11] + x[11,70] + x[70,5] + x[5,74] + x[74,47] + x[47,46] + x[46,42] + x[42,49] + x[49,2] ≤ 30
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 42) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 56) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 14) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 54) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 70) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 77) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 42, 49], [13, 57, 68, 77, 52, 35, 18], [14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 38]]
> Nombre de cycle(s) trouvé(s) : 4

Itération n° 7 Cassage de contrainte 
> Cycle à casser : [13, 57, 68, 77, 52, 35, 18]
> Taille du cycle à casser : 7
> Nouvelle contrainte : x[13,57] + x[57,68] + x[68,77] + x[77,52] + x[52,35] + x[35,18] + x[18,13] ≤ 6
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 18) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 44) (41 -> 62) (42 -> 67) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 25) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 38) (80 -> 49) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 45, 28, 41, 62, 16, 80, 49, 2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 44, 55, 11, 70, 5, 74, 47, 46, 42, 67, 61, 34, 26, 19, 75, 65], [7, 17, 60, 29, 20, 69, 25, 54, 8, 73, 22, 50, 63, 76], [13, 57, 68, 14, 79, 38, 77, 52, 35, 18]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 8 Cassage de contrainte 
> Cycle à casser : [13, 57, 68, 14, 79, 38, 77, 52, 35, 18]
> Taille du cycle à casser : 10
> Nouvelle contrainte : x[13,57] + x[57,68] + x[68,14] + x[14,79] + x[79,38] + x[38,77] + x[77,52] + x[52,35] + x[35,18] + x[18,13] ≤ 9
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 42) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 56) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 44) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 18) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 54) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 70) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65], [2, 78, 64, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 18, 13, 57, 68, 14, 79, 25, 56, 45, 28, 41, 62, 16, 80, 38, 77, 52, 35, 44, 55, 11, 42, 49]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 9 Cassage de contrainte 
> Cycle à casser : [1, 59, 10, 37, 53, 12, 66, 23, 51, 70, 5, 74, 47, 46, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65]
> Taille du cycle à casser : 34
> Nouvelle contrainte : x[1,59] + x[59,10] + x[10,37] + x[37,53] + x[53,12] + x[12,66] + x[66,23] + x[23,51] + x[51,70] + x[70,5] + x[5,74] + x[74,47] + x[47,46] + x[46,54] + x[54,8] + x[8,73] + x[73,22] + x[22,50] + x[50,63] + x[63,76] + x[76,7] + x[7,17] + x[17,60] + x[60,29] + x[29,20] + x[20,69] + x[69,67] + x[67,61] + x[61,34] + x[34,26] + x[26,19] + x[19,75] + x[75,65] + x[65,1] ≤ 33
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 31) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 77) (36 -> 4) (37 -> 53) (38 -> 11) (39 -> 9) (40 -> 18) (41 -> 62) (42 -> 67) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 44) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 22) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 25) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 2) (70 -> 5) (71 -> 72) (72 -> 15) (73 -> 48) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 38) (80 -> 49) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 45, 28, 41, 62, 16, 80, 49, 44, 55, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 2, 78, 64, 25, 54, 8, 73, 48, 71, 72, 15, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 18, 13, 57, 68, 14, 79, 38, 11, 70, 5, 74, 47, 46, 42, 67, 61, 34, 26, 19, 75, 65], [35, 77, 52]]
> Nombre de cycle(s) trouvé(s) : 2

Itération n° 10 Cassage de contrainte 
> Cycle à casser : [35, 77, 52]
> Taille du cycle à casser : 3
> Nouvelle contrainte : x[35,77] + x[77,52] + x[52,35] ≤ 2
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 99.0
   Permutations :
(1 -> 59) (2 -> 78) (3 -> 33) (4 -> 21) (5 -> 74) (6 -> 40) (7 -> 17) (8 -> 73) (9 -> 3) (10 -> 37) (11 -> 70) (12 -> 66) (13 -> 57) (14 -> 79) (15 -> 38) (16 -> 80) (17 -> 60) (18 -> 13) (19 -> 75) (20 -> 69) (21 -> 30) (22 -> 50) (23 -> 51) (24 -> 43) (25 -> 54) (26 -> 19) (27 -> 36) (28 -> 41) (29 -> 20) (30 -> 58) (31 -> 39) (32 -> 6) (33 -> 27) (34 -> 26) (35 -> 44) (36 -> 4) (37 -> 53) (38 -> 77) (39 -> 9) (40 -> 18) (41 -> 62) (42 -> 49) (43 -> 32) (44 -> 55) (45 -> 28) (46 -> 42) (47 -> 46) (48 -> 71) (49 -> 2) (50 -> 63) (51 -> 56) (52 -> 35) (53 -> 12) (54 -> 8) (55 -> 11) (56 -> 45) (57 -> 68) (58 -> 24) (59 -> 10) (60 -> 29) (61 -> 34) (62 -> 16) (63 -> 76) (64 -> 48) (65 -> 1) (66 -> 23) (67 -> 61) (68 -> 14) (69 -> 67) (70 -> 5) (71 -> 31) (72 -> 15) (73 -> 22) (74 -> 47) (75 -> 65) (76 -> 7) (77 -> 52) (78 -> 64) (79 -> 25) (80 -> 72) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 59, 10, 37, 53, 12, 66, 23, 51, 56, 45, 28, 41, 62, 16, 80, 72, 15, 38, 77, 52, 35, 44, 55, 11, 70, 5, 74, 47, 46, 42, 49, 2, 78, 64, 48, 71, 31, 39, 9, 3, 33, 27, 36, 4, 21, 30, 58, 24, 43, 32, 6, 40, 18, 13, 57, 68, 14, 79, 25, 54, 8, 73, 22, 50, 63, 76, 7, 17, 60, 29, 20, 69, 67, 61, 34, 26, 19, 75, 65]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 99.0
> Nombre d'itération nécéssaires : 11
> Nombre de contraintes ajoutées : 10
> Ordre de parcours des drônes : 
1 -> 59 -> 10 -> 37 -> 53 -> 12 -> 66 -> 23 -> 51 -> 56 -> 45 -> 28 -> 41 -> 62 -> 16 -> 80 -> 72 -> 15 -> 38 -> 77 -> 52 -> 35 -> 44 -> 55 -> 11 -> 70 -> 5 -> 74 -> 47 -> 46 -> 42 -> 49 -> 2 -> 78 -> 64 -> 48 -> 71 -> 31 -> 39 -> 9 -> 3 -> 33 -> 27 -> 36 -> 4 -> 21 -> 30 -> 58 -> 24 -> 43 -> 32 -> 6 -> 40 -> 18 -> 13 -> 57 -> 68 -> 14 -> 79 -> 25 -> 54 -> 8 -> 73 -> 22 -> 50 -> 63 -> 76 -> 7 -> 17 -> 60 -> 29 -> 20 -> 69 -> 67 -> 61 -> 34 -> 26 -> 19 -> 75 -> 65 -> 1. 
