Résolution exacte pour relief/relief130.dat points à visiter :
Résolution d'initiale :  
> temps total = 107.0
   Permutations :
(1 -> 75) (2 -> 127) (3 -> 128) (4 -> 63) (5 -> 68) (6 -> 99) (7 -> 39) (8 -> 79) (9 -> 11) (10 -> 83) (11 -> 71) (12 -> 110) (13 -> 42) (14 -> 21) (15 -> 32) (16 -> 26) (17 -> 96) (18 -> 1) (19 -> 120) (20 -> 44) (21 -> 114) (22 -> 25) (23 -> 115) (24 -> 70) (25 -> 24) (26 -> 93) (27 -> 50) (28 -> 72) (29 -> 10) (30 -> 61) (31 -> 124) (32 -> 4) (33 -> 125) (34 -> 7) (35 -> 15) (36 -> 67) (37 -> 98) (38 -> 37) (39 -> 17) (40 -> 109) (41 -> 43) (42 -> 2) (43 -> 122) (44 -> 62) (45 -> 41) (46 -> 30) (47 -> 33) (48 -> 118) (49 -> 121) (50 -> 130) (51 -> 100) (52 -> 126) (53 -> 36) (54 -> 78) (55 -> 80) (56 -> 113) (57 -> 88) (58 -> 95) (59 -> 66) (60 -> 16) (61 -> 9) (62 -> 85) (63 -> 49) (64 -> 31) (65 -> 59) (66 -> 3) (67 -> 27) (68 -> 84) (69 -> 94) (70 -> 47) (71 -> 18) (72 -> 69) (73 -> 116) (74 -> 51) (75 -> 111) (76 -> 82) (77 -> 90) (78 -> 129) (79 -> 57) (80 -> 29) (81 -> 105) (82 -> 91) (83 -> 106) (84 -> 58) (85 -> 76) (86 -> 23) (87 -> 48) (88 -> 117) (89 -> 119) (90 -> 6) (91 -> 103) (92 -> 97) (93 -> 102) (94 -> 73) (95 -> 13) (96 -> 40) (97 -> 5) (98 -> 19) (99 -> 54) (100 -> 112) (101 -> 34) (102 -> 28) (103 -> 45) (104 -> 92) (105 -> 55) (106 -> 107) (107 -> 60) (108 -> 74) (109 -> 81) (110 -> 86) (111 -> 53) (112 -> 22) (113 -> 52) (114 -> 46) (115 -> 65) (116 -> 123) (117 -> 35) (118 -> 104) (119 -> 56) (120 -> 77) (121 -> 87) (122 -> 64) (123 -> 108) (124 -> 101) (125 -> 8) (126 -> 89) (127 -> 12) (128 -> 14) (129 -> 20) (130 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 75, 111, 53, 36, 67, 27, 50, 130, 38, 37, 98, 19, 120, 77, 90, 6, 99, 54, 78, 129, 20, 44, 62, 85, 76, 82, 91, 103, 45, 41, 43, 122, 64, 31, 124, 101, 34, 7, 39, 17, 96, 40, 109, 81, 105, 55, 80, 29, 10, 83, 106, 107, 60, 16, 26, 93, 102, 28, 72, 69, 94, 73, 116, 123, 108, 74, 51, 100, 112, 22, 25, 24, 70, 47, 33, 125, 8, 79, 57, 88, 117, 35, 15, 32, 4, 63, 49, 121, 87, 48, 118, 104, 92, 97, 5, 68, 84, 58, 95, 13, 42, 2, 127, 12, 110, 86, 23, 115, 65, 59, 66, 3, 128, 14, 21, 114, 46, 30, 61, 9, 11, 71, 18], [52, 126, 89, 119, 56, 113]]
> Nombre de cycle(s) trouvé(s) : 2
Itération n° 1 Cassage de contrainte 
> Cycle à casser : [52, 126, 89, 119, 56, 113]
> Taille du cycle à casser : 6
> Nouvelle contrainte : x[52,126] + x[126,89] + x[89,119] + x[119,56] + x[56,113] + x[113,52] ≤ 5
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 75) (2 -> 127) (3 -> 128) (4 -> 63) (5 -> 68) (6 -> 112) (7 -> 39) (8 -> 79) (9 -> 82) (10 -> 83) (11 -> 71) (12 -> 29) (13 -> 42) (14 -> 1) (15 -> 32) (16 -> 73) (17 -> 95) (18 -> 50) (19 -> 120) (20 -> 126) (21 -> 2) (22 -> 25) (23 -> 115) (24 -> 70) (25 -> 24) (26 -> 93) (27 -> 64) (28 -> 72) (29 -> 10) (30 -> 61) (31 -> 124) (32 -> 4) (33 -> 125) (34 -> 7) (35 -> 15) (36 -> 67) (37 -> 98) (38 -> 37) (39 -> 17) (40 -> 109) (41 -> 43) (42 -> 26) (43 -> 122) (44 -> 62) (45 -> 41) (46 -> 30) (47 -> 33) (48 -> 118) (49 -> 121) (50 -> 130) (51 -> 100) (52 -> 80) (53 -> 36) (54 -> 78) (55 -> 129) (56 -> 113) (57 -> 88) (58 -> 99) (59 -> 66) (60 -> 5) (61 -> 9) (62 -> 85) (63 -> 49) (64 -> 31) (65 -> 59) (66 -> 3) (67 -> 27) (68 -> 84) (69 -> 94) (70 -> 47) (71 -> 18) (72 -> 69) (73 -> 116) (74 -> 51) (75 -> 111) (76 -> 44) (77 -> 90) (78 -> 114) (79 -> 57) (80 -> 21) (81 -> 105) (82 -> 91) (83 -> 106) (84 -> 58) (85 -> 76) (86 -> 23) (87 -> 11) (88 -> 117) (89 -> 119) (90 -> 6) (91 -> 110) (92 -> 97) (93 -> 102) (94 -> 16) (95 -> 13) (96 -> 40) (97 -> 103) (98 -> 19) (99 -> 54) (100 -> 48) (101 -> 34) (102 -> 28) (103 -> 45) (104 -> 92) (105 -> 55) (106 -> 107) (107 -> 60) (108 -> 74) (109 -> 81) (110 -> 86) (111 -> 53) (112 -> 22) (113 -> 52) (114 -> 46) (115 -> 65) (116 -> 123) (117 -> 35) (118 -> 104) (119 -> 56) (120 -> 77) (121 -> 87) (122 -> 96) (123 -> 108) (124 -> 101) (125 -> 8) (126 -> 89) (127 -> 12) (128 -> 14) (129 -> 20) (130 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 75, 111, 53, 36, 67, 27, 64, 31, 124, 101, 34, 7, 39, 17, 95, 13, 42, 26, 93, 102, 28, 72, 69, 94, 16, 73, 116, 123, 108, 74, 51, 100, 48, 118, 104, 92, 97, 103, 45, 41, 43, 122, 96, 40, 109, 81, 105, 55, 129, 20, 126, 89, 119, 56, 113, 52, 80, 21, 2, 127, 12, 29, 10, 83, 106, 107, 60, 5, 68, 84, 58, 99, 54, 78, 114, 46, 30, 61, 9, 82, 91, 110, 86, 23, 115, 65, 59, 66, 3, 128, 14], [4, 63, 49, 121, 87, 11, 71, 18, 50, 130, 38, 37, 98, 19, 120, 77, 90, 6, 112, 22, 25, 24, 70, 47, 33, 125, 8, 79, 57, 88, 117, 35, 15, 32], [44, 62, 85, 76]]
> Nombre de cycle(s) trouvé(s) : 3

Itération n° 2 Cassage de contrainte 
> Cycle à casser : [44, 62, 85, 76]
> Taille du cycle à casser : 4
> Nouvelle contrainte : x[44,62] + x[62,85] + x[85,76] + x[76,44] ≤ 3
> Nouvelle résolution après ajout de la nouvelle contrainte !
> temps total = 107.0
   Permutations :
(1 -> 75) (2 -> 31) (3 -> 128) (4 -> 63) (5 -> 68) (6 -> 112) (7 -> 39) (8 -> 79) (9 -> 11) (10 -> 83) (11 -> 71) (12 -> 110) (13 -> 42) (14 -> 21) (15 -> 32) (16 -> 26) (17 -> 95) (18 -> 1) (19 -> 120) (20 -> 44) (21 -> 114) (22 -> 25) (23 -> 115) (24 -> 70) (25 -> 24) (26 -> 93) (27 -> 50) (28 -> 72) (29 -> 10) (30 -> 61) (31 -> 124) (32 -> 4) (33 -> 125) (34 -> 7) (35 -> 15) (36 -> 67) (37 -> 98) (38 -> 37) (39 -> 17) (40 -> 109) (41 -> 43) (42 -> 2) (43 -> 122) (44 -> 62) (45 -> 41) (46 -> 30) (47 -> 33) (48 -> 118) (49 -> 121) (50 -> 130) (51 -> 100) (52 -> 126) (53 -> 36) (54 -> 78) (55 -> 80) (56 -> 113) (57 -> 88) (58 -> 99) (59 -> 66) (60 -> 16) (61 -> 9) (62 -> 85) (63 -> 49) (64 -> 34) (65 -> 59) (66 -> 3) (67 -> 27) (68 -> 84) (69 -> 94) (70 -> 47) (71 -> 18) (72 -> 69) (73 -> 116) (74 -> 51) (75 -> 111) (76 -> 82) (77 -> 90) (78 -> 129) (79 -> 57) (80 -> 29) (81 -> 127) (82 -> 91) (83 -> 106) (84 -> 58) (85 -> 76) (86 -> 23) (87 -> 56) (88 -> 117) (89 -> 119) (90 -> 6) (91 -> 103) (92 -> 97) (93 -> 102) (94 -> 73) (95 -> 13) (96 -> 40) (97 -> 5) (98 -> 19) (99 -> 54) (100 -> 48) (101 -> 74) (102 -> 28) (103 -> 45) (104 -> 92) (105 -> 55) (106 -> 107) (107 -> 60) (108 -> 64) (109 -> 81) (110 -> 86) (111 -> 53) (112 -> 22) (113 -> 52) (114 -> 46) (115 -> 65) (116 -> 123) (117 -> 35) (118 -> 104) (119 -> 105) (120 -> 77) (121 -> 87) (122 -> 96) (123 -> 108) (124 -> 101) (125 -> 8) (126 -> 89) (127 -> 12) (128 -> 14) (129 -> 20) (130 -> 38) > Cycle(s) trouvé(s) : Array{Int64,1}[[1, 75, 111, 53, 36, 67, 27, 50, 130, 38, 37, 98, 19, 120, 77, 90, 6, 112, 22, 25, 24, 70, 47, 33, 125, 8, 79, 57, 88, 117, 35, 15, 32, 4, 63, 49, 121, 87, 56, 113, 52, 126, 89, 119, 105, 55, 80, 29, 10, 83, 106, 107, 60, 16, 26, 93, 102, 28, 72, 69, 94, 73, 116, 123, 108, 64, 34, 7, 39, 17, 95, 13, 42, 2, 31, 124, 101, 74, 51, 100, 48, 118, 104, 92, 97, 5, 68, 84, 58, 99, 54, 78, 129, 20, 44, 62, 85, 76, 82, 91, 103, 45, 41, 43, 122, 96, 40, 109, 81, 127, 12, 110, 86, 23, 115, 65, 59, 66, 3, 128, 14, 21, 114, 46, 30, 61, 9, 11, 71, 18]]
> Nombre de cycle(s) trouvé(s) : 1

FIN - Problème résolu :
> temps total = 107.0
> Nombre d'itération nécéssaires : 3
> Nombre de contraintes ajoutées : 2
> Ordre de parcours des drônes : 
1 -> 75 -> 111 -> 53 -> 36 -> 67 -> 27 -> 50 -> 130 -> 38 -> 37 -> 98 -> 19 -> 120 -> 77 -> 90 -> 6 -> 112 -> 22 -> 25 -> 24 -> 70 -> 47 -> 33 -> 125 -> 8 -> 79 -> 57 -> 88 -> 117 -> 35 -> 15 -> 32 -> 4 -> 63 -> 49 -> 121 -> 87 -> 56 -> 113 -> 52 -> 126 -> 89 -> 119 -> 105 -> 55 -> 80 -> 29 -> 10 -> 83 -> 106 -> 107 -> 60 -> 16 -> 26 -> 93 -> 102 -> 28 -> 72 -> 69 -> 94 -> 73 -> 116 -> 123 -> 108 -> 64 -> 34 -> 7 -> 39 -> 17 -> 95 -> 13 -> 42 -> 2 -> 31 -> 124 -> 101 -> 74 -> 51 -> 100 -> 48 -> 118 -> 104 -> 92 -> 97 -> 5 -> 68 -> 84 -> 58 -> 99 -> 54 -> 78 -> 129 -> 20 -> 44 -> 62 -> 85 -> 76 -> 82 -> 91 -> 103 -> 45 -> 41 -> 43 -> 122 -> 96 -> 40 -> 109 -> 81 -> 127 -> 12 -> 110 -> 86 -> 23 -> 115 -> 65 -> 59 -> 66 -> 3 -> 128 -> 14 -> 21 -> 114 -> 46 -> 30 -> 61 -> 9 -> 11 -> 71 -> 18 -> 1. 
